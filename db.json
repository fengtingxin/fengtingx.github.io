{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/img/Pasted image 20230328094117.png","path":"img/Pasted image 20230328094117.png","modified":1,"renderable":0},{"_id":"source/img/Pasted image 20230328102127.png","path":"img/Pasted image 20230328102127.png","modified":1,"renderable":0},{"_id":"source/img/Pasted image 20230328203228.png","path":"img/Pasted image 20230328203228.png","modified":1,"renderable":0},{"_id":"source/img/Pasted image 20230328204702.png","path":"img/Pasted image 20230328204702.png","modified":1,"renderable":0},{"_id":"source/img/image-20230409001543100.png","path":"img/image-20230409001543100.png","modified":1,"renderable":0},{"_id":"source/img/image-20230328230401972.png","path":"img/image-20230328230401972.png","modified":1,"renderable":0},{"_id":"source/img/img.png","path":"img/img.png","modified":1,"renderable":0},{"_id":"source/img/img_1.png","path":"img/img_1.png","modified":1,"renderable":0},{"_id":"source/img/mysql45/1.png","path":"img/mysql45/1.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/contact/index.md","hash":"80571e2313dd2a8d2bbd942a0a252c5339a93bf4","modified":1721490102532},{"_id":"source/friends/index.md","hash":"a7404832b58a5fdda809ea9219ddf159500e8b3c","modified":1721490102532},{"_id":"source/_posts/.DS_Store","hash":"1776314a7c335a670ca7de802c3b087c8f9801cf","modified":1722263058759},{"_id":"source/404/index.md","hash":"28ec4cfd1cbdb46f6bd57d30d185199d9d5ce2b5","modified":1721490102520},{"_id":"source/_data/friends.json","hash":"fce5abe04ec0c6000141313cd687cf8c210a934a","modified":1721490102521},{"_id":"source/_posts/5月旅游计划.md","hash":"b03ff57616cbc62824cc2ab5455f3be1f1b97132","modified":1721490102526},{"_id":"source/_posts/724-寻找数组的中心下标.md","hash":"0f2d751a3eca7766e063b1caeb263f661d831be8","modified":1721490102527},{"_id":"source/_posts/617-合并二叉树.md","hash":"1db3dc8cffb7912a2e0a4f9a0ea6b32eb0b046de","modified":1721490102526},{"_id":"source/_posts/MySQL数据类型.md","hash":"d6b129140553c579a966693a49e5368dfa318589","modified":1721490102527},{"_id":"source/_posts/删除排序链表中的重复元素-II.md","hash":"d39e962e4e998083d0e419878612aa0358069160","modified":1721490102528},{"_id":"source/.DS_Store","hash":"47838d6fe4ddc5d12913654154a4dd4032a94063","modified":1722265694617},{"_id":"source/_posts/Java基础.md","hash":"ff76ff2339dbd574783e07c3907a66c25c5413b5","modified":1721490102527},{"_id":"source/_posts/二叉树的基本知识.md","hash":"aa81937cb3d6d5c3f8277dc42d12559af35ac66c","modified":1721490102528},{"_id":"source/_posts/删除排序链表中的重复元素.md","hash":"9aad043b87d6002ffd317b8309a95dac5e654663","modified":1721490102528},{"_id":"source/_posts/力扣刷题列表.md","hash":"cf15fa20c2e26afabc2bb88bf6587bc46ca9ce05","modified":1721490102528},{"_id":"source/_posts/力扣热题100题-LRU-缓存.md","hash":"9850ee2e5a0b73f32a2929bcb308fbd30498bb9f","modified":1721490102528},{"_id":"source/_posts/力扣热题100题-两数相加.md","hash":"25eb79428c9a2968d53dcb8128238692114ef265","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-两数之和.md","hash":"e3adead2d222f849985b396f5c6bfe11924cc099","modified":1721490102528},{"_id":"source/_posts/2956-找到两个数组中的公共元素.md","hash":"11a66cef0f7daac01a72275de9f234c80a9bfa0f","modified":1721490102526},{"_id":"source/_posts/力扣热题100题-二叉树的中序遍历.md","hash":"d19cb190b4885b3856d905edc641eb4ea278d2a1","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-160-相交链表.md","hash":"2c407f0d4781b4fa88ad69c63414d8251af4149e","modified":1721490102528},{"_id":"source/_posts/力扣热题100题-买卖股票的最佳时机.md","hash":"719af5b45a9fabff0be21cbdc74dc70f86d53e93","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-二叉树的直径.md","hash":"ebba10e8d7d03ae2ae782f4f6262f2a8db32b663","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-二叉树的最大深度.md","hash":"4ea65930f2adfa0f78487c023db8cd0c4dd03919","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-反转链表.md","hash":"720c785cb33c54baaf5fed28be53875fcc34aedb","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-二叉树展开为链表.md","hash":"93ecea894b508e05d341c40e69717516f48eb1b3","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-只出现一次的数字.md","hash":"36972323819ef7520055181a156b111c1f54587f","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-合并-K-个升序链表.md","hash":"3abba58262154366185a84231f070c0b6f966400","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-合并两个有序链表.md","hash":"a6c32353e9f7e9d8913cb2fa0510b2eddbd7a528","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-多数元素.md","hash":"ffd720bc57413b2e8f89776b7eae5f7d5157367e","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-回文链表.md","hash":"c657ebc2870bf72afc3b8b5d02e0a6405a0916e8","modified":1721490102529},{"_id":"source/_posts/力扣热题100题-无重复字符的最长子串.md","hash":"d3803d34d8d1171b7172c61a31e5a89e1b7e1f15","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-找到所有数组中消失的数字.md","hash":"b3466e710904201f7331d2c034cb549a419d259f","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-对称二叉树.md","hash":"dcae45610601c70d235779ad1676b006d78a5628","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-字母异位词分组.md","hash":"2bdfc1b8a63a87c5c33f9d8ebec36fafba31f5cb","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-比特位计数.md","hash":"3785138a6afa696156caec6ff195f1f4cf4460aa","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-最大子数组和.md","hash":"b2d0e444e7b4cd24796c938f27e2ef39a645eeb9","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-有效的括号.md","hash":"5e8ca908b3d5198075834172d55ddd051a59a686","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-环形链表.md","hash":"9895397be5a100311b718f313e382b475a5ca387","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-爬楼梯.md","hash":"6ff669220534fd12002e9ac22860b3a19ed1db08","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-汉明距离.md","hash":"688b0e66809f4a0f53c1e0ada7e1cc75112dc069","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-环形链表II.md","hash":"fb787821b1f329724a4dcf58fa24c347dec628c1","modified":1721490102530},{"_id":"source/_posts/只出现一次的数字2.md","hash":"53cb049b7992c8bd491fb86b32d14ce67b0ac394","modified":1721490102531},{"_id":"source/_posts/力扣热题100题-移动零.md","hash":"188412d5a71da28db065c8d3546a1a5c7ef8954d","modified":1721490102530},{"_id":"source/_posts/力扣热题100题-翻转二叉树.md","hash":"55491d847d871f66ffba3913aaffb89911559208","modified":1721490102530},{"_id":"source/_posts/复习整体策略.md","hash":"1909a67d65e93529f544a039db74c3a817c3afd8","modified":1721490102531},{"_id":"source/_posts/只出现一次的数字3.md","hash":"40775ab33c6c4f588553994bb17e4fc6a2be02a6","modified":1721490102531},{"_id":"source/_posts/复杂度分析.md","hash":"d6493f8437575f2a2cd98796c5090068e28267d5","modified":1721490102531},{"_id":"source/_posts/常用linux命令.md","hash":"041ca878555edf313cdac8c77d7db455ddc0a55d","modified":1721490102531},{"_id":"source/_posts/架构知识.md","hash":"1fcc256fe6fae694dbd8187a5b5a37a5a73c685f","modified":1721490102531},{"_id":"source/_posts/最小覆盖子串.md","hash":"b2f51766813285c0ad539ea7f304d3130a6ad440","modified":1721490102531},{"_id":"source/_posts/多数元素-II.md","hash":"63ebf090a3bae5d5d89db208d9832cc02b2e99ce","modified":1721490102531},{"_id":"source/_posts/滑动窗口模版.md","hash":"b030584b28acc23c4ba20991fd7239aa8187589b","modified":1721490102531},{"_id":"source/img/img.png","hash":"46ac5f3fbcd3b79a09f3ee038ff5e3554bee3c26","modified":1721490102535},{"_id":"source/tags/index.md","hash":"6674724882c57eb82f4593979457b83748a431cc","modified":1721490102537},{"_id":"source/categories/index.md","hash":"cadaf3e4648daf7facaf4fd85a9b578479258c90","modified":1721490102531},{"_id":"source/_posts/.obsidian/appearance.json","hash":"9439122150a0431e432676115220bc925af96094","modified":1721490102523},{"_id":"source/about/index.md","hash":"beb5fd2a3b48c519880d1eb8615e2c7411c82b33","modified":1721490102531},{"_id":"source/_posts/.obsidian/app.json","hash":"2512856e14a398a5ab22637c852e7acb289300e0","modified":1721490102523},{"_id":"source/_posts/.obsidian/core-plugins-migration.json","hash":"46d9be486f2fb0a1a6262ab8fe3c07ce989234a3","modified":1721490102523},{"_id":"source/_posts/.obsidian/canvas.json","hash":"64cad5668f08377810eba71133e60df8a9c63d0a","modified":1721490102523},{"_id":"source/img/img_1.png","hash":"81fc212f998c199c79f1e1275e64a273a7b05c1a","modified":1721490102535},{"_id":"source/_posts/algorithm/1456. 定长子串中元音的最大数目.md","hash":"325645114fd224e1eaf8a7167293dbf8fafb782e","modified":1721490102527},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"7a7e9dd69d4a2756327ee34721177b712177bb3f","modified":1721490102523},{"_id":"source/_posts/algorithm/大小为K且平均值大于等于阈值的子数组数目.md","hash":"58d8aa330ab14a853a7411878e3be46f2147f7be","modified":1722265751491},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1721490102523},{"_id":"source/_posts/algorithm/找到一个数字的 K 美丽值.md","hash":"71df13ac87a4fc6b0e484de151dd51bc53b380ba","modified":1721490102528},{"_id":"source/_posts/.obsidian/graph.json","hash":"a93bba9a59cf4c87a0b0e2242289276c8b47417f","modified":1721490102523},{"_id":"source/_posts/.obsidian/workspace.json","hash":"4adc1821a5a0e01f6254f0f73fbff5fabbb5a123","modified":1721490102523},{"_id":"source/_posts/mysql45/基础架构：一条SQL查询语句是如何执行的.md","hash":"0116e3bb9617858bee439c8cc84bb42fad12d20d","modified":1721490102528},{"_id":"source/_posts/algorithm/子数组最大平均数I.md","hash":"9a69fbc38a3a6e08db5d3c7e8532e3912840de98","modified":1722264538906},{"_id":"source/_posts/algorithm/学生分数的最小差值.md","hash":"3114d47fa3663245f544a9e82a5c0f81a413e0bf","modified":1722263413432},{"_id":"source/img/Pasted image 20230328102127.png","hash":"932ddb0dc70a2fe0e353480828f6de54ddb20c7c","modified":1721490102532},{"_id":"source/img/image-20230328230401972.png","hash":"2e95cb9e36394a271beae49175f5da18b47c55c4","modified":1721490102534},{"_id":"source/img/Pasted image 20230328094117.png","hash":"1b8f77ff34143d9546b0e3fb871913f47b2fa0fb","modified":1721490102532},{"_id":"source/img/image-20230409001543100.png","hash":"102d5b9b77ee20bd2c7b8bddcd4cd5f9b5806fc0","modified":1721490102535},{"_id":"source/img/Pasted image 20230328203228.png","hash":"861e8b9cb769fd21c9413909f3e5bae30ff3a1d8","modified":1721490102533},{"_id":"source/img/Pasted image 20230328204702.png","hash":"d84626511dce6cee58b9594b4a9a38ad3e205ac0","modified":1721490102534},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1721490102538},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1721490102538},{"_id":"themes/hexo-theme-matery/README.md","hash":"d64f79581eaf7b2ce8205209de8b01311db41832","modified":1721490102538},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1721490102538},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"45d95b12690fdf4aabe5c471ef9f84109bdaf7bd","modified":1721490102538},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"75616f959996591ea39c731ea4d44886198b8b67","modified":1721490102539},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1721490102539},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1721490102539},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"5b75b057c8d445fc9457cc7255b6e288cf8bd4da","modified":1721490102539},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1721490102539},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1721490102539},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"1ec09c3f99f3254fcf101c570f397f6720b7155b","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"922b32d758d5cdf8fbed9e67a197be0075706d3c","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"c1a4f1ae1cd515e305031091be53b0f6087852f3","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"8e70ef228d017b007cabce66e6bc39487037b94e","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"eb2f510fcb4201c2198326adc897c448d2ae8980","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"aae2bac175b0dc44717e1e7d27123ecf9a27b832","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1721490102544},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1721490102545},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1721490102539},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"50fd98a37f4b84bef7d8252737be892d233b0fd4","modified":1721490102546},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1721490102539},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1721490102539},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1721490102539},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"4765267aafe2871a2fdaeccd1598890219bd7d71","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"4fcfa5a9ac32382453be9c97e448c60463ec66d3","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"bf8caf85f3f03167f2cf431f4b04195f83de8d05","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"1984987a97b6e096860572e14a139d5dc1c54979","modified":1721490102540},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"d32b8533e88782d9dc12992a1189c7d7e4489825","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"c1e1800c3af752fca1eb4ed7a76f672b448b5ffa","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1721490102541},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"ff8b299df312416ae03d6969b44bdc1394a68717","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"976270ee3cdb6c2416ac28ead1bd5e0f6f8f7ece","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1721490102542},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1721490102543},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1721490102545},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1721490102543},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"f37ae96fe2995cd351631e4b46d956e53418674d","modified":1721490102545},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1721490102545},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1721490102543},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1721490102543},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1721490102545},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1721490102545},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1721490102545},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1721490102545},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1721490102545},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1721490102546},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1721490102545},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1721490102546},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1721490102546},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1721490102545},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1721490102546},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1721490102575},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1721490102583},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"7b06fe5dc7b9223df9fae0c20fc31d754eea670c","modified":1721490102585},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1721490102546},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1721490102578},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1721490102547},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1721490102547},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1721490102547},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1721490102547},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1721490102547},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1721490102551},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1721490102553},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1721490102554},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1721490102554},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1721490102554},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1721490102553},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1721490102554},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1721490102555},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1721490102555},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1721490102564},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1721490102556},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1721490102567},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1721490102567},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1721490102567},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1721490102567},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1721490102567},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1721490102568},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1721490102568},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1721490102567},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1721490102568},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1721490102570},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1721490102572},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1721490102573},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1721490102568},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1721490102568},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1721490102572},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1721490102574},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1721490102578},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1721490102578},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1721490102578},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1721490102578},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1721490102579},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1721490102580},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1721490102580},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1721490102580},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1721490102581},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1721490102582},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1721490102582},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1721490102582},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1721490102582},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1721490102582},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1721490102583},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1721490102583},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1721490102586},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1721490102586},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1721490102548},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1721490102548},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1721490102549},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1721490102555},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1721490102555},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1721490102550},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1721490102555},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1721490102555},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1721490102556},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1721490102556},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1721490102556},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1721490102556},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1721490102556},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1721490102570},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1721490102570},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1721490102570},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1721490102571},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1721490102571},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1721490102571},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1721490102572},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1721490102552},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1721490102554},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1721490102555},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1721490102576},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1721490102577},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1721490102577},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1721490102579},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1721490102579},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1721490102579},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1721490102581},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1721490102580},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1721490102580},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1721490102581},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1721490102581},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1721490102581},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1721490102582},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1721490102583},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1721490102583},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1721490102547},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1721490102547},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1721490102546},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1721490102579},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1721490102551},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1721490102548},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1721490102549},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1721490102557},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1721490102557},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1721490102575},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1721490102576},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1721490102574},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1721490102578},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1721490102578},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1721490102584},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1721490102548},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1721490102575},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1721490102577},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1721490102585},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1721490102549},{"_id":"source/img/mysql45/1.png","hash":"f3527e8d84f610661ea13014c46fdde0b276477e","modified":1721490102537},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1721490102573},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1721490102584},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1721490102570},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1721490102552},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1721490102554},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1721490102567},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1721490102564},{"_id":"public/search.xml","hash":"3869822bb85e601cff529edfb1c9a6de5dc607ec","modified":1722268261935},{"_id":"public/404/index.html","hash":"0c9360b009df0b2444a7baf85992eff996e53146","modified":1722268261935},{"_id":"public/friends/index.html","hash":"b2165c52db9775733ddb0f620140c68e3ad57f08","modified":1722268261935},{"_id":"public/categories/index.html","hash":"5b7e23c1b6d64e6224e8e14a46918fc698af75e7","modified":1722268261935},{"_id":"public/contact/index.html","hash":"1a00ca12833a5c30266ef0854b5fca873945d6a5","modified":1722268261935},{"_id":"public/tags/index.html","hash":"874f6b35fe29c68edf7bba28eb6da03cec3a9b94","modified":1722268261935},{"_id":"public/about/index.html","hash":"3c3a9ca45a958580d4e37d0884dcd331d88efc5a","modified":1722268261935},{"_id":"public/2024/07/29/algorithm/da-xiao-wei-k-qie-ping-jun-zhi-da-yu-deng-yu-yu-zhi-de-zi-shu-zu-shu-mu/index.html","hash":"a4f64a6af3cf51ee2d1cd059323ca73dad149682","modified":1722268261935},{"_id":"public/2024/07/29/algorithm/zi-shu-zu-zui-da-ping-jun-shu-i/index.html","hash":"6bf38552abe05e7a2ce4fd30c5b5b86db2ca7389","modified":1722268261935},{"_id":"public/2024/07/29/algorithm/xue-sheng-fen-shu-de-zui-xiao-chai-zhi/index.html","hash":"30653dc38861ba9fe77c069ec6ee6d85b8c2f679","modified":1722268261935},{"_id":"public/2024/07/18/algorithm/1456.ding-chang-zi-chuan-zhong-yuan-yin-de-zui-da-shu-mu/index.html","hash":"724adc22a3876c193505f1a1229cf2b22023f687","modified":1722268261935},{"_id":"public/2024/07/16/2956-zhao-dao-liang-ge-shu-zu-zhong-de-gong-gong-yuan-su/index.html","hash":"f313570b8aca0641384528aa71ca6c3dd0e84202","modified":1722268261935},{"_id":"public/2024/07/20/algorithm/zhao-dao-yi-ge-shu-zi-de-k-mei-li-zhi/index.html","hash":"26906e366e3c0da1311764dcf349d7fe142c690f","modified":1722268261935},{"_id":"public/2024/07/15/mysql45/ji-chu-jia-gou-yi-tiao-sql-cha-xun-yu-ju-shi-ru-he-zhi-xing-de/index.html","hash":"c8d29de3ae5ab168a502f12d43e0d94168f4a873","modified":1722268261935},{"_id":"public/2024/07/08/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao/index.html","hash":"d05344226fab6e5b068b0f4e298552dabc2c5e02","modified":1722268261935},{"_id":"public/2023/05/30/li-kou-re-ti-100-ti-zi-mu-yi-wei-ci-fen-zu/index.html","hash":"3c81a806f855fd13655af63b389266ca1c9bc1d9","modified":1722268261935},{"_id":"public/2023/04/20/li-kou-re-ti-100-ti-lru-huan-cun/index.html","hash":"47ee529418a8537817dd91bb061d6666a083262c","modified":1722268261935},{"_id":"public/2023/04/17/li-kou-re-ti-100-ti-er-cha-shu-zhan-kai-wei-lian-biao/index.html","hash":"56e53d11542557470ba4f26d635756a577797dcc","modified":1722268261935},{"_id":"public/2023/04/11/li-kou-re-ti-100-ti-he-bing-k-ge-sheng-xu-lian-biao/index.html","hash":"4f0487ba06704cf777ac8898133cc9e84a482ffb","modified":1722268261935},{"_id":"public/2023/04/08/5-yue-lu-you-ji-hua/index.html","hash":"cde40ba8e1be9eaf75c5fd251b071f2405774b5d","modified":1722268261935},{"_id":"public/2023/04/18/li-kou-re-ti-100-ti-huan-xing-lian-biao-ii/index.html","hash":"fabac91bede43e41509eeb6dee192ab82221c6d2","modified":1722268261935},{"_id":"public/2023/03/29/fu-xi-zheng-ti-ce-lue/index.html","hash":"9c45a98b336374c4832afa3166a780dd19ead963","modified":1722268261935},{"_id":"public/2023/03/28/java-ji-chu/index.html","hash":"72101d39b4835d53a77ea6bdd0a77a11ad785400","modified":1722268261935},{"_id":"public/2023/03/27/hua-dong-chuang-kou-mo-ban/index.html","hash":"03c7a6a12ca6f7bbaad589c3ff55ba3a9b53ea1d","modified":1722268261935},{"_id":"public/2023/03/27/zui-xiao-fu-gai-zi-chuan/index.html","hash":"c32c7b189d3b789956a53a6ca93c5c8ead029413","modified":1722268261935},{"_id":"public/2023/03/27/li-kou-re-ti-100-ti-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/index.html","hash":"2203806876a481b7ef073c852a221cfff12c2ab5","modified":1722268261935},{"_id":"public/2023/03/25/li-kou-re-ti-100-ti-liang-shu-xiang-jia/index.html","hash":"5cc7be16508770c42c8a606b18e01608e4d19e0e","modified":1722268261935},{"_id":"public/2023/03/23/li-kou-re-ti-100-ti-er-cha-shu-de-zhong-xu-bian-li/index.html","hash":"d20dd621132456dbf6d3dac3a975e5c5628ad352","modified":1722268261935},{"_id":"public/2023/03/22/li-kou-re-ti-100-ti-dui-cheng-er-cha-shu/index.html","hash":"861ac7ca1f90900171325d1a4da9af5b568705c9","modified":1722268261935},{"_id":"public/2023/03/22/li-kou-re-ti-100-ti-er-cha-shu-de-zui-da-shen-du/index.html","hash":"fa78603bbd29ab5c724be6608e1456fa42dad272","modified":1722268261935},{"_id":"public/2023/03/17/shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-ii/index.html","hash":"7656f9dfc1b7a493926b130450f58212552881d6","modified":1722268261935},{"_id":"public/2023/03/17/shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su/index.html","hash":"fb8cba83f286978febb238d2eb76db9236e6e47b","modified":1722268261935},{"_id":"public/2023/03/15/li-kou-re-ti-100-ti-mai-mai-gu-piao-de-zui-jia-shi-ji/index.html","hash":"c7219f9396b6225e086251b07c3443305f7a2819","modified":1722268261935},{"_id":"public/2023/03/06/zhi-chu-xian-yi-ci-de-shu-zi-3/index.html","hash":"7bc525c20ddd1996b556d59e66377c7d601916de","modified":1722268261935},{"_id":"public/2023/03/02/zhi-chu-xian-yi-ci-de-shu-zi-2/index.html","hash":"9cbc5b94ed32559e7a364c971ff5a2b571a8aece","modified":1722268261935},{"_id":"public/2023/03/01/li-kou-re-ti-100-ti-zhi-chu-xian-yi-ci-de-shu-zi/index.html","hash":"8bb8843fcf3f025dae8935959747e999b7a5419c","modified":1722268261935},{"_id":"public/2023/02/28/li-kou-re-ti-100-ti-huan-xing-lian-biao/index.html","hash":"024cf2830dd69ae40c58c11b8d48f4a2c0379fd3","modified":1722268261935},{"_id":"public/2023/02/24/li-kou-re-ti-100-ti-160-xiang-jiao-lian-biao/index.html","hash":"51c4cb26c30756ee1e59a7c24a317491a74fef88","modified":1722268261935},{"_id":"public/2023/02/23/duo-shu-yuan-su-ii/index.html","hash":"08cce8fda0f4eec29633c82054ddaba78e162b7e","modified":1722268261935},{"_id":"public/2023/02/22/li-kou-re-ti-100-ti-duo-shu-yuan-su/index.html","hash":"a06c463da98a2d72963fe7085d2b16ff89585e25","modified":1722268261935},{"_id":"public/2023/02/20/li-kou-re-ti-100-ti-fan-zhuan-lian-biao/index.html","hash":"a23b4cb54a934827b91f2f72093e679e284cc989","modified":1722268261935},{"_id":"public/2023/02/16/li-kou-re-ti-100-ti-hui-wen-lian-biao/index.html","hash":"5a5172532a5af89a13a5b42167a3c7421ab52679","modified":1722268261935},{"_id":"public/2023/02/18/li-kou-re-ti-100-ti-fan-zhuan-er-cha-shu/index.html","hash":"444adbbdb08e206e63290536c481a172eb0632ef","modified":1722268261935},{"_id":"public/2023/02/09/li-kou-re-ti-100-ti-yi-dong-ling/index.html","hash":"5728767a23f98651c9677063e261fcb42110fba9","modified":1722268261935},{"_id":"public/2023/01/31/li-kou-re-ti-100-ti-zhao-dao-suo-you-shu-zu-zhong-xiao-shi-de-shu-zi/index.html","hash":"166f5b2816dd823acb15200b6a5b8e7db9b7821a","modified":1722268261935},{"_id":"public/2023/01/30/li-kou-re-ti-100-ti-han-ming-ju-chi/index.html","hash":"da17114d4eddff00818c7ff2e7cea4ec7ccd700f","modified":1722268261935},{"_id":"public/2023/01/28/617-he-bing-er-cha-shu/index.html","hash":"60eb4bb47551e5243a0c4f22d7061dcbda77b624","modified":1722268261935},{"_id":"public/2023/01/28/li-kou-shua-ti-lie-biao/index.html","hash":"0af9d31c17d55e2e8ea351b5fa0c595bbc0e249b","modified":1722268261935},{"_id":"public/2023/01/05/li-kou-re-ti-100-ti-bi-te-wei-ji-shu/index.html","hash":"de178d3c45f6dfddd797098f0216e8119fb3ae2e","modified":1722268261935},{"_id":"public/2022/11/14/mysql-shu-ju-lei-xing/index.html","hash":"29aaf15ce823047cf98749dff114655ac207ea29","modified":1722268261935},{"_id":"public/2022/09/24/jia-gou-zhi-shi/index.html","hash":"f33003c32497a79e48e6459f3bea168091fd7a5b","modified":1722268261935},{"_id":"public/2022/06/23/li-kou-re-ti-100-ti-pa-lou-ti/index.html","hash":"b6b52a3c82d8bb7bdc8bcb29e3a80795cfbc1a56","modified":1722268261935},{"_id":"public/2022/06/18/li-kou-re-ti-100-ti-zui-da-zi-shu-zu-he/index.html","hash":"fb9b5b6fa3a4d8da4cba2291bc9b033abe289cfa","modified":1722268261935},{"_id":"public/2022/06/18/li-kou-re-ti-100-ti-he-bing-liang-ge-you-xu-lian-biao/index.html","hash":"fe8610f204064bf0808000fe03c27b937892ea06","modified":1722268261935},{"_id":"public/2022/06/18/li-kou-re-ti-100-ti-you-xiao-de-gua-hao/index.html","hash":"c72c63aafb456991896ba7c8de0c160199d7126c","modified":1722268261935},{"_id":"public/2022/06/16/fu-za-du-fen-xi/index.html","hash":"2fc5e5da5294768024ae981727d1a3b339fa6293","modified":1722268261935},{"_id":"public/2022/06/16/li-kou-re-ti-100-ti-liang-shu-zhi-he/index.html","hash":"0cf375bc6a2aac69049c24968422e46d052707b8","modified":1722268261935},{"_id":"public/2022/06/12/er-cha-shu-de-ji-ben-zhi-shi/index.html","hash":"bcd7a2309a5d26ccc888018096b572abce3259b2","modified":1722268261935},{"_id":"public/2022/06/12/li-kou-re-ti-100-ti-er-cha-shu-de-zhi-jing/index.html","hash":"df6d8dd29fb88581726452c04a984869052acda6","modified":1722268261935},{"_id":"public/2022/06/10/chang-yong-linux-ming-ling/index.html","hash":"b5375988c8a7a09c4fa9791ba04cf56c6c6bc85a","modified":1722268261935},{"_id":"public/archives/index.html","hash":"3693e2bfa9dd7fc3e7b3f4ca7d402884be7f3351","modified":1722268261935},{"_id":"public/archives/page/2/index.html","hash":"e6f669c9502b62b81735f88c8f854276d8b5671d","modified":1722268261935},{"_id":"public/archives/page/3/index.html","hash":"d75e241a24a06b26913c4f634daa46ec1caf914e","modified":1722268261935},{"_id":"public/archives/page/6/index.html","hash":"ed7f44a841bcbda4c38a3e65b066c0f1315638bf","modified":1722268261935},{"_id":"public/archives/page/5/index.html","hash":"e0996b898cd5eec7cb661c70a793e64499fe24f0","modified":1722268261935},{"_id":"public/archives/page/4/index.html","hash":"4837e081329c77b8fba2299e3bd456840b7955da","modified":1722268261935},{"_id":"public/archives/2022/index.html","hash":"4b8d47e8625b14f4c47532ba77bff162eb7f6741","modified":1722268261935},{"_id":"public/archives/2022/page/2/index.html","hash":"962c49df2ad0f3ece52331e000c2036e2cf10635","modified":1722268261935},{"_id":"public/archives/2022/06/index.html","hash":"f244a70a07a044a8421b6b5da1bb9448f723a1b9","modified":1722268261935},{"_id":"public/archives/2022/09/index.html","hash":"20715d97e0341e9fcd4dea1b4bcb1e061cc1ff01","modified":1722268261935},{"_id":"public/archives/2022/11/index.html","hash":"e24381c93ccccdf9bad3b06693e1d470806d5db5","modified":1722268261935},{"_id":"public/archives/2023/index.html","hash":"1ea5806c57d0dfde62b9fe59e72fa7a6c7555879","modified":1722268261935},{"_id":"public/archives/2023/page/2/index.html","hash":"14057b3b218e7ab2005caac3dbafd26950a92d87","modified":1722268261935},{"_id":"public/archives/2023/page/3/index.html","hash":"121741a1f11565a0dcae572ae48e1fb886562aea","modified":1722268261935},{"_id":"public/archives/2023/page/4/index.html","hash":"b4c773e68744edbc200dade3a0a8383b88a98b04","modified":1722268261935},{"_id":"public/archives/2023/01/index.html","hash":"4ef26dd3fd0c7916f2e00fe59a0a061db0520a69","modified":1722268261935},{"_id":"public/archives/2023/02/index.html","hash":"5f0539b4c77f97e193c9b68a6a71da3a97dea5d6","modified":1722268261935},{"_id":"public/archives/2023/03/index.html","hash":"ada9c44e6ed32664c0f295c0524fd2f7cb5d9bed","modified":1722268261935},{"_id":"public/archives/2023/03/page/2/index.html","hash":"327adb0df2ba299d42d03c42f2d26ea1c24a00ac","modified":1722268261935},{"_id":"public/archives/2023/04/index.html","hash":"b550a842ef163b676d11bdedc05f042b54c8ea5b","modified":1722268261935},{"_id":"public/archives/2024/index.html","hash":"4acb145ba475ca853cb0dada1c012d6f2f2bd6c4","modified":1722268261935},{"_id":"public/archives/2023/05/index.html","hash":"d887a4cf547671ea528c060697ba4e9a5e902f7a","modified":1722268261935},{"_id":"public/archives/2024/07/index.html","hash":"22f13c0d4b6bb640329364cb9300f363c1421a17","modified":1722268261935},{"_id":"public/index.html","hash":"18b80148485a20aa1725af67d7ab2ff1b01ad5a0","modified":1722268261935},{"_id":"public/page/2/index.html","hash":"da7a3d69fe541d1136f689feece11376e9f2f837","modified":1722268261935},{"_id":"public/page/3/index.html","hash":"5cfea22720ec519ad2da939d8c151ac785a4366c","modified":1722268261935},{"_id":"public/page/4/index.html","hash":"c7bb672fd254c5137a7797713221c1e3cf99391b","modified":1722268261935},{"_id":"public/page/5/index.html","hash":"f67ee9f5327fa5c45da79824ba44d950e9860a29","modified":1722268261935},{"_id":"public/categories/算法/index.html","hash":"86af2b43cc95e7e3d882ccf44662eab5f1ede04d","modified":1722268261935},{"_id":"public/categories/Mysql/index.html","hash":"3d61330c03f57118ad3f278a1ee4d8ed3e69608d","modified":1722268261935},{"_id":"public/tags/出行/index.html","hash":"8a554af83348bc02bd30a51da4fec311985f12d1","modified":1722268261935},{"_id":"public/tags/算法/index.html","hash":"59bf315fa23b268c0b7e4d952e47e6ead11dd8ad","modified":1722268261935},{"_id":"public/tags/算法/page/2/index.html","hash":"8dbf34738c39d79b006bdb0b0e9f510bb00ae164","modified":1722268261935},{"_id":"public/tags/算法/page/3/index.html","hash":"c7d7823e23047756e56670b02d95a8fb5d5ccb29","modified":1722268261935},{"_id":"public/tags/算法/page/4/index.html","hash":"a3d5baacdfa3bbcf2cd606d8208af7f5e685a5d4","modified":1722268261935},{"_id":"public/tags/算法/page/5/index.html","hash":"5f999dcc6be7cbc0fdcdeefcf86a8e8a19cc5b24","modified":1722268261935},{"_id":"public/tags/力扣热题100题/index.html","hash":"f80b842afaa96bb2310d6fae98f1b441b50a1815","modified":1722268261935},{"_id":"public/tags/力扣热题100题/page/2/index.html","hash":"e3b7bbadfd5ee10d7aba58dd02d8a2f4fc410050","modified":1722268261935},{"_id":"public/tags/力扣热题100题/page/3/index.html","hash":"2579190b83dbf6435fa22dcbd2eb6856aed60b93","modified":1722268261935},{"_id":"public/tags/JVM/index.html","hash":"78953d2b3b84ba72f2944602a3ce2d48846a76b6","modified":1722268261935},{"_id":"public/tags/java/index.html","hash":"9be099b571c175cb9433af953455c9d99e779fdd","modified":1722268261935},{"_id":"public/tags/集合/index.html","hash":"ea76510021e2611c1f5480bfcfd7785445acb24c","modified":1722268261935},{"_id":"public/tags/MYSQL/index.html","hash":"6c126534ed59562db4babf034d4cba588675969d","modified":1722268261935},{"_id":"public/tags/二叉树/index.html","hash":"4610e29baf506eea18e42be66fd56bfb2c3f5dd6","modified":1722268261935},{"_id":"public/tags/数组/index.html","hash":"13218fe4527d8660c16fabf2be3007f43f71028e","modified":1722268261935},{"_id":"public/tags/链表/index.html","hash":"e4d09150a462558322fd3a13efcad3e56427f36e","modified":1722268261935},{"_id":"public/tags/动态规划/index.html","hash":"cc46f81d6aca92d8d2056442a6c94703792294c6","modified":1722268261935},{"_id":"public/tags/哈希表/index.html","hash":"00d6e0e495a710967736bb9f60b6d6092c08547c","modified":1722268261935},{"_id":"public/tags/异或与/index.html","hash":"15b66aed03e6bbb021f55ea2c673d392b482dad5","modified":1722268261935},{"_id":"public/tags/哈希/index.html","hash":"417b50b957031722dbda84ba0ace0354bc4c67ef","modified":1722268261935},{"_id":"public/tags/滑动窗口算法/index.html","hash":"77405bdb308ab8c29b8ea9d4c13cc6c5d36a6deb","modified":1722268261935},{"_id":"public/tags/待回顾/index.html","hash":"8fde3b090d5599976572a2c31e92c7f8036fd91c","modified":1722268261935},{"_id":"public/tags/二进制/index.html","hash":"2af5947deb456af3a16a527d261578fe8618a081","modified":1722268261935},{"_id":"public/tags/备战/index.html","hash":"d79c878e73dcf638b68644fae6e97b91cdeb9dfe","modified":1722268261935},{"_id":"public/tags/复杂度分析/index.html","hash":"3c5cf58719b0f9b73487d491f2ddac64a302d149","modified":1722268261935},{"_id":"public/tags/linux/index.html","hash":"1901fc1c3f98c6c0cbe3eb119a1d41f6c7aae6eb","modified":1722268261935},{"_id":"public/tags/滑动窗口/index.html","hash":"c7fa90212ab9f71d73345d9d2686cf2ba3179ee4","modified":1722268261935},{"_id":"public/tags/定长滑动窗口专题/index.html","hash":"0a3ec74c277ef447df40570b7042264abef7f05a","modified":1722268261935},{"_id":"public/tags/架构/index.html","hash":"5596064fd1221742afb7ae5c501017e430bc546a","modified":1722268261935},{"_id":"public/tags/MqSQL实战45讲/index.html","hash":"4cb47609e1233a16a3e9935747eea3acbaf3d54b","modified":1722268261935},{"_id":"public/tags/待完善/index.html","hash":"177bbdc864b3bdbb1c7acdd4daa7c53139a0dee6","modified":1722268261935},{"_id":"public/img/img.png","hash":"46ac5f3fbcd3b79a09f3ee038ff5e3554bee3c26","modified":1722268261935},{"_id":"public/img/img_1.png","hash":"81fc212f998c199c79f1e1275e64a273a7b05c1a","modified":1722268261935},{"_id":"public/favicon.png","hash":"50fd98a37f4b84bef7d8252737be892d233b0fd4","modified":1722268261935},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1722268261935},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1722268261935},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1722268261935},{"_id":"public/medias/logo.png","hash":"7b06fe5dc7b9223df9fae0c20fc31d754eea670c","modified":1722268261935},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1722268261935},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1722268261935},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1722268261935},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1722268261935},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1722268261935},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1722268261935},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1722268261935},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1722268261935},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1722268261935},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1722268261935},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1722268261935},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1722268261935},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1722268261935},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1722268261935},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1722268261935},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1722268261935},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1722268261935},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1722268261935},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1722268261935},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1722268261935},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1722268261935},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1722268261935},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1722268261935},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1722268261935},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1722268261935},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1722268261935},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1722268261935},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1722268261935},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1722268261935},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1722268261935},{"_id":"public/img/image-20230328230401972.png","hash":"2e95cb9e36394a271beae49175f5da18b47c55c4","modified":1722268261935},{"_id":"public/img/Pasted image 20230328102127.png","hash":"932ddb0dc70a2fe0e353480828f6de54ddb20c7c","modified":1722268261935},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1722268261935},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1722268261935},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1722268261935},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1722268261935},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1722268261935},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1722268261935},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1722268261935},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1722268261935},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1722268261935},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1722268261935},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1722268261935},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1722268261935},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1722268261935},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1722268261935},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1722268261935},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1722268261935},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1722268261935},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1722268261935},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1722268261935},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1722268261935},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1722268261935},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1722268261935},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1722268261935},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1722268261935},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1722268261935},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1722268261935},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1722268261935},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1722268261935},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1722268261935},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1722268261935},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1722268261935},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1722268261935},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1722268261935},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1722268261935},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1722268261935},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1722268261935},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1722268261935},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1722268261935},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1722268261935},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1722268261935},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1722268261935},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1722268261935},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1722268261935},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1722268261935},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1722268261935},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1722268261935},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1722268261935},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1722268261935},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1722268261935},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1722268261935},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1722268261935},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1722268261935},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1722268261935},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1722268261935},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1722268261935},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1722268261935},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1722268261935},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1722268261935},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1722268261935},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1722268261935},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1722268261935},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1722268261935},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1722268261935},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1722268261935},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1722268261935},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1722268261935},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1722268261935},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1722268261935},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1722268261935},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1722268261935},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1722268261935},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1722268261935},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1722268261935},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1722268261935},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1722268261935},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1722268261935},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1722268261935},{"_id":"public/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1722268261935},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1722268261935},{"_id":"public/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1722268261935},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1722268261935},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1722268261935},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1722268261935},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1722268261935},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1722268261935},{"_id":"public/img/Pasted image 20230328094117.png","hash":"1b8f77ff34143d9546b0e3fb871913f47b2fa0fb","modified":1722268261935},{"_id":"public/img/image-20230409001543100.png","hash":"102d5b9b77ee20bd2c7b8bddcd4cd5f9b5806fc0","modified":1722268261935},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1722268261935},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1722268261935},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1722268261935},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1722268261935},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1722268261935},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1722268261935},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1722268261935},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1722268261935},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1722268261935},{"_id":"public/img/Pasted image 20230328203228.png","hash":"861e8b9cb769fd21c9413909f3e5bae30ff3a1d8","modified":1722268261935},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1722268261935},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1722268261935},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1722268261935},{"_id":"public/img/Pasted image 20230328204702.png","hash":"d84626511dce6cee58b9594b4a9a38ad3e205ac0","modified":1722268261935},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1722268261935},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1722268261935},{"_id":"public/img/mysql45/1.png","hash":"f3527e8d84f610661ea13014c46fdde0b276477e","modified":1722268261935}],"Category":[{"name":"算法","_id":"clz76202d0010tp4lem9e9ib1"},{"name":"Mysql","_id":"clz76202p003ptp4l3e3ddbmr"}],"Data":[{"_id":"friends","data":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"contact","date":"2022-06-10T03:14:29.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-06-10 11:14:29\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2024-07-20T15:41:42.532Z","path":"contact/index.html","comments":1,"_id":"clz76201z0000tp4l4xpt3rfa","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2022-06-10T03:15:32.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-06-10 11:15:32\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2024-07-20T15:41:42.532Z","path":"friends/index.html","comments":1,"_id":"clz7620230002tp4l5w51gtag","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2022-06-10T03:11:10.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-06-10 11:11:10\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2024-07-20T15:41:42.531Z","path":"categories/index.html","comments":1,"_id":"clz7620240005tp4ld8565fsz","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2022-06-10T03:11:10.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-06-10 11:11:10\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2024-07-20T15:41:42.537Z","path":"tags/index.html","comments":1,"_id":"clz7620250007tp4l0ybu2bmk","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2022-06-10T03:11:10.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-06-10 11:11:10\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2024-07-20T15:41:42.531Z","path":"about/index.html","comments":1,"_id":"clz7620260009tp4l15y819v5","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"404","date":"2022-06-10T03:16:50.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-06-10 11:16:50\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2024-07-20T15:41:42.520Z","path":"404/index.html","comments":1,"_id":"clz762026000dtp4l57ec3cin","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"5月旅游计划","date":"2023-04-08T05:43:29.000Z","_content":"\n本次旅游周期为：4.29 - 5.13，通过半个月的时间中，浏览祖国的大好河山并拍婚纱照。\n\n- [ ] 4.29 北京到沧州\n\n  - [ ] 晚上5点多到沧州\n\n- [ ] 4.30 沧州到宁波\n\n  - [ ] 上午休息\n  - [ ] 下午从沧州到宁波\n\n- [ ] 5.1 宁波到杭州 （宁波耗时1天）\n\n  - [ ] 宁波游玩攻略-待安排\n  - [ ] 晚上从宁波出发到杭州\n\n- [ ] 5.2杭州游玩\n\n- [ ] 5.3 杭州到上海\n\n  - [ ] 中午从杭州出发到上海\n\n- [ ] 5.4 上海到厦门\n\n  - [ ] 早晨7点飞机 - 到虹桥国际机场T1航站楼 - 9点半到厦门高崎国际机场\n  - [ ] 下午3点到《纯粹映像》挑衣服\n  - [ ] **酒店推荐**\n    - [ ] 厦门希尔顿逸林酒店\n    - [ ] 鼓浪屿复境民宿 - 房间比较小\n    - [ ]  厦门鹭江宾馆 - 中山路\n    - [ ] 如果住在厦门大学附近较好。\n\n- [ ] 5.5厦门-婚纱照-拍照\n\n- [ ] 5.6厦门-婚纱照-选照片\n\n- [ ] 5.7厦门-游玩\n\n  - [ ] 吃东西 - 可到地方再看大众点评\n    - [ ] 晨曦沙茶面 -必吃榜\n    - [ ] 肠粉\n    - [ ] 临家闽南菜\n    - [ ] 珍珍海蛎煎\n    - [ ] 遇见巧妈\n  - [ ] 鼓浪屿：细节攻略：https://www.mafengwo.cn/gonglve/ziyouxing/374412.html\n    1. 上岛的**船票一定要提前买**，通过“**厦门轮渡有限公司**”公众号预定\n    2. 日光岩\n    3.  菽庄花园\n    4. 风琴博物馆\n    5. 环岛路木栈道\n  - [ ] 中山路 - 步行街\n  - [ ] 厦门大学 - 在中山路附近\n  - [ ] 白城沙滩+胡里山炮台\n\n- [ ] 5.8厦门到成都\n\n  - [ ] 19点飞机 高崎机场T4 到成都天府机场T2 \n\n- [ ] 5.9成都到丽江\n\n  ![云南计划图](/img/image-20230409001543100.png)\n\n  - [ ] 早晨6.30飞机 成都天府机场T2 8.30到三义机场\n  - [ ] 丽江游玩\n\n- [ ] 5.10 丽江\n\n- [ ] 5.11大理\n\n- [ ] 5.12 大理到昆明\n\n- [ ] 5.13 昆明到北京\n","source":"_posts/5月旅游计划.md","raw":"---\ntitle: 5月旅游计划\ndate: 2023-04-08 13:43:29\ntags:\n  - 出行\n---\n\n本次旅游周期为：4.29 - 5.13，通过半个月的时间中，浏览祖国的大好河山并拍婚纱照。\n\n- [ ] 4.29 北京到沧州\n\n  - [ ] 晚上5点多到沧州\n\n- [ ] 4.30 沧州到宁波\n\n  - [ ] 上午休息\n  - [ ] 下午从沧州到宁波\n\n- [ ] 5.1 宁波到杭州 （宁波耗时1天）\n\n  - [ ] 宁波游玩攻略-待安排\n  - [ ] 晚上从宁波出发到杭州\n\n- [ ] 5.2杭州游玩\n\n- [ ] 5.3 杭州到上海\n\n  - [ ] 中午从杭州出发到上海\n\n- [ ] 5.4 上海到厦门\n\n  - [ ] 早晨7点飞机 - 到虹桥国际机场T1航站楼 - 9点半到厦门高崎国际机场\n  - [ ] 下午3点到《纯粹映像》挑衣服\n  - [ ] **酒店推荐**\n    - [ ] 厦门希尔顿逸林酒店\n    - [ ] 鼓浪屿复境民宿 - 房间比较小\n    - [ ]  厦门鹭江宾馆 - 中山路\n    - [ ] 如果住在厦门大学附近较好。\n\n- [ ] 5.5厦门-婚纱照-拍照\n\n- [ ] 5.6厦门-婚纱照-选照片\n\n- [ ] 5.7厦门-游玩\n\n  - [ ] 吃东西 - 可到地方再看大众点评\n    - [ ] 晨曦沙茶面 -必吃榜\n    - [ ] 肠粉\n    - [ ] 临家闽南菜\n    - [ ] 珍珍海蛎煎\n    - [ ] 遇见巧妈\n  - [ ] 鼓浪屿：细节攻略：https://www.mafengwo.cn/gonglve/ziyouxing/374412.html\n    1. 上岛的**船票一定要提前买**，通过“**厦门轮渡有限公司**”公众号预定\n    2. 日光岩\n    3.  菽庄花园\n    4. 风琴博物馆\n    5. 环岛路木栈道\n  - [ ] 中山路 - 步行街\n  - [ ] 厦门大学 - 在中山路附近\n  - [ ] 白城沙滩+胡里山炮台\n\n- [ ] 5.8厦门到成都\n\n  - [ ] 19点飞机 高崎机场T4 到成都天府机场T2 \n\n- [ ] 5.9成都到丽江\n\n  ![云南计划图](/img/image-20230409001543100.png)\n\n  - [ ] 早晨6.30飞机 成都天府机场T2 8.30到三义机场\n  - [ ] 丽江游玩\n\n- [ ] 5.10 丽江\n\n- [ ] 5.11大理\n\n- [ ] 5.12 大理到昆明\n\n- [ ] 5.13 昆明到北京\n","slug":"5月旅游计划","published":1,"updated":"2024-07-20T15:41:42.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz7620210001tp4l7hrb2jzk","content":"<p>本次旅游周期为：4.29 - 5.13，通过半个月的时间中，浏览祖国的大好河山并拍婚纱照。</p>\n<ul>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n4.29 北京到沧州</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 晚上5点多到沧州</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n4.30 沧州到宁波</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 上午休息</li>\n<li><input disabled=\"\" type=\"checkbox\"> 下午从沧州到宁波</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.1 宁波到杭州 （宁波耗时1天）</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 宁波游玩攻略-待安排</li>\n<li><input disabled=\"\" type=\"checkbox\"> 晚上从宁波出发到杭州</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.2杭州游玩</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.3 杭州到上海</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 中午从杭州出发到上海</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.4 上海到厦门</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 早晨7点飞机 - 到虹桥国际机场T1航站楼 - 9点半到厦门高崎国际机场</li>\n<li><input disabled=\"\" type=\"checkbox\"> 下午3点到《纯粹映像》挑衣服</li>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>酒店推荐</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 厦门希尔顿逸林酒店</li>\n<li><input disabled=\"\" type=\"checkbox\"> 鼓浪屿复境民宿 - 房间比较小</li>\n<li><input disabled=\"\" type=\"checkbox\"> 厦门鹭江宾馆 - 中山路</li>\n<li><input disabled=\"\" type=\"checkbox\"> 如果住在厦门大学附近较好。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.5厦门-婚纱照-拍照</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.6厦门-婚纱照-选照片</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.7厦门-游玩</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 吃东西 - 可到地方再看大众点评<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 晨曦沙茶面 -必吃榜</li>\n<li><input disabled=\"\" type=\"checkbox\"> 肠粉</li>\n<li><input disabled=\"\" type=\"checkbox\"> 临家闽南菜</li>\n<li><input disabled=\"\" type=\"checkbox\"> 珍珍海蛎煎</li>\n<li><input disabled=\"\" type=\"checkbox\"> 遇见巧妈</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 鼓浪屿：细节攻略：<a href=\"https://www.mafengwo.cn/gonglve/ziyouxing/374412.html\">https://www.mafengwo.cn/gonglve/ziyouxing/374412.html</a><ol>\n<li>上岛的<strong>船票一定要提前买</strong>，通过“<strong>厦门轮渡有限公司</strong>”公众号预定</li>\n<li>日光岩</li>\n<li>菽庄花园</li>\n<li>风琴博物馆</li>\n<li>环岛路木栈道</li>\n</ol>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 中山路 - 步行街</li>\n<li><input disabled=\"\" type=\"checkbox\"> 厦门大学 - 在中山路附近</li>\n<li><input disabled=\"\" type=\"checkbox\"> 白城沙滩+胡里山炮台</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.8厦门到成都</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 19点飞机 高崎机场T4 到成都天府机场T2</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.9成都到丽江</p>\n<p><img src=\"/img/image-20230409001543100.png\" alt=\"云南计划图\"></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 早晨6.30飞机 成都天府机场T2 8.30到三义机场</li>\n<li><input disabled=\"\" type=\"checkbox\"> 丽江游玩</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.10 丽江</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.11大理</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.12 大理到昆明</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.13 昆明到北京</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>本次旅游周期为：4.29 - 5.13，通过半个月的时间中，浏览祖国的大好河山并拍婚纱照。</p>\n<ul>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n4.29 北京到沧州</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 晚上5点多到沧州</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n4.30 沧州到宁波</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 上午休息</li>\n<li><input disabled=\"\" type=\"checkbox\"> 下午从沧州到宁波</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.1 宁波到杭州 （宁波耗时1天）</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 宁波游玩攻略-待安排</li>\n<li><input disabled=\"\" type=\"checkbox\"> 晚上从宁波出发到杭州</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.2杭州游玩</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.3 杭州到上海</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 中午从杭州出发到上海</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.4 上海到厦门</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 早晨7点飞机 - 到虹桥国际机场T1航站楼 - 9点半到厦门高崎国际机场</li>\n<li><input disabled=\"\" type=\"checkbox\"> 下午3点到《纯粹映像》挑衣服</li>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>酒店推荐</strong><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 厦门希尔顿逸林酒店</li>\n<li><input disabled=\"\" type=\"checkbox\"> 鼓浪屿复境民宿 - 房间比较小</li>\n<li><input disabled=\"\" type=\"checkbox\"> 厦门鹭江宾馆 - 中山路</li>\n<li><input disabled=\"\" type=\"checkbox\"> 如果住在厦门大学附近较好。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.5厦门-婚纱照-拍照</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.6厦门-婚纱照-选照片</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.7厦门-游玩</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 吃东西 - 可到地方再看大众点评<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 晨曦沙茶面 -必吃榜</li>\n<li><input disabled=\"\" type=\"checkbox\"> 肠粉</li>\n<li><input disabled=\"\" type=\"checkbox\"> 临家闽南菜</li>\n<li><input disabled=\"\" type=\"checkbox\"> 珍珍海蛎煎</li>\n<li><input disabled=\"\" type=\"checkbox\"> 遇见巧妈</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 鼓浪屿：细节攻略：<a href=\"https://www.mafengwo.cn/gonglve/ziyouxing/374412.html\">https://www.mafengwo.cn/gonglve/ziyouxing/374412.html</a><ol>\n<li>上岛的<strong>船票一定要提前买</strong>，通过“<strong>厦门轮渡有限公司</strong>”公众号预定</li>\n<li>日光岩</li>\n<li>菽庄花园</li>\n<li>风琴博物馆</li>\n<li>环岛路木栈道</li>\n</ol>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 中山路 - 步行街</li>\n<li><input disabled=\"\" type=\"checkbox\"> 厦门大学 - 在中山路附近</li>\n<li><input disabled=\"\" type=\"checkbox\"> 白城沙滩+胡里山炮台</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.8厦门到成都</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 19点飞机 高崎机场T4 到成都天府机场T2</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.9成都到丽江</p>\n<p><img src=\"/img/image-20230409001543100.png\" alt=\"云南计划图\"></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 早晨6.30飞机 成都天府机场T2 8.30到三义机场</li>\n<li><input disabled=\"\" type=\"checkbox\"> 丽江游玩</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.10 丽江</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.11大理</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.12 大理到昆明</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n5.13 昆明到北京</p>\n</li>\n</ul>\n"},{"title":"力扣热题100题-合并二叉树","date":"2023-01-28T14:57:59.000Z","_content":"\n给你两棵二叉树： root1 和 root2 。\n\n想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。\n\n返回合并后的二叉树。\n\n注意: 合并过程必须从两个树的根节点开始。\n\n示例 1：\n\n![image-20230128225905397](/Users/tangwenru/Library/Application Support/typora-user-images/image-20230128225905397.png)输入：root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n输出：[3,4,5,5,4,null,7]\n示例 2：\n\n输入：root1 = [1], root2 = [1,2]\n输出：[2,2]\n\n\n提示：\n\n两棵树中的节点数目在范围 [0, 2000] 内\n-104 <= Node.val <= 104\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/merge-two-binary-trees\n\n\n\n思路：\n\n同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if(root1 == null){\n            return root2;\n        }\n        if(root2 == null){\n            return root1;\n        }\n        root1.val += root2.val;\n        root1.left = mergeTrees(root1.left,root2.left);\n        root1.right = mergeTrees(root1.right,root2.right);\n        return root1;\n    }\n}\n```\n\n时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数\n\n空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。\n\n\n\n","source":"_posts/617-合并二叉树.md","raw":"---\ntitle: 力扣热题100题-合并二叉树\ndate: 2023-01-28 22:57:59\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给你两棵二叉树： root1 和 root2 。\n\n想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。\n\n返回合并后的二叉树。\n\n注意: 合并过程必须从两个树的根节点开始。\n\n示例 1：\n\n![image-20230128225905397](/Users/tangwenru/Library/Application Support/typora-user-images/image-20230128225905397.png)输入：root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n输出：[3,4,5,5,4,null,7]\n示例 2：\n\n输入：root1 = [1], root2 = [1,2]\n输出：[2,2]\n\n\n提示：\n\n两棵树中的节点数目在范围 [0, 2000] 内\n-104 <= Node.val <= 104\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/merge-two-binary-trees\n\n\n\n思路：\n\n同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if(root1 == null){\n            return root2;\n        }\n        if(root2 == null){\n            return root1;\n        }\n        root1.val += root2.val;\n        root1.left = mergeTrees(root1.left,root2.left);\n        root1.right = mergeTrees(root1.right,root2.right);\n        return root1;\n    }\n}\n```\n\n时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数\n\n空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。\n\n\n\n","slug":"617-合并二叉树","published":1,"updated":"2024-07-20T15:41:42.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz7620230003tp4l0h30aati","content":"<p>给你两棵二叉树： root1 和 root2 。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p>注意: 合并过程必须从两个树的根节点开始。</p>\n<p>示例 1：</p>\n<p>![image-20230128225905397](&#x2F;Users&#x2F;tangwenru&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230128225905397.png)输入：root1 &#x3D; [1,3,2,5], root2 &#x3D; [2,1,3,null,4,null,7]<br>输出：[3,4,5,5,4,null,7]<br>示例 2：</p>\n<p>输入：root1 &#x3D; [1], root2 &#x3D; [1,2]<br>输出：[2,2]</p>\n<p>提示：</p>\n<p>两棵树中的节点数目在范围 [0, 2000] 内<br>-104 &lt;&#x3D; Node.val &lt;&#x3D; 104</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/merge-two-binary-trees\">https://leetcode.cn/problems/merge-two-binary-trees</a></p>\n<p>思路：</p>\n<p>同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        root1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数</p>\n<p>空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你两棵二叉树： root1 和 root2 。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p>注意: 合并过程必须从两个树的根节点开始。</p>\n<p>示例 1：</p>\n<p>![image-20230128225905397](&#x2F;Users&#x2F;tangwenru&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230128225905397.png)输入：root1 &#x3D; [1,3,2,5], root2 &#x3D; [2,1,3,null,4,null,7]<br>输出：[3,4,5,5,4,null,7]<br>示例 2：</p>\n<p>输入：root1 &#x3D; [1], root2 &#x3D; [1,2]<br>输出：[2,2]</p>\n<p>提示：</p>\n<p>两棵树中的节点数目在范围 [0, 2000] 内<br>-104 &lt;&#x3D; Node.val &lt;&#x3D; 104</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/merge-two-binary-trees\">https://leetcode.cn/problems/merge-two-binary-trees</a></p>\n<p>思路：</p>\n<p>同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        root1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数</p>\n<p>空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。</p>\n"},{"title":"724. 寻找数组的中心下标","date":"2024-07-08T14:01:04.000Z","_content":"\n给你一个整数数组 `nums` ，请计算数组的 **中心下标** 。\n\n数组 **中心下标** 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。\n\n如果中心下标位于数组最左端，那么左侧数之和视为 `0` ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。\n\n如果数组有多个中心下标，应该返回 **最靠近左边** 的那一个。如果数组不存在中心下标，返回 `-1` 。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [1, 7, 3, 6, 5, 6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。\n```\n\n**示例 3：**\n\n```\n输入：nums = [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。\n```\n\n **提示：**\n\n- `1 <= nums.length <= 104`\n- `-1000 <= nums[i] <= 1000`\n\n **注意：**本题与主站 1991 题相同：https://leetcode-cn.com/problems/find-the-middle-index-in-array/\n\n\n\n回答：\n\n时间复杂度接近于O (n^2)\n\n```java\nclass Solution {\n    public int pivotIndex(int[] nums) {\n        // 设置中心下标\n        if(nums.length == 1 || nums.length == 0){\n            return 0;\n        }\n        //从1开始循环下标,例如:\n        // 1 2 3 4 5\n        // 1 1+2\n        int result = 0;\n        int preSum = 0;\n        for(int center = result; center < nums.length;center++){\n            //循环加,使用\n            int sum = 0;\n            for(int start = center + 1;start<nums.length; start++){\n                sum += nums[start];\n            }\n            if(preSum == sum){\n                return center;\n            }\n            preSum +=nums[center];\n        }\n        return -1;\n    }\n}\n```\n\n\n\n高级解法：\n\n思路：求和，然后利用左边和右边判断.\n\n```java\nclass Solution {\n    public int pivotIndex(int[] nums) {\n        int sumLeft = 0; // 左边的总和\n\n        int sumRight = Arrays.stream(nums).sum();\n\n        for (int i = 0; i < nums.length; i++) {\n            //删除中间节点\n            sumRight = sumRight - nums[i];\n\n            if(sumLeft == sumRight){\n                return i;\n            }\n\n            sumLeft+=nums[i];\n        }\n        return -1;\n\n    }\n}\n```\n","source":"_posts/724-寻找数组的中心下标.md","raw":"---\ntitle: 724. 寻找数组的中心下标\ndate: 2024-07-08 22:01:04\ntags:\n  - 算法\n---\n\n给你一个整数数组 `nums` ，请计算数组的 **中心下标** 。\n\n数组 **中心下标** 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。\n\n如果中心下标位于数组最左端，那么左侧数之和视为 `0` ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。\n\n如果数组有多个中心下标，应该返回 **最靠近左边** 的那一个。如果数组不存在中心下标，返回 `-1` 。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [1, 7, 3, 6, 5, 6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。\n```\n\n**示例 3：**\n\n```\n输入：nums = [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。\n```\n\n **提示：**\n\n- `1 <= nums.length <= 104`\n- `-1000 <= nums[i] <= 1000`\n\n **注意：**本题与主站 1991 题相同：https://leetcode-cn.com/problems/find-the-middle-index-in-array/\n\n\n\n回答：\n\n时间复杂度接近于O (n^2)\n\n```java\nclass Solution {\n    public int pivotIndex(int[] nums) {\n        // 设置中心下标\n        if(nums.length == 1 || nums.length == 0){\n            return 0;\n        }\n        //从1开始循环下标,例如:\n        // 1 2 3 4 5\n        // 1 1+2\n        int result = 0;\n        int preSum = 0;\n        for(int center = result; center < nums.length;center++){\n            //循环加,使用\n            int sum = 0;\n            for(int start = center + 1;start<nums.length; start++){\n                sum += nums[start];\n            }\n            if(preSum == sum){\n                return center;\n            }\n            preSum +=nums[center];\n        }\n        return -1;\n    }\n}\n```\n\n\n\n高级解法：\n\n思路：求和，然后利用左边和右边判断.\n\n```java\nclass Solution {\n    public int pivotIndex(int[] nums) {\n        int sumLeft = 0; // 左边的总和\n\n        int sumRight = Arrays.stream(nums).sum();\n\n        for (int i = 0; i < nums.length; i++) {\n            //删除中间节点\n            sumRight = sumRight - nums[i];\n\n            if(sumLeft == sumRight){\n                return i;\n            }\n\n            sumLeft+=nums[i];\n        }\n        return -1;\n\n    }\n}\n```\n","slug":"724-寻找数组的中心下标","published":1,"updated":"2024-07-20T15:41:42.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz7620250006tp4l6kkc1z3i","content":"<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标</strong> 。</p>\n<p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>\n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1, 7, 3, 6, 5, 6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum &#x3D; nums[0] + nums[1] + nums[2] &#x3D; 1 + 7 + 3 &#x3D; 11 ，\n右侧数之和 sum &#x3D; nums[4] + nums[5] &#x3D; 5 + 6 &#x3D; 11 ，二者相等。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum &#x3D; 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum &#x3D; nums[1] + nums[2] &#x3D; 1 + -1 &#x3D; 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n<p> <strong>注意：</strong>本题与主站 1991 题相同：<a href=\"https://leetcode-cn.com/problems/find-the-middle-index-in-array/\">https://leetcode-cn.com/problems/find-the-middle-index-in-array/</a></p>\n<p>回答：</p>\n<p>时间复杂度接近于O (n^2)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 设置中心下标</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//从1开始循环下标,例如:</span>\n        <span class=\"token comment\">// 1 2 3 4 5</span>\n        <span class=\"token comment\">// 1 1+2</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> preSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> center <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span> center <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>center<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//循环加,使用</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> center <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>start<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> start<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preSum <span class=\"token operator\">==</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            preSum <span class=\"token operator\">+=</span>nums<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>高级解法：</p>\n<p>思路：求和，然后利用左边和右边判断.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sumLeft <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左边的总和</span>\n\n        <span class=\"token keyword\">int</span> sumRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//删除中间节点</span>\n            sumRight <span class=\"token operator\">=</span> sumRight <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sumLeft <span class=\"token operator\">==</span> sumRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            sumLeft<span class=\"token operator\">+=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标</strong> 。</p>\n<p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>\n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1, 7, 3, 6, 5, 6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum &#x3D; nums[0] + nums[1] + nums[2] &#x3D; 1 + 7 + 3 &#x3D; 11 ，\n右侧数之和 sum &#x3D; nums[4] + nums[5] &#x3D; 5 + 6 &#x3D; 11 ，二者相等。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum &#x3D; 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum &#x3D; nums[1] + nums[2] &#x3D; 1 + -1 &#x3D; 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n<p> <strong>注意：</strong>本题与主站 1991 题相同：<a href=\"https://leetcode-cn.com/problems/find-the-middle-index-in-array/\">https://leetcode-cn.com/problems/find-the-middle-index-in-array/</a></p>\n<p>回答：</p>\n<p>时间复杂度接近于O (n^2)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 设置中心下标</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//从1开始循环下标,例如:</span>\n        <span class=\"token comment\">// 1 2 3 4 5</span>\n        <span class=\"token comment\">// 1 1+2</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> preSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> center <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span> center <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>center<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//循环加,使用</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> center <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>start<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> start<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preSum <span class=\"token operator\">==</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            preSum <span class=\"token operator\">+=</span>nums<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>高级解法：</p>\n<p>思路：求和，然后利用左边和右边判断.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sumLeft <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左边的总和</span>\n\n        <span class=\"token keyword\">int</span> sumRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//删除中间节点</span>\n            sumRight <span class=\"token operator\">=</span> sumRight <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sumLeft <span class=\"token operator\">==</span> sumRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            sumLeft<span class=\"token operator\">+=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"JVM基础","date":"2023-03-28T01:40:14.000Z","_content":"\nJava基础问题\n\n\n\n\n![[/img/Pasted image 20230328094117.png]]先了解个背景：\n\njdk6：常量池在方法区中，方法区在堆中\n\njdk7：常量池在堆中，方法区在堆中\n\njdk8：常量池在堆中，元空间（由jdk7的方法区改名而来）在堆外\n\nString类型的常量池比较特殊。它的主要使用方法有两种：\n\n-   **直接使用双引号声明出来的String对象会直接存储在常量池中。**\n-   **如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中**\n\n栈：\n  ![[/img/Pasted image 20230328203228.png]]\n\n场景1：代码执行环境>=jdk7\n\n```java\npublic static void main(String[] args) {\n        String s = new String(\"1\"); //这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。\n        s.intern();//这一行相当于没有起作用，因为\"1\"已经在常量池中了。\n        String s2 = \"1\"; // \"在编译期就能发现的常量，会存储在常量池中。\n        System.out.println(s == s2); //所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池\n        //结果为false\n\n\n        String s3 = new String(\"1\") + new String(\"1\"); //创建了几个对象？ 4个对象。 我们这里要搞清楚s3到底指向了哪里？指向了堆，因为它的结果是通过new 构造出来的。\n        s3.intern(); // s3在常量池中创建。\n        String s4 = \"11\"; // s4 指向常量池中11\n        System.out.println(s3 == s4); //结果为true，因为s3和s4 都是指向常量池的指针。\n    }\n```\n\n下面开始进阶一点：如果将`s3.intern()`往下移一行呢? 代码执行环境>=jdk7\n\n```java\npublic static void main(String[] args) {\n        String s = new String(\"1\"); //这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。\n        s.intern();//这一行相当于没有起作用，因为\"1\"已经在常量池中了。\n        String s2 = \"1\"; // \"在编译期就能发现的常量，会存储在常量池中。\n        System.out.println(s == s2); //所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池\n        //结果为false\n\n\n        String s3 = new String(\"1\") + new String(\"1\"); //创建了几个对象？ 2 个 + 1 = 3个对象。 4个对象。\n//        s3.intern(); // 由于s3就是在常量池中的，所以执行此方法，我理解也意义不大。\n        String s4 = \"11\"; // s4 指向常量池中11\n        s3.intern(); //由于此时常量池中已经存在\"11\"的常量了，所以s3直接返回对象的指针。\n        System.out.println(s3 == s4); //结果为false，因为s4 指向常量池,s3指向堆。\n    }\n```\n\n  \n\n如果是jdk6的环境呢？\n\n```java\npublic static void jdk6() {\n\n        String s = new String(\"1\");\n        s.intern();\n        String s2 = \"1\";\n        System.out.println(s == s2); //false\n\n\n        String s3 = new String(\"1\") + new String(\"1\"); //s3 指向的是堆中的地址\n        s3.intern(); // jdk6同7不同的是，JDK6中，intern()方法会把首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里面这个字符串实例的引用。可以理解为只复制内容到常量池，不改栈指向堆的指针。\n        String s4 = \"11\"; // s4 指向常量池中11\n        System.out.println(s3 == s4); //结果为false，因为s4 指向常量池,s3指向堆。\n    }\n```\n\n  \n  \n\nJava堆：是线程共享的一块区域，此区域的唯一目的是为了存储对象实例，几乎所有的对象实例都在这里创建（有例外：栈上分配，TLAB）\n\n堆内容的划分：新生代；老年代；永久代（元空间）\n\n新生代又分为 eden区，s0、s1区。\n\n  \n\n常见概念：\n新生代垃圾回收：Minor GC / Young GC\n老年代回收：Major GC\n整堆垃圾回收：Full GC，收集整个堆和方法区\n混合收集（Mix）：Mix GC，G1中的概念，收集整个新生代和部分老年代。\n\n对象的分配过程：\n1. 判断对象是否有逃逸，如果对象没有逃逸，那么就没有必要分配在堆上；\n需要通过jvm参数控制开启逃逸分析**(-XX: +DoEscapeAnalysis)**；开启标量替换**(-XX: +EliminateAllocaCons)**\n分析对象的作用域，可能被其他方法引用到叫做方法逃逸；可能被其他线程使用叫做线程逃逸\n即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。\n先看一下锁消除：如果即时编译器能够判断锁对象不逃逸，那么对该对象的加锁、解锁操作都没有任何意义。\n其次在看下什么是栈上分配：由于直接在栈上初始化对象，并通过弹出栈帧来自动回收对象空间，这样就无需借助堆内存的垃圾回收\n不过HotSpot并没有采用栈上分配的方式，原因是有很多逻辑使用了\"对象只能堆分配\"，所以其使用了**标量替换**的技术，简单来说就是判断未逃逸的对象中有哪些属性使用，将这个对象替换为对象中的成员变量，直接在栈上初始化这些成员变量，这个同栈上分配一样，也无需借助堆内存的垃圾回收。\n2. 在判断完如果无需栈上分配之后，需要判断是否开启**TLAB**，如果开启，那么需要进行TLAB的判断。（[[https://www.bilibili.com/read/cv10375688 | TLAB全解 ]]）\n\tTLAB是什么？是线程本地分配缓存区，是线程私有的，线程初始化的时候会创建TLAB。TLAB占据的是Eden区中的一块空间，通常占据1%，为线程划分独立的对象分配空间。\n\t\n\t为什么要有TLAB？是怎么使用的？\n\tTLAB的出现的目的是避免堆上直接分配内存从而避免频繁的锁竞争。\n\t在检查如果开启了TLAB时，如果开启了，那么判断此线程剩余的TLAB大小时候满足于分配此对象，如果不满足，再判断TLAB的剩余空间是否小于最大浪费空间限制（动态值），如果是，则从Eden区中重新申请一个TLAB空间；否则直接在TLAB外分配。发生GC时，TLAB会被回收。\n\t-XX:UseTLAB 开启TLAB 默认开启\n\t![[/img/Pasted image 20230328102127.png]]\n\t\n\tTLAB有什么缺点，怎么解决？\n\tTLAB引入后，由于存在TLAB停止的场景，也就是在TLAB的剩余空间小于最大浪费空间限制值下，需要重新申请一个TLAB，那么此时的剩余空间就是一个间隙。或者是GC时，还有TLAB的剩余空间。如果不管这些空间那么GC的时候这些空间就需要额外的检查，影响GC的扫描效率。\n所以如果是我们自己设计一个TLAB的空间，\n1）不能设置这个空间太大或者太小，太小会造成多频次的重新申请TLAB空间，太大会造成空间浪费；\n2）每次申请空间大小最好不要固定，而是动态的。\n3）由于TLAB是由线程创建的，所以需要关注当前gc轮次内的会分配对象的线程数量\n4）也需要关注每个线程会创建对象的数量及所需的空间，即申请TLAB次数。\n综上，实际是缺失一个历史期望值的概念。TLAB中经常使用的是EMA（指数平均数）算法\n新的期望大小 = 堆给TLAB的空间总大小 * 当前分配比例 EMA / 重填次数配置 \n\n\n\n我们在了解了这些之后，再来回顾下堆、栈、方法区的关系。\n```java\nHelloWorld instance = new HelloWorld();\n```\n这行代码中Instance在栈中的局部变量表中，指向java的堆，java的堆中有对象实例数据，在对象头中有关于此对象的类型信息， 指向方法区。\n\n\n常见的JVM命令\n**Java栈：** **•** -Xss：设置线程最⼤栈空间。 \n**Java堆：**\n• 【-Xmx】设置堆空间最⼤⼤⼩（新⽣代 + ⽼年代） \n• 【-Xms】设置堆空间初始⼤⼩（新⽣代 + ⽼年代） \n• 【-XX:NewRa6o】设置⽼年代/新⽣代⼤⼩⽐例。\n• 【-XX:SurvivorRadio】设置Eden区和S0和S1区⼤⼩⽐例。设置成8，代表Eden:S0:S1=8:1:1 \n• 【-XX:UseTLAB】开启tlab空间 \n• 【-XX:TLABWasteTargetPercent】设置TLAB占Eden区空间百分⽐ \n• 【-XX:handlePromo6onFailure】是否设置空间分配担保 \n• 【-XX:MaxTenuringThreshold】设置默认的晋升年龄 \n**PermGen：**\n• 【-XX:PermSize】设置永久代初始⼤⼩\n• 【-XX:MaxPermSize】设置永久代最⼤可分配空间 \n**MetaSpace：** \n• 【-XX:MetaspaceSize】设置元空间初始⼤⼩，触及MetaspaceSize，触发FullGC \n• 【-XX:MaxMetaspaceSize】设置元空间最⼤⼤⼩，默认-1，代表没有限制，当没有本地内存可 ⽤，直接OOM\n\n\nGC的关注区域为：方法区和堆\n两种常见问题：\n1.内存泄露（Memory Leak），业务对象不需要了，但是回收不掉\n2.内存溢出（OutOfMemory），没有空闲内存了，超出内存上限。\n\nGC的评估指标：\n如果是高吞吐量的系统，单位时间内stw时间总和更小\n如果是注重低延时的系统，单次stw时间比较小\n\nJVM垃圾回收算法：\n1. 标记-清除\n分为两个阶段，标记阶段，标记要回收的对象，清除阶段，将标记为确认不可用的对象清除。\n缺点：标记和清除的效率都不高并且会产生大量的碎片而导致频繁的回收\n2. 标记-复制\n先将内存分为大小相等的两块，每次用其中一块，当开始垃圾回收，把存活的对象复制到另一块，然后把这块内存清理。\n缺点：需要浪费额外的内存作为复制区；当存活率高时，复制算法效率降低。\n3. 标记-整理\n把存活的对象往内存的一段移动，然后直接回收边界以外的内存\n缺点：移动过程效率较低。\n\n并发与并行\n并发：CPU不断地上下文切换，执行多个任务，每个时间点上只有一个任务在执行。\n并行：在多核的场景下，每个核都执行，同时进行。\n\n独占与非独占式垃圾回收的区别：在垃圾回收的时候垃圾回收线程是否同应用线程并行执行。\n\n![[/img/Pasted image 20230328204702.png]]\n\n新生代的垃圾收集器：Serial GC、Parallel Scavenge GC、ParNew GC\n老年代垃圾收集器：Serial Old GC、Parallel Old GC、CMS GC\n整堆垃圾收集器：G1\n\nGC的两个难点：\n1.对象漏标问题，这就涉及到3色标记法，用于区分哪些对象是要回收的，哪些对象是不要回收的。\n白色：未被标记的对象\n灰色：自身被标记，成员变量未被标记\n黑色：自身和成员变量均已标记完成。\n\n漏标的解决方案：\nCMS解决方案：增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性。\nG1解决方案：关注引用的删除，当B->D消失，要把这个引用推到GC的堆栈，保证D还能被GC扫描到。\n\n2.跨代引用问题\n问题点：为了找到年轻代的存活对象，不得不遍历整个老年代；反之亦然。这种方案存在极大的性能浪费，因为跨代引用是极少的。\n\n解决方案：空间换时间。\nCMS：CardTable\nG1：RememberSet + CardTable\n\n以G1为例，在每个region中都记录了RememberSet。\n\n\n**CMS和G1的区别**：\n\nCMS：并行和并发的非独占非压缩垃圾回收器。作用于老年代，使用标记整理算法，低延时\nG1：并行和并发的非独占压缩垃圾回收期，作用于全堆，使用标记复制算法，低延时；有两种gc方式\nYoung GC：收集全部的Young区（Eden/Survivor）的垃圾；\nMix GC：收集全部的Young区 及部分老年代的垃圾。\n\n\n\n\n那我们再来解析下gc的日志：\n\n```log\n{Heap before GC invocations=2115 (full 0):\n garbage-first heap   total 5570560K, used 4977455K [0x000000066c000000, 0x000000066c205500, 0x00000007c0000000)\n  region size 2048K, 81 young (165888K), 0 survivors (0K)\n Metaspace       used 215126K, capacity 233170K, committed 234112K, reserved 1257472K\n  class space    used 23373K, capacity 26311K, committed 26496K, reserved 1048576K\n2023-03-21T04:52:53.936+0800: 65884.570: [GC pause (G1 Humongous Allocation) (mixed)\nDesired survivor size 17825792 bytes, new threshold 15 (max 15)\n (to-space exhausted), 0.0684663 secs]\n   [Parallel Time: 48.8 ms, GC Workers: 4]\n      [GC Worker Start (ms): Min: 65884572.2, Avg: 65884572.3, Max: 65884572.3, Diff: 0.1]\n      [Ext Root Scanning (ms): Min: 10.2, Avg: 11.7, Max: 14.5, Diff: 4.3, Sum: 47.0]\n      [Update RS (ms): Min: 20.0, Avg: 21.5, Max: 22.0, Diff: 2.1, Sum: 85.9]\n         [Processed Buffers: Min: 266, Avg: 278.2, Max: 287, Diff: 21, Sum: 1113]\n      [Scan RS (ms): Min: 0.8, Avg: 0.9, Max: 1.0, Diff: 0.2, Sum: 3.7]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Object Copy (ms): Min: 13.5, Avg: 14.5, Max: 15.6, Diff: 2.1, Sum: 58.1]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [GC Worker Total (ms): Min: 48.7, Avg: 48.7, Max: 48.8, Diff: 0.1, Sum: 194.8]\n      [GC Worker End (ms): Min: 65884621.0, Avg: 65884621.0, Max: 65884621.0, Diff: 0.0]\n   [Code Root Fixup: 0.4 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.8 ms]\n   [Other: 18.5 ms]\n      [Evacuation Failure: 9.6 ms]\n      [Choose CSet: 0.2 ms]\n      [Ref Proc: 0.6 ms]\n      [Ref Enq: 0.1 ms]\n      [Redirty Cards: 0.1 ms]\n      [Humongous Reclaim: 4.7 ms]\n      [Free CSet: 0.7 ms]\n   [Eden: 162.0M(272.0M)->0.0B(270.0M) Survivors: 0.0B->2048.0K Heap: 4861.4M(5440.0M)->3643.8M(5440.0M)]\nHeap after GC invocations=2116 (full 0):\n garbage-first heap   total 5570560K, used 3731299K [0x000000066c000000, 0x000000066c205500, 0x00000007c0000000)\n  region size 2048K, 1 young (2048K), 1 survivors (2048K)\n Metaspace       used 215126K, capacity 233170K, committed 234112K, reserved 1257472K\n  class space    used 23373K, capacity 26311K, committed 26496K, reserved 1048576K\n}\n [Times: user=0.20 sys=0.01, real=0.07 secs] \n```\n\n","source":"_posts/Java基础.md","raw":"---\ntitle: JVM基础\ndate: 2023-03-28 09:40:14\ntags:\n  - JVM\n  - java\n  - 集合\n---\n\nJava基础问题\n\n\n\n\n![[/img/Pasted image 20230328094117.png]]先了解个背景：\n\njdk6：常量池在方法区中，方法区在堆中\n\njdk7：常量池在堆中，方法区在堆中\n\njdk8：常量池在堆中，元空间（由jdk7的方法区改名而来）在堆外\n\nString类型的常量池比较特殊。它的主要使用方法有两种：\n\n-   **直接使用双引号声明出来的String对象会直接存储在常量池中。**\n-   **如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中**\n\n栈：\n  ![[/img/Pasted image 20230328203228.png]]\n\n场景1：代码执行环境>=jdk7\n\n```java\npublic static void main(String[] args) {\n        String s = new String(\"1\"); //这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。\n        s.intern();//这一行相当于没有起作用，因为\"1\"已经在常量池中了。\n        String s2 = \"1\"; // \"在编译期就能发现的常量，会存储在常量池中。\n        System.out.println(s == s2); //所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池\n        //结果为false\n\n\n        String s3 = new String(\"1\") + new String(\"1\"); //创建了几个对象？ 4个对象。 我们这里要搞清楚s3到底指向了哪里？指向了堆，因为它的结果是通过new 构造出来的。\n        s3.intern(); // s3在常量池中创建。\n        String s4 = \"11\"; // s4 指向常量池中11\n        System.out.println(s3 == s4); //结果为true，因为s3和s4 都是指向常量池的指针。\n    }\n```\n\n下面开始进阶一点：如果将`s3.intern()`往下移一行呢? 代码执行环境>=jdk7\n\n```java\npublic static void main(String[] args) {\n        String s = new String(\"1\"); //这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。\n        s.intern();//这一行相当于没有起作用，因为\"1\"已经在常量池中了。\n        String s2 = \"1\"; // \"在编译期就能发现的常量，会存储在常量池中。\n        System.out.println(s == s2); //所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池\n        //结果为false\n\n\n        String s3 = new String(\"1\") + new String(\"1\"); //创建了几个对象？ 2 个 + 1 = 3个对象。 4个对象。\n//        s3.intern(); // 由于s3就是在常量池中的，所以执行此方法，我理解也意义不大。\n        String s4 = \"11\"; // s4 指向常量池中11\n        s3.intern(); //由于此时常量池中已经存在\"11\"的常量了，所以s3直接返回对象的指针。\n        System.out.println(s3 == s4); //结果为false，因为s4 指向常量池,s3指向堆。\n    }\n```\n\n  \n\n如果是jdk6的环境呢？\n\n```java\npublic static void jdk6() {\n\n        String s = new String(\"1\");\n        s.intern();\n        String s2 = \"1\";\n        System.out.println(s == s2); //false\n\n\n        String s3 = new String(\"1\") + new String(\"1\"); //s3 指向的是堆中的地址\n        s3.intern(); // jdk6同7不同的是，JDK6中，intern()方法会把首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里面这个字符串实例的引用。可以理解为只复制内容到常量池，不改栈指向堆的指针。\n        String s4 = \"11\"; // s4 指向常量池中11\n        System.out.println(s3 == s4); //结果为false，因为s4 指向常量池,s3指向堆。\n    }\n```\n\n  \n  \n\nJava堆：是线程共享的一块区域，此区域的唯一目的是为了存储对象实例，几乎所有的对象实例都在这里创建（有例外：栈上分配，TLAB）\n\n堆内容的划分：新生代；老年代；永久代（元空间）\n\n新生代又分为 eden区，s0、s1区。\n\n  \n\n常见概念：\n新生代垃圾回收：Minor GC / Young GC\n老年代回收：Major GC\n整堆垃圾回收：Full GC，收集整个堆和方法区\n混合收集（Mix）：Mix GC，G1中的概念，收集整个新生代和部分老年代。\n\n对象的分配过程：\n1. 判断对象是否有逃逸，如果对象没有逃逸，那么就没有必要分配在堆上；\n需要通过jvm参数控制开启逃逸分析**(-XX: +DoEscapeAnalysis)**；开启标量替换**(-XX: +EliminateAllocaCons)**\n分析对象的作用域，可能被其他方法引用到叫做方法逃逸；可能被其他线程使用叫做线程逃逸\n即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。\n先看一下锁消除：如果即时编译器能够判断锁对象不逃逸，那么对该对象的加锁、解锁操作都没有任何意义。\n其次在看下什么是栈上分配：由于直接在栈上初始化对象，并通过弹出栈帧来自动回收对象空间，这样就无需借助堆内存的垃圾回收\n不过HotSpot并没有采用栈上分配的方式，原因是有很多逻辑使用了\"对象只能堆分配\"，所以其使用了**标量替换**的技术，简单来说就是判断未逃逸的对象中有哪些属性使用，将这个对象替换为对象中的成员变量，直接在栈上初始化这些成员变量，这个同栈上分配一样，也无需借助堆内存的垃圾回收。\n2. 在判断完如果无需栈上分配之后，需要判断是否开启**TLAB**，如果开启，那么需要进行TLAB的判断。（[[https://www.bilibili.com/read/cv10375688 | TLAB全解 ]]）\n\tTLAB是什么？是线程本地分配缓存区，是线程私有的，线程初始化的时候会创建TLAB。TLAB占据的是Eden区中的一块空间，通常占据1%，为线程划分独立的对象分配空间。\n\t\n\t为什么要有TLAB？是怎么使用的？\n\tTLAB的出现的目的是避免堆上直接分配内存从而避免频繁的锁竞争。\n\t在检查如果开启了TLAB时，如果开启了，那么判断此线程剩余的TLAB大小时候满足于分配此对象，如果不满足，再判断TLAB的剩余空间是否小于最大浪费空间限制（动态值），如果是，则从Eden区中重新申请一个TLAB空间；否则直接在TLAB外分配。发生GC时，TLAB会被回收。\n\t-XX:UseTLAB 开启TLAB 默认开启\n\t![[/img/Pasted image 20230328102127.png]]\n\t\n\tTLAB有什么缺点，怎么解决？\n\tTLAB引入后，由于存在TLAB停止的场景，也就是在TLAB的剩余空间小于最大浪费空间限制值下，需要重新申请一个TLAB，那么此时的剩余空间就是一个间隙。或者是GC时，还有TLAB的剩余空间。如果不管这些空间那么GC的时候这些空间就需要额外的检查，影响GC的扫描效率。\n所以如果是我们自己设计一个TLAB的空间，\n1）不能设置这个空间太大或者太小，太小会造成多频次的重新申请TLAB空间，太大会造成空间浪费；\n2）每次申请空间大小最好不要固定，而是动态的。\n3）由于TLAB是由线程创建的，所以需要关注当前gc轮次内的会分配对象的线程数量\n4）也需要关注每个线程会创建对象的数量及所需的空间，即申请TLAB次数。\n综上，实际是缺失一个历史期望值的概念。TLAB中经常使用的是EMA（指数平均数）算法\n新的期望大小 = 堆给TLAB的空间总大小 * 当前分配比例 EMA / 重填次数配置 \n\n\n\n我们在了解了这些之后，再来回顾下堆、栈、方法区的关系。\n```java\nHelloWorld instance = new HelloWorld();\n```\n这行代码中Instance在栈中的局部变量表中，指向java的堆，java的堆中有对象实例数据，在对象头中有关于此对象的类型信息， 指向方法区。\n\n\n常见的JVM命令\n**Java栈：** **•** -Xss：设置线程最⼤栈空间。 \n**Java堆：**\n• 【-Xmx】设置堆空间最⼤⼤⼩（新⽣代 + ⽼年代） \n• 【-Xms】设置堆空间初始⼤⼩（新⽣代 + ⽼年代） \n• 【-XX:NewRa6o】设置⽼年代/新⽣代⼤⼩⽐例。\n• 【-XX:SurvivorRadio】设置Eden区和S0和S1区⼤⼩⽐例。设置成8，代表Eden:S0:S1=8:1:1 \n• 【-XX:UseTLAB】开启tlab空间 \n• 【-XX:TLABWasteTargetPercent】设置TLAB占Eden区空间百分⽐ \n• 【-XX:handlePromo6onFailure】是否设置空间分配担保 \n• 【-XX:MaxTenuringThreshold】设置默认的晋升年龄 \n**PermGen：**\n• 【-XX:PermSize】设置永久代初始⼤⼩\n• 【-XX:MaxPermSize】设置永久代最⼤可分配空间 \n**MetaSpace：** \n• 【-XX:MetaspaceSize】设置元空间初始⼤⼩，触及MetaspaceSize，触发FullGC \n• 【-XX:MaxMetaspaceSize】设置元空间最⼤⼤⼩，默认-1，代表没有限制，当没有本地内存可 ⽤，直接OOM\n\n\nGC的关注区域为：方法区和堆\n两种常见问题：\n1.内存泄露（Memory Leak），业务对象不需要了，但是回收不掉\n2.内存溢出（OutOfMemory），没有空闲内存了，超出内存上限。\n\nGC的评估指标：\n如果是高吞吐量的系统，单位时间内stw时间总和更小\n如果是注重低延时的系统，单次stw时间比较小\n\nJVM垃圾回收算法：\n1. 标记-清除\n分为两个阶段，标记阶段，标记要回收的对象，清除阶段，将标记为确认不可用的对象清除。\n缺点：标记和清除的效率都不高并且会产生大量的碎片而导致频繁的回收\n2. 标记-复制\n先将内存分为大小相等的两块，每次用其中一块，当开始垃圾回收，把存活的对象复制到另一块，然后把这块内存清理。\n缺点：需要浪费额外的内存作为复制区；当存活率高时，复制算法效率降低。\n3. 标记-整理\n把存活的对象往内存的一段移动，然后直接回收边界以外的内存\n缺点：移动过程效率较低。\n\n并发与并行\n并发：CPU不断地上下文切换，执行多个任务，每个时间点上只有一个任务在执行。\n并行：在多核的场景下，每个核都执行，同时进行。\n\n独占与非独占式垃圾回收的区别：在垃圾回收的时候垃圾回收线程是否同应用线程并行执行。\n\n![[/img/Pasted image 20230328204702.png]]\n\n新生代的垃圾收集器：Serial GC、Parallel Scavenge GC、ParNew GC\n老年代垃圾收集器：Serial Old GC、Parallel Old GC、CMS GC\n整堆垃圾收集器：G1\n\nGC的两个难点：\n1.对象漏标问题，这就涉及到3色标记法，用于区分哪些对象是要回收的，哪些对象是不要回收的。\n白色：未被标记的对象\n灰色：自身被标记，成员变量未被标记\n黑色：自身和成员变量均已标记完成。\n\n漏标的解决方案：\nCMS解决方案：增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性。\nG1解决方案：关注引用的删除，当B->D消失，要把这个引用推到GC的堆栈，保证D还能被GC扫描到。\n\n2.跨代引用问题\n问题点：为了找到年轻代的存活对象，不得不遍历整个老年代；反之亦然。这种方案存在极大的性能浪费，因为跨代引用是极少的。\n\n解决方案：空间换时间。\nCMS：CardTable\nG1：RememberSet + CardTable\n\n以G1为例，在每个region中都记录了RememberSet。\n\n\n**CMS和G1的区别**：\n\nCMS：并行和并发的非独占非压缩垃圾回收器。作用于老年代，使用标记整理算法，低延时\nG1：并行和并发的非独占压缩垃圾回收期，作用于全堆，使用标记复制算法，低延时；有两种gc方式\nYoung GC：收集全部的Young区（Eden/Survivor）的垃圾；\nMix GC：收集全部的Young区 及部分老年代的垃圾。\n\n\n\n\n那我们再来解析下gc的日志：\n\n```log\n{Heap before GC invocations=2115 (full 0):\n garbage-first heap   total 5570560K, used 4977455K [0x000000066c000000, 0x000000066c205500, 0x00000007c0000000)\n  region size 2048K, 81 young (165888K), 0 survivors (0K)\n Metaspace       used 215126K, capacity 233170K, committed 234112K, reserved 1257472K\n  class space    used 23373K, capacity 26311K, committed 26496K, reserved 1048576K\n2023-03-21T04:52:53.936+0800: 65884.570: [GC pause (G1 Humongous Allocation) (mixed)\nDesired survivor size 17825792 bytes, new threshold 15 (max 15)\n (to-space exhausted), 0.0684663 secs]\n   [Parallel Time: 48.8 ms, GC Workers: 4]\n      [GC Worker Start (ms): Min: 65884572.2, Avg: 65884572.3, Max: 65884572.3, Diff: 0.1]\n      [Ext Root Scanning (ms): Min: 10.2, Avg: 11.7, Max: 14.5, Diff: 4.3, Sum: 47.0]\n      [Update RS (ms): Min: 20.0, Avg: 21.5, Max: 22.0, Diff: 2.1, Sum: 85.9]\n         [Processed Buffers: Min: 266, Avg: 278.2, Max: 287, Diff: 21, Sum: 1113]\n      [Scan RS (ms): Min: 0.8, Avg: 0.9, Max: 1.0, Diff: 0.2, Sum: 3.7]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [Object Copy (ms): Min: 13.5, Avg: 14.5, Max: 15.6, Diff: 2.1, Sum: 58.1]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [GC Worker Total (ms): Min: 48.7, Avg: 48.7, Max: 48.8, Diff: 0.1, Sum: 194.8]\n      [GC Worker End (ms): Min: 65884621.0, Avg: 65884621.0, Max: 65884621.0, Diff: 0.0]\n   [Code Root Fixup: 0.4 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.8 ms]\n   [Other: 18.5 ms]\n      [Evacuation Failure: 9.6 ms]\n      [Choose CSet: 0.2 ms]\n      [Ref Proc: 0.6 ms]\n      [Ref Enq: 0.1 ms]\n      [Redirty Cards: 0.1 ms]\n      [Humongous Reclaim: 4.7 ms]\n      [Free CSet: 0.7 ms]\n   [Eden: 162.0M(272.0M)->0.0B(270.0M) Survivors: 0.0B->2048.0K Heap: 4861.4M(5440.0M)->3643.8M(5440.0M)]\nHeap after GC invocations=2116 (full 0):\n garbage-first heap   total 5570560K, used 3731299K [0x000000066c000000, 0x000000066c205500, 0x00000007c0000000)\n  region size 2048K, 1 young (2048K), 1 survivors (2048K)\n Metaspace       used 215126K, capacity 233170K, committed 234112K, reserved 1257472K\n  class space    used 23373K, capacity 26311K, committed 26496K, reserved 1048576K\n}\n [Times: user=0.20 sys=0.01, real=0.07 secs] \n```\n\n","slug":"Java基础","published":1,"updated":"2024-07-20T15:41:42.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz7620250008tp4l7q5v4kua","content":"<p>Java基础问题</p>\n<p>![[&#x2F;img&#x2F;Pasted image 20230328094117.png]]先了解个背景：</p>\n<p>jdk6：常量池在方法区中，方法区在堆中</p>\n<p>jdk7：常量池在堆中，方法区在堆中</p>\n<p>jdk8：常量池在堆中，元空间（由jdk7的方法区改名而来）在堆外</p>\n<p>String类型的常量池比较特殊。它的主要使用方法有两种：</p>\n<ul>\n<li><strong>直接使用双引号声明出来的String对象会直接存储在常量池中。</strong></li>\n<li><strong>如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中</strong></li>\n</ul>\n<p>栈：<br>  ![[&#x2F;img&#x2F;Pasted image 20230328203228.png]]</p>\n<p>场景1：代码执行环境&gt;&#x3D;jdk7</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这一行相当于没有起作用，因为\"1\"已经在常量池中了。</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"在编译期就能发现的常量，会存储在常量池中。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池</span>\n        <span class=\"token comment\">//结果为false</span>\n\n\n        <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建了几个对象？ 4个对象。 我们这里要搞清楚s3到底指向了哪里？指向了堆，因为它的结果是通过new 构造出来的。</span>\n        s3<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s3在常量池中创建。</span>\n        <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s4 指向常量池中11</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为true，因为s3和s4 都是指向常量池的指针。</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面开始进阶一点：如果将<code>s3.intern()</code>往下移一行呢? 代码执行环境&gt;&#x3D;jdk7</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这一行相当于没有起作用，因为\"1\"已经在常量池中了。</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"在编译期就能发现的常量，会存储在常量池中。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池</span>\n        <span class=\"token comment\">//结果为false</span>\n\n\n        <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建了几个对象？ 2 个 + 1 = 3个对象。 4个对象。</span>\n<span class=\"token comment\">//        s3.intern(); // 由于s3就是在常量池中的，所以执行此方法，我理解也意义不大。</span>\n        <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s4 指向常量池中11</span>\n        s3<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//由于此时常量池中已经存在\"11\"的常量了，所以s3直接返回对象的指针。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为false，因为s4 指向常量池,s3指向堆。</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果是jdk6的环境呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">jdk6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n\n\n        <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s3 指向的是堆中的地址</span>\n        s3<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// jdk6同7不同的是，JDK6中，intern()方法会把首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里面这个字符串实例的引用。可以理解为只复制内容到常量池，不改栈指向堆的指针。</span>\n        <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s4 指向常量池中11</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为false，因为s4 指向常量池,s3指向堆。</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Java堆：是线程共享的一块区域，此区域的唯一目的是为了存储对象实例，几乎所有的对象实例都在这里创建（有例外：栈上分配，TLAB）</p>\n<p>堆内容的划分：新生代；老年代；永久代（元空间）</p>\n<p>新生代又分为 eden区，s0、s1区。</p>\n<p>常见概念：<br>新生代垃圾回收：Minor GC &#x2F; Young GC<br>老年代回收：Major GC<br>整堆垃圾回收：Full GC，收集整个堆和方法区<br>混合收集（Mix）：Mix GC，G1中的概念，收集整个新生代和部分老年代。</p>\n<p>对象的分配过程：</p>\n<ol>\n<li><p>判断对象是否有逃逸，如果对象没有逃逸，那么就没有必要分配在堆上；<br>需要通过jvm参数控制开启逃逸分析**(-XX: +DoEscapeAnalysis)<strong>；开启标量替换</strong>(-XX: +EliminateAllocaCons)**<br>分析对象的作用域，可能被其他方法引用到叫做方法逃逸；可能被其他线程使用叫做线程逃逸<br>即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。<br>先看一下锁消除：如果即时编译器能够判断锁对象不逃逸，那么对该对象的加锁、解锁操作都没有任何意义。<br>其次在看下什么是栈上分配：由于直接在栈上初始化对象，并通过弹出栈帧来自动回收对象空间，这样就无需借助堆内存的垃圾回收<br>不过HotSpot并没有采用栈上分配的方式，原因是有很多逻辑使用了”对象只能堆分配”，所以其使用了<strong>标量替换</strong>的技术，简单来说就是判断未逃逸的对象中有哪些属性使用，将这个对象替换为对象中的成员变量，直接在栈上初始化这些成员变量，这个同栈上分配一样，也无需借助堆内存的垃圾回收。</p>\n</li>\n<li><p>在判断完如果无需栈上分配之后，需要判断是否开启<strong>TLAB</strong>，如果开启，那么需要进行TLAB的判断。（[[<a href=\"https://www.bilibili.com/read/cv10375688\">https://www.bilibili.com/read/cv10375688</a> | TLAB全解 ]]）<br> TLAB是什么？是线程本地分配缓存区，是线程私有的，线程初始化的时候会创建TLAB。TLAB占据的是Eden区中的一块空间，通常占据1%，为线程划分独立的对象分配空间。</p>\n<p> 为什么要有TLAB？是怎么使用的？<br> TLAB的出现的目的是避免堆上直接分配内存从而避免频繁的锁竞争。<br> 在检查如果开启了TLAB时，如果开启了，那么判断此线程剩余的TLAB大小时候满足于分配此对象，如果不满足，再判断TLAB的剩余空间是否小于最大浪费空间限制（动态值），如果是，则从Eden区中重新申请一个TLAB空间；否则直接在TLAB外分配。发生GC时，TLAB会被回收。<br> -XX:UseTLAB 开启TLAB 默认开启<br> ![[&#x2F;img&#x2F;Pasted image 20230328102127.png]]</p>\n<p> TLAB有什么缺点，怎么解决？<br> TLAB引入后，由于存在TLAB停止的场景，也就是在TLAB的剩余空间小于最大浪费空间限制值下，需要重新申请一个TLAB，那么此时的剩余空间就是一个间隙。或者是GC时，还有TLAB的剩余空间。如果不管这些空间那么GC的时候这些空间就需要额外的检查，影响GC的扫描效率。</p>\n</li>\n</ol>\n<p>所以如果是我们自己设计一个TLAB的空间，<br>1）不能设置这个空间太大或者太小，太小会造成多频次的重新申请TLAB空间，太大会造成空间浪费；<br>2）每次申请空间大小最好不要固定，而是动态的。<br>3）由于TLAB是由线程创建的，所以需要关注当前gc轮次内的会分配对象的线程数量<br>4）也需要关注每个线程会创建对象的数量及所需的空间，即申请TLAB次数。<br>综上，实际是缺失一个历史期望值的概念。TLAB中经常使用的是EMA（指数平均数）算法<br>新的期望大小 &#x3D; 堆给TLAB的空间总大小 * 当前分配比例 EMA &#x2F; 重填次数配置 </p>\n<p>我们在了解了这些之后，再来回顾下堆、栈、方法区的关系。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HelloWorld</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这行代码中Instance在栈中的局部变量表中，指向java的堆，java的堆中有对象实例数据，在对象头中有关于此对象的类型信息， 指向方法区。</p>\n<p>常见的JVM命令<br><strong>Java栈：</strong> <strong>•</strong> -Xss：设置线程最⼤栈空间。<br><strong>Java堆：</strong><br>• 【-Xmx】设置堆空间最⼤⼤⼩（新⽣代 + ⽼年代）<br>• 【-Xms】设置堆空间初始⼤⼩（新⽣代 + ⽼年代）<br>• 【-XX:NewRa6o】设置⽼年代&#x2F;新⽣代⼤⼩⽐例。<br>• 【-XX:SurvivorRadio】设置Eden区和S0和S1区⼤⼩⽐例。设置成8，代表Eden:S0:S1&#x3D;8:1:1<br>• 【-XX:UseTLAB】开启tlab空间<br>• 【-XX:TLABWasteTargetPercent】设置TLAB占Eden区空间百分⽐<br>• 【-XX:handlePromo6onFailure】是否设置空间分配担保<br>• 【-XX:MaxTenuringThreshold】设置默认的晋升年龄<br><strong>PermGen：</strong><br>• 【-XX:PermSize】设置永久代初始⼤⼩<br>• 【-XX:MaxPermSize】设置永久代最⼤可分配空间<br><strong>MetaSpace：</strong><br>• 【-XX:MetaspaceSize】设置元空间初始⼤⼩，触及MetaspaceSize，触发FullGC<br>• 【-XX:MaxMetaspaceSize】设置元空间最⼤⼤⼩，默认-1，代表没有限制，当没有本地内存可 ⽤，直接OOM</p>\n<p>GC的关注区域为：方法区和堆<br>两种常见问题：<br>1.内存泄露（Memory Leak），业务对象不需要了，但是回收不掉<br>2.内存溢出（OutOfMemory），没有空闲内存了，超出内存上限。</p>\n<p>GC的评估指标：<br>如果是高吞吐量的系统，单位时间内stw时间总和更小<br>如果是注重低延时的系统，单次stw时间比较小</p>\n<p>JVM垃圾回收算法：</p>\n<ol>\n<li>标记-清除<br>分为两个阶段，标记阶段，标记要回收的对象，清除阶段，将标记为确认不可用的对象清除。<br>缺点：标记和清除的效率都不高并且会产生大量的碎片而导致频繁的回收</li>\n<li>标记-复制<br>先将内存分为大小相等的两块，每次用其中一块，当开始垃圾回收，把存活的对象复制到另一块，然后把这块内存清理。<br>缺点：需要浪费额外的内存作为复制区；当存活率高时，复制算法效率降低。</li>\n<li>标记-整理<br>把存活的对象往内存的一段移动，然后直接回收边界以外的内存<br>缺点：移动过程效率较低。</li>\n</ol>\n<p>并发与并行<br>并发：CPU不断地上下文切换，执行多个任务，每个时间点上只有一个任务在执行。<br>并行：在多核的场景下，每个核都执行，同时进行。</p>\n<p>独占与非独占式垃圾回收的区别：在垃圾回收的时候垃圾回收线程是否同应用线程并行执行。</p>\n<p>![[&#x2F;img&#x2F;Pasted image 20230328204702.png]]</p>\n<p>新生代的垃圾收集器：Serial GC、Parallel Scavenge GC、ParNew GC<br>老年代垃圾收集器：Serial Old GC、Parallel Old GC、CMS GC<br>整堆垃圾收集器：G1</p>\n<p>GC的两个难点：<br>1.对象漏标问题，这就涉及到3色标记法，用于区分哪些对象是要回收的，哪些对象是不要回收的。<br>白色：未被标记的对象<br>灰色：自身被标记，成员变量未被标记<br>黑色：自身和成员变量均已标记完成。</p>\n<p>漏标的解决方案：<br>CMS解决方案：增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性。<br>G1解决方案：关注引用的删除，当B-&gt;D消失，要把这个引用推到GC的堆栈，保证D还能被GC扫描到。</p>\n<p>2.跨代引用问题<br>问题点：为了找到年轻代的存活对象，不得不遍历整个老年代；反之亦然。这种方案存在极大的性能浪费，因为跨代引用是极少的。</p>\n<p>解决方案：空间换时间。<br>CMS：CardTable<br>G1：RememberSet + CardTable</p>\n<p>以G1为例，在每个region中都记录了RememberSet。</p>\n<p><strong>CMS和G1的区别</strong>：</p>\n<p>CMS：并行和并发的非独占非压缩垃圾回收器。作用于老年代，使用标记整理算法，低延时<br>G1：并行和并发的非独占压缩垃圾回收期，作用于全堆，使用标记复制算法，低延时；有两种gc方式<br>Young GC：收集全部的Young区（Eden&#x2F;Survivor）的垃圾；<br>Mix GC：收集全部的Young区 及部分老年代的垃圾。</p>\n<p>那我们再来解析下gc的日志：</p>\n<pre class=\"line-numbers language-log\" data-language=\"log\"><code class=\"language-log\"><span class=\"token operator\">&#123;</span>Heap before GC invocations<span class=\"token operator\">=</span><span class=\"token number\">2115</span> <span class=\"token operator\">(</span>full <span class=\"token number\">0</span><span class=\"token operator\">)</span><span class=\"token operator\">:</span>\n garbage<span class=\"token operator\">-</span>first heap   total <span class=\"token number\">5570560K</span><span class=\"token punctuation\">,</span> used <span class=\"token number\">4977455K</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x000000066c000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000066c205500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00000007c0000000</span><span class=\"token operator\">)</span>\n  region size <span class=\"token number\">2048K</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span> young <span class=\"token operator\">(</span><span class=\"token number\">165888K</span><span class=\"token operator\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> survivors <span class=\"token operator\">(</span><span class=\"token number\">0K</span><span class=\"token operator\">)</span>\n Metaspace       used <span class=\"token number\">215126K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">233170K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">234112K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1257472K</span>\n  class space    used <span class=\"token number\">23373K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">26311K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">26496K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1048576K</span>\n<span class=\"token date number\">2023-03-21T</span><span class=\"token time number\">04:52:53.936+0800</span><span class=\"token operator\">:</span> <span class=\"token number\">65884.570</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>GC pause <span class=\"token operator\">(</span>G1 Humongous Allocation<span class=\"token operator\">)</span> <span class=\"token operator\">(</span>mixed<span class=\"token operator\">)</span>\nDesired survivor size <span class=\"token number\">17825792</span> bytes<span class=\"token punctuation\">,</span> new threshold <span class=\"token number\">15</span> <span class=\"token operator\">(</span>max <span class=\"token number\">15</span><span class=\"token operator\">)</span>\n <span class=\"token operator\">(</span>to<span class=\"token operator\">-</span>space exhausted<span class=\"token operator\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0684663</span> secs<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Parallel Time<span class=\"token operator\">:</span> <span class=\"token number\">48.8</span> ms<span class=\"token punctuation\">,</span> GC Workers<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker Start <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">65884572.2</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">65884572.3</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">65884572.3</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Ext Root Scanning <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">10.2</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">11.7</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">14.5</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">4.3</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">47.0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Update RS <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">21.5</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">22.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">85.9</span><span class=\"token punctuation\">]</span>\n         <span class=\"token punctuation\">[</span>Processed Buffers<span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">266</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">278.2</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">287</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">1113</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Scan RS <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">3.7</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Code Root Scanning <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Object Copy <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">13.5</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">14.5</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">15.6</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">58.1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Termination <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker Other <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker Total <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">48.7</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">48.7</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">48.8</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">194.8</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker End <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">65884621.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">65884621.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">65884621.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Code Root Fixup<span class=\"token operator\">:</span> <span class=\"token number\">0.4</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Code Root Purge<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Clear CT<span class=\"token operator\">:</span> <span class=\"token number\">0.8</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Other<span class=\"token operator\">:</span> <span class=\"token number\">18.5</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Evacuation Failure<span class=\"token operator\">:</span> <span class=\"token number\">9.6</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Choose CSet<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Ref Proc<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Ref Enq<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Redirty Cards<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Humongous Reclaim<span class=\"token operator\">:</span> <span class=\"token number\">4.7</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Free CSet<span class=\"token operator\">:</span> <span class=\"token number\">0.7</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Eden<span class=\"token operator\">:</span> <span class=\"token number\">162.0M</span><span class=\"token operator\">(</span><span class=\"token number\">272.0M</span><span class=\"token operator\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">0.0B</span><span class=\"token operator\">(</span><span class=\"token number\">270.0M</span><span class=\"token operator\">)</span> Survivors<span class=\"token operator\">:</span> <span class=\"token number\">0.0B</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">2048.0K</span> Heap<span class=\"token operator\">:</span> <span class=\"token number\">4861.4M</span><span class=\"token operator\">(</span><span class=\"token number\">5440.0M</span><span class=\"token operator\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">3643.8M</span><span class=\"token operator\">(</span><span class=\"token number\">5440.0M</span><span class=\"token operator\">)</span><span class=\"token punctuation\">]</span>\nHeap after GC invocations<span class=\"token operator\">=</span><span class=\"token number\">2116</span> <span class=\"token operator\">(</span>full <span class=\"token number\">0</span><span class=\"token operator\">)</span><span class=\"token operator\">:</span>\n garbage<span class=\"token operator\">-</span>first heap   total <span class=\"token number\">5570560K</span><span class=\"token punctuation\">,</span> used <span class=\"token number\">3731299K</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x000000066c000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000066c205500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00000007c0000000</span><span class=\"token operator\">)</span>\n  region size <span class=\"token number\">2048K</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> young <span class=\"token operator\">(</span><span class=\"token number\">2048K</span><span class=\"token operator\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> survivors <span class=\"token operator\">(</span><span class=\"token number\">2048K</span><span class=\"token operator\">)</span>\n Metaspace       used <span class=\"token number\">215126K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">233170K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">234112K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1257472K</span>\n  class space    used <span class=\"token number\">23373K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">26311K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">26496K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1048576K</span>\n<span class=\"token operator\">&#125;</span>\n <span class=\"token punctuation\">[</span>Times<span class=\"token operator\">:</span> user<span class=\"token operator\">=</span><span class=\"token number\">0.20</span> sys<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> real<span class=\"token operator\">=</span><span class=\"token number\">0.07</span> secs<span class=\"token punctuation\">]</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>Java基础问题</p>\n<p>![[&#x2F;img&#x2F;Pasted image 20230328094117.png]]先了解个背景：</p>\n<p>jdk6：常量池在方法区中，方法区在堆中</p>\n<p>jdk7：常量池在堆中，方法区在堆中</p>\n<p>jdk8：常量池在堆中，元空间（由jdk7的方法区改名而来）在堆外</p>\n<p>String类型的常量池比较特殊。它的主要使用方法有两种：</p>\n<ul>\n<li><strong>直接使用双引号声明出来的String对象会直接存储在常量池中。</strong></li>\n<li><strong>如果不是用双引号声明的String对象，可以使用String提供的intern方法。intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中</strong></li>\n</ul>\n<p>栈：<br>  ![[&#x2F;img&#x2F;Pasted image 20230328203228.png]]</p>\n<p>场景1：代码执行环境&gt;&#x3D;jdk7</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这一行相当于没有起作用，因为\"1\"已经在常量池中了。</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"在编译期就能发现的常量，会存储在常量池中。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池</span>\n        <span class=\"token comment\">//结果为false</span>\n\n\n        <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建了几个对象？ 4个对象。 我们这里要搞清楚s3到底指向了哪里？指向了堆，因为它的结果是通过new 构造出来的。</span>\n        s3<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s3在常量池中创建。</span>\n        <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s4 指向常量池中11</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为true，因为s3和s4 都是指向常量池的指针。</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面开始进阶一点：如果将<code>s3.intern()</code>往下移一行呢? 代码执行环境&gt;&#x3D;jdk7</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这行会创建两次对象，第一次为在常量池中初始化这个常量。第二个是在堆中初始化s的对象实体，同时指向常量池中的常量。</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这一行相当于没有起作用，因为\"1\"已经在常量池中了。</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"在编译期就能发现的常量，会存储在常量池中。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//所以，这里会返回false,因为s指向堆中的对象，而s2指向的是常量池</span>\n        <span class=\"token comment\">//结果为false</span>\n\n\n        <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建了几个对象？ 2 个 + 1 = 3个对象。 4个对象。</span>\n<span class=\"token comment\">//        s3.intern(); // 由于s3就是在常量池中的，所以执行此方法，我理解也意义不大。</span>\n        <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s4 指向常量池中11</span>\n        s3<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//由于此时常量池中已经存在\"11\"的常量了，所以s3直接返回对象的指针。</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为false，因为s4 指向常量池,s3指向堆。</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果是jdk6的环境呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">jdk6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n\n\n        <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s3 指向的是堆中的地址</span>\n        s3<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// jdk6同7不同的是，JDK6中，intern()方法会把首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里面这个字符串实例的引用。可以理解为只复制内容到常量池，不改栈指向堆的指针。</span>\n        <span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s4 指向常量池中11</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为false，因为s4 指向常量池,s3指向堆。</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Java堆：是线程共享的一块区域，此区域的唯一目的是为了存储对象实例，几乎所有的对象实例都在这里创建（有例外：栈上分配，TLAB）</p>\n<p>堆内容的划分：新生代；老年代；永久代（元空间）</p>\n<p>新生代又分为 eden区，s0、s1区。</p>\n<p>常见概念：<br>新生代垃圾回收：Minor GC &#x2F; Young GC<br>老年代回收：Major GC<br>整堆垃圾回收：Full GC，收集整个堆和方法区<br>混合收集（Mix）：Mix GC，G1中的概念，收集整个新生代和部分老年代。</p>\n<p>对象的分配过程：</p>\n<ol>\n<li><p>判断对象是否有逃逸，如果对象没有逃逸，那么就没有必要分配在堆上；<br>需要通过jvm参数控制开启逃逸分析**(-XX: +DoEscapeAnalysis)<strong>；开启标量替换</strong>(-XX: +EliminateAllocaCons)**<br>分析对象的作用域，可能被其他方法引用到叫做方法逃逸；可能被其他线程使用叫做线程逃逸<br>即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。<br>先看一下锁消除：如果即时编译器能够判断锁对象不逃逸，那么对该对象的加锁、解锁操作都没有任何意义。<br>其次在看下什么是栈上分配：由于直接在栈上初始化对象，并通过弹出栈帧来自动回收对象空间，这样就无需借助堆内存的垃圾回收<br>不过HotSpot并没有采用栈上分配的方式，原因是有很多逻辑使用了”对象只能堆分配”，所以其使用了<strong>标量替换</strong>的技术，简单来说就是判断未逃逸的对象中有哪些属性使用，将这个对象替换为对象中的成员变量，直接在栈上初始化这些成员变量，这个同栈上分配一样，也无需借助堆内存的垃圾回收。</p>\n</li>\n<li><p>在判断完如果无需栈上分配之后，需要判断是否开启<strong>TLAB</strong>，如果开启，那么需要进行TLAB的判断。（[[<a href=\"https://www.bilibili.com/read/cv10375688\">https://www.bilibili.com/read/cv10375688</a> | TLAB全解 ]]）<br> TLAB是什么？是线程本地分配缓存区，是线程私有的，线程初始化的时候会创建TLAB。TLAB占据的是Eden区中的一块空间，通常占据1%，为线程划分独立的对象分配空间。</p>\n<p> 为什么要有TLAB？是怎么使用的？<br> TLAB的出现的目的是避免堆上直接分配内存从而避免频繁的锁竞争。<br> 在检查如果开启了TLAB时，如果开启了，那么判断此线程剩余的TLAB大小时候满足于分配此对象，如果不满足，再判断TLAB的剩余空间是否小于最大浪费空间限制（动态值），如果是，则从Eden区中重新申请一个TLAB空间；否则直接在TLAB外分配。发生GC时，TLAB会被回收。<br> -XX:UseTLAB 开启TLAB 默认开启<br> ![[&#x2F;img&#x2F;Pasted image 20230328102127.png]]</p>\n<p> TLAB有什么缺点，怎么解决？<br> TLAB引入后，由于存在TLAB停止的场景，也就是在TLAB的剩余空间小于最大浪费空间限制值下，需要重新申请一个TLAB，那么此时的剩余空间就是一个间隙。或者是GC时，还有TLAB的剩余空间。如果不管这些空间那么GC的时候这些空间就需要额外的检查，影响GC的扫描效率。</p>\n</li>\n</ol>\n<p>所以如果是我们自己设计一个TLAB的空间，<br>1）不能设置这个空间太大或者太小，太小会造成多频次的重新申请TLAB空间，太大会造成空间浪费；<br>2）每次申请空间大小最好不要固定，而是动态的。<br>3）由于TLAB是由线程创建的，所以需要关注当前gc轮次内的会分配对象的线程数量<br>4）也需要关注每个线程会创建对象的数量及所需的空间，即申请TLAB次数。<br>综上，实际是缺失一个历史期望值的概念。TLAB中经常使用的是EMA（指数平均数）算法<br>新的期望大小 &#x3D; 堆给TLAB的空间总大小 * 当前分配比例 EMA &#x2F; 重填次数配置 </p>\n<p>我们在了解了这些之后，再来回顾下堆、栈、方法区的关系。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HelloWorld</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这行代码中Instance在栈中的局部变量表中，指向java的堆，java的堆中有对象实例数据，在对象头中有关于此对象的类型信息， 指向方法区。</p>\n<p>常见的JVM命令<br><strong>Java栈：</strong> <strong>•</strong> -Xss：设置线程最⼤栈空间。<br><strong>Java堆：</strong><br>• 【-Xmx】设置堆空间最⼤⼤⼩（新⽣代 + ⽼年代）<br>• 【-Xms】设置堆空间初始⼤⼩（新⽣代 + ⽼年代）<br>• 【-XX:NewRa6o】设置⽼年代&#x2F;新⽣代⼤⼩⽐例。<br>• 【-XX:SurvivorRadio】设置Eden区和S0和S1区⼤⼩⽐例。设置成8，代表Eden:S0:S1&#x3D;8:1:1<br>• 【-XX:UseTLAB】开启tlab空间<br>• 【-XX:TLABWasteTargetPercent】设置TLAB占Eden区空间百分⽐<br>• 【-XX:handlePromo6onFailure】是否设置空间分配担保<br>• 【-XX:MaxTenuringThreshold】设置默认的晋升年龄<br><strong>PermGen：</strong><br>• 【-XX:PermSize】设置永久代初始⼤⼩<br>• 【-XX:MaxPermSize】设置永久代最⼤可分配空间<br><strong>MetaSpace：</strong><br>• 【-XX:MetaspaceSize】设置元空间初始⼤⼩，触及MetaspaceSize，触发FullGC<br>• 【-XX:MaxMetaspaceSize】设置元空间最⼤⼤⼩，默认-1，代表没有限制，当没有本地内存可 ⽤，直接OOM</p>\n<p>GC的关注区域为：方法区和堆<br>两种常见问题：<br>1.内存泄露（Memory Leak），业务对象不需要了，但是回收不掉<br>2.内存溢出（OutOfMemory），没有空闲内存了，超出内存上限。</p>\n<p>GC的评估指标：<br>如果是高吞吐量的系统，单位时间内stw时间总和更小<br>如果是注重低延时的系统，单次stw时间比较小</p>\n<p>JVM垃圾回收算法：</p>\n<ol>\n<li>标记-清除<br>分为两个阶段，标记阶段，标记要回收的对象，清除阶段，将标记为确认不可用的对象清除。<br>缺点：标记和清除的效率都不高并且会产生大量的碎片而导致频繁的回收</li>\n<li>标记-复制<br>先将内存分为大小相等的两块，每次用其中一块，当开始垃圾回收，把存活的对象复制到另一块，然后把这块内存清理。<br>缺点：需要浪费额外的内存作为复制区；当存活率高时，复制算法效率降低。</li>\n<li>标记-整理<br>把存活的对象往内存的一段移动，然后直接回收边界以外的内存<br>缺点：移动过程效率较低。</li>\n</ol>\n<p>并发与并行<br>并发：CPU不断地上下文切换，执行多个任务，每个时间点上只有一个任务在执行。<br>并行：在多核的场景下，每个核都执行，同时进行。</p>\n<p>独占与非独占式垃圾回收的区别：在垃圾回收的时候垃圾回收线程是否同应用线程并行执行。</p>\n<p>![[&#x2F;img&#x2F;Pasted image 20230328204702.png]]</p>\n<p>新生代的垃圾收集器：Serial GC、Parallel Scavenge GC、ParNew GC<br>老年代垃圾收集器：Serial Old GC、Parallel Old GC、CMS GC<br>整堆垃圾收集器：G1</p>\n<p>GC的两个难点：<br>1.对象漏标问题，这就涉及到3色标记法，用于区分哪些对象是要回收的，哪些对象是不要回收的。<br>白色：未被标记的对象<br>灰色：自身被标记，成员变量未被标记<br>黑色：自身和成员变量均已标记完成。</p>\n<p>漏标的解决方案：<br>CMS解决方案：增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性。<br>G1解决方案：关注引用的删除，当B-&gt;D消失，要把这个引用推到GC的堆栈，保证D还能被GC扫描到。</p>\n<p>2.跨代引用问题<br>问题点：为了找到年轻代的存活对象，不得不遍历整个老年代；反之亦然。这种方案存在极大的性能浪费，因为跨代引用是极少的。</p>\n<p>解决方案：空间换时间。<br>CMS：CardTable<br>G1：RememberSet + CardTable</p>\n<p>以G1为例，在每个region中都记录了RememberSet。</p>\n<p><strong>CMS和G1的区别</strong>：</p>\n<p>CMS：并行和并发的非独占非压缩垃圾回收器。作用于老年代，使用标记整理算法，低延时<br>G1：并行和并发的非独占压缩垃圾回收期，作用于全堆，使用标记复制算法，低延时；有两种gc方式<br>Young GC：收集全部的Young区（Eden&#x2F;Survivor）的垃圾；<br>Mix GC：收集全部的Young区 及部分老年代的垃圾。</p>\n<p>那我们再来解析下gc的日志：</p>\n<pre class=\"line-numbers language-log\" data-language=\"log\"><code class=\"language-log\"><span class=\"token operator\">&#123;</span>Heap before GC invocations<span class=\"token operator\">=</span><span class=\"token number\">2115</span> <span class=\"token operator\">(</span>full <span class=\"token number\">0</span><span class=\"token operator\">)</span><span class=\"token operator\">:</span>\n garbage<span class=\"token operator\">-</span>first heap   total <span class=\"token number\">5570560K</span><span class=\"token punctuation\">,</span> used <span class=\"token number\">4977455K</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x000000066c000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000066c205500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00000007c0000000</span><span class=\"token operator\">)</span>\n  region size <span class=\"token number\">2048K</span><span class=\"token punctuation\">,</span> <span class=\"token number\">81</span> young <span class=\"token operator\">(</span><span class=\"token number\">165888K</span><span class=\"token operator\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> survivors <span class=\"token operator\">(</span><span class=\"token number\">0K</span><span class=\"token operator\">)</span>\n Metaspace       used <span class=\"token number\">215126K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">233170K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">234112K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1257472K</span>\n  class space    used <span class=\"token number\">23373K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">26311K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">26496K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1048576K</span>\n<span class=\"token date number\">2023-03-21T</span><span class=\"token time number\">04:52:53.936+0800</span><span class=\"token operator\">:</span> <span class=\"token number\">65884.570</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>GC pause <span class=\"token operator\">(</span>G1 Humongous Allocation<span class=\"token operator\">)</span> <span class=\"token operator\">(</span>mixed<span class=\"token operator\">)</span>\nDesired survivor size <span class=\"token number\">17825792</span> bytes<span class=\"token punctuation\">,</span> new threshold <span class=\"token number\">15</span> <span class=\"token operator\">(</span>max <span class=\"token number\">15</span><span class=\"token operator\">)</span>\n <span class=\"token operator\">(</span>to<span class=\"token operator\">-</span>space exhausted<span class=\"token operator\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0684663</span> secs<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Parallel Time<span class=\"token operator\">:</span> <span class=\"token number\">48.8</span> ms<span class=\"token punctuation\">,</span> GC Workers<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker Start <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">65884572.2</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">65884572.3</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">65884572.3</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Ext Root Scanning <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">10.2</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">11.7</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">14.5</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">4.3</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">47.0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Update RS <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">20.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">21.5</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">22.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">85.9</span><span class=\"token punctuation\">]</span>\n         <span class=\"token punctuation\">[</span>Processed Buffers<span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">266</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">278.2</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">287</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">1113</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Scan RS <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">3.7</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Code Root Scanning <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Object Copy <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">13.5</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">14.5</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">15.6</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">58.1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Termination <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker Other <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker Total <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">48.7</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">48.7</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">48.8</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> Sum<span class=\"token operator\">:</span> <span class=\"token number\">194.8</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>GC Worker End <span class=\"token operator\">(</span>ms<span class=\"token operator\">)</span><span class=\"token operator\">:</span> Min<span class=\"token operator\">:</span> <span class=\"token number\">65884621.0</span><span class=\"token punctuation\">,</span> Avg<span class=\"token operator\">:</span> <span class=\"token number\">65884621.0</span><span class=\"token punctuation\">,</span> Max<span class=\"token operator\">:</span> <span class=\"token number\">65884621.0</span><span class=\"token punctuation\">,</span> Diff<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Code Root Fixup<span class=\"token operator\">:</span> <span class=\"token number\">0.4</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Code Root Purge<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Clear CT<span class=\"token operator\">:</span> <span class=\"token number\">0.8</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Other<span class=\"token operator\">:</span> <span class=\"token number\">18.5</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Evacuation Failure<span class=\"token operator\">:</span> <span class=\"token number\">9.6</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Choose CSet<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Ref Proc<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Ref Enq<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Redirty Cards<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Humongous Reclaim<span class=\"token operator\">:</span> <span class=\"token number\">4.7</span> ms<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span>Free CSet<span class=\"token operator\">:</span> <span class=\"token number\">0.7</span> ms<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">[</span>Eden<span class=\"token operator\">:</span> <span class=\"token number\">162.0M</span><span class=\"token operator\">(</span><span class=\"token number\">272.0M</span><span class=\"token operator\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">0.0B</span><span class=\"token operator\">(</span><span class=\"token number\">270.0M</span><span class=\"token operator\">)</span> Survivors<span class=\"token operator\">:</span> <span class=\"token number\">0.0B</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">2048.0K</span> Heap<span class=\"token operator\">:</span> <span class=\"token number\">4861.4M</span><span class=\"token operator\">(</span><span class=\"token number\">5440.0M</span><span class=\"token operator\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token number\">3643.8M</span><span class=\"token operator\">(</span><span class=\"token number\">5440.0M</span><span class=\"token operator\">)</span><span class=\"token punctuation\">]</span>\nHeap after GC invocations<span class=\"token operator\">=</span><span class=\"token number\">2116</span> <span class=\"token operator\">(</span>full <span class=\"token number\">0</span><span class=\"token operator\">)</span><span class=\"token operator\">:</span>\n garbage<span class=\"token operator\">-</span>first heap   total <span class=\"token number\">5570560K</span><span class=\"token punctuation\">,</span> used <span class=\"token number\">3731299K</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x000000066c000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000066c205500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00000007c0000000</span><span class=\"token operator\">)</span>\n  region size <span class=\"token number\">2048K</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> young <span class=\"token operator\">(</span><span class=\"token number\">2048K</span><span class=\"token operator\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> survivors <span class=\"token operator\">(</span><span class=\"token number\">2048K</span><span class=\"token operator\">)</span>\n Metaspace       used <span class=\"token number\">215126K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">233170K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">234112K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1257472K</span>\n  class space    used <span class=\"token number\">23373K</span><span class=\"token punctuation\">,</span> capacity <span class=\"token number\">26311K</span><span class=\"token punctuation\">,</span> committed <span class=\"token number\">26496K</span><span class=\"token punctuation\">,</span> reserved <span class=\"token number\">1048576K</span>\n<span class=\"token operator\">&#125;</span>\n <span class=\"token punctuation\">[</span>Times<span class=\"token operator\">:</span> user<span class=\"token operator\">=</span><span class=\"token number\">0.20</span> sys<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> real<span class=\"token operator\">=</span><span class=\"token number\">0.07</span> secs<span class=\"token punctuation\">]</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"MySQL数据类型","date":"2022-11-13T16:04:43.000Z","_content":"\n**选择优化的数据类型**\n\n- 更小的通常更好\n\n  一般情况下，应该尽量使用可以正确存储数据的最小数据类型。\n\n- 简单更好\n\n  例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。\n\n- 尽量避免NULL\n\n  通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。\n\n  但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。\n\n  当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。\n\ndatetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。\n\n###### 整数类型\n\ntinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1\n\n","source":"_posts/MySQL数据类型.md","raw":"---\ntitle: MySQL数据类型\ndate: 2022-11-14 00:04:43\ntags:\n  - MYSQL\n---\n\n**选择优化的数据类型**\n\n- 更小的通常更好\n\n  一般情况下，应该尽量使用可以正确存储数据的最小数据类型。\n\n- 简单更好\n\n  例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。\n\n- 尽量避免NULL\n\n  通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。\n\n  但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。\n\n  当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。\n\ndatetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。\n\n###### 整数类型\n\ntinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1\n\n","slug":"MySQL数据类型","published":1,"updated":"2024-07-20T15:41:42.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz762026000atp4l2cmob9vl","content":"<p><strong>选择优化的数据类型</strong></p>\n<ul>\n<li><p>更小的通常更好</p>\n<p>一般情况下，应该尽量使用可以正确存储数据的最小数据类型。</p>\n</li>\n<li><p>简单更好</p>\n<p>例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。</p>\n</li>\n<li><p>尽量避免NULL</p>\n<p>通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。</p>\n<p>但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。</p>\n<p>当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。</p>\n</li>\n</ul>\n<p>datetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。</p>\n<h6 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h6><p>tinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><strong>选择优化的数据类型</strong></p>\n<ul>\n<li><p>更小的通常更好</p>\n<p>一般情况下，应该尽量使用可以正确存储数据的最小数据类型。</p>\n</li>\n<li><p>简单更好</p>\n<p>例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。</p>\n</li>\n<li><p>尽量避免NULL</p>\n<p>通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。</p>\n<p>但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。</p>\n<p>当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。</p>\n</li>\n</ul>\n<p>datetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。</p>\n<h6 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h6><p>tinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1</p>\n"},{"title":"二叉树的基本知识","date":"2022-06-12T07:37:23.000Z","_content":"\n\n\n\n\n## 二叉树的四种遍历方式\n\n不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）\n\n基本概念不再赘述。**复杂度：**设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。\n\n二叉树数据结构\n\n```java\nclass TreeNode {\n        int val;\n        TreeNode left;\n        TreeNode right;\n        TreeNode() {}\n        TreeNode(int val) { this.val = val; }\n        TreeNode(int val, TreeNode left, TreeNode right) {\n            this.val = val;\n            this.left = left;\n            this.right = right;\n        }\n    }\n```\n\n\n\n```\n      1\n     / \\\n    2   5\n   / \\     \n  3   4   \n```\n\n### 前序遍历\n\n遍历顺序：根节点-> 左节点-> 右节点\n\n代码实现：\n\n```java\n/**\n     * 前序遍历  根 -> 左 -> 右\n     */\n    public void preOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        System.out.print(tree.val);\n        preOrder(tree.left);\n        preOrder(tree.right);\n    }\n```\n\n非递归方式\n\n```java\n//java 中使用 Deque， Stack已经弃用。\n    //Deque 的使用用法：push、pop。\n    public void perOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        stack.push(root);\n        while(!stack.isEmpty()){\n            TreeNode treeNode = stack.pop();\n            result.append(treeNode.val);\n            if (treeNode.right != null){\n                stack.push(treeNode.right);\n            }\n            if (treeNode.left != null){\n                stack.push(treeNode.left);\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 中序遍历\n\n遍历顺序：左节点-> 根节点-> 右节点\n\n代码实现\n\n```java\n/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */\npublic void midOrder(TreeNode tree){\n    if (tree == null){\n        return;\n    }\n    midOrder(tree.left);\n    System.out.print(tree.val);\n    midOrder(tree.right);\n}\n```\n\n```java\n/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */\n    public void minOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        while(root != null || !stack.isEmpty()){\n\n            //此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。\n            while (root != null){\n                stack.push(root);\n                root = root.left;\n            }\n            //调出栈\n            root = stack.pop();\n            result.append(root.val);\n            root = root.right;\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 后序遍历\n\n遍历顺序：左节点-> 右节点-> 根节点\n\n```java\n/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */\n    public void postOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        postOrder(tree.left);\n        postOrder(tree.right);\n        System.out.print(tree.val);\n    }\n```\n\n```java\n/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */\n    public void postOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        TreeNode pre = null; //记录前置节点\n        while(root != null || !stack.isEmpty()){\n            //把所有的左子树节点都放入栈中\n            while(root != null){\n                stack.push(root);\n                root = root.left;\n            }\n\n            //找到当前节点\n            root = stack.pop();\n            //如果当前节点的右节点为空\n            //这里为什么会有对pre的判断，是为了避免重复处理。\n            //拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。\n            if (root.right == null || pre == root.right){\n                result.append(root.val);\n                //设置前置节点\n                pre = root;\n                //置为空的目的是处理栈中堆积的父节点。\n                root = null;\n            } else{\n                //右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。\n                stack.push(root);\n                //把当前节点的右节点作为root进行处理。\n                root = root.right;\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 层级遍历\n\n```java\n/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */\npublic List<StringBuilder> result = new ArrayList<>();\n\npublic void levelOrder(TreeNode root, int level) {\n    if (root == null) {\n        return;\n    }\n    //当数组大小等于层级时，初始化该层级需要的存储空间\n    if (result.size() == level) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(root.val);\n        result.add(level, stringBuilder);\n    } else {\n        result.get(level).append(root.val);\n    }\n    levelOrder(root.left, level + 1);\n    levelOrder(root.right, level + 1);\n}\n```\n\n```java\n/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */\npublic void levelOrderIter(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    StringBuilder result = new StringBuilder();\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        TreeNode current = queue.poll();\n        result.append(current.val);\n        if (current.left != null){\n            queue.add(current.left);\n        }\n        if (current.right != null){\n            queue.add(current.right);\n        }\n    }\n    System.out.println(result.toString());\n}\n```\n\n\n\n额外：\n\n```java\n/**\n * 获取二叉树的最大深度\n */\npublic int getMaxDepth(TreeNode root){\n    if (root == null){\n        return 0;\n    }\n    return Math.max(getMaxDepth(root.left)+1,getMaxDepth(root.right)+1);\n}\n```\n\n\n\n```java\n/**\n     * 打印每个二叉树的层级 按层打印\n     */\n    public void levelOrderIterByLevel(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        StringBuilder result = new StringBuilder();\n        // 当前行打印的最右节点\n        TreeNode last = root;\n        // 下一行打印的最右节点\n        TreeNode nextLast = null;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while(!queue.isEmpty()){\n            TreeNode current = queue.poll();\n            result.append(current.val);\n            if (current.left != null){\n                queue.add(current.left);\n                nextLast = current.left; //如果当前节点的left非空，则认为下一层的next是当前节点的left\n            }\n            if (current.right != null){\n                queue.add(current.right);\n                nextLast = current.right; //同理\n            }\n            //若是发现当前层的最后一个节点同当前节点相同，则打印\n            if (last == current){\n                result.append(\"\\\\n\");\n                //将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环\n                last = nextLast; //\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n","source":"_posts/二叉树的基本知识.md","raw":"---\ntitle: 二叉树的基本知识\ndate: 2022-06-12 15:37:23\ntags:\n  - 二叉树\n  - 算法\n---\n\n\n\n\n\n## 二叉树的四种遍历方式\n\n不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）\n\n基本概念不再赘述。**复杂度：**设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。\n\n二叉树数据结构\n\n```java\nclass TreeNode {\n        int val;\n        TreeNode left;\n        TreeNode right;\n        TreeNode() {}\n        TreeNode(int val) { this.val = val; }\n        TreeNode(int val, TreeNode left, TreeNode right) {\n            this.val = val;\n            this.left = left;\n            this.right = right;\n        }\n    }\n```\n\n\n\n```\n      1\n     / \\\n    2   5\n   / \\     \n  3   4   \n```\n\n### 前序遍历\n\n遍历顺序：根节点-> 左节点-> 右节点\n\n代码实现：\n\n```java\n/**\n     * 前序遍历  根 -> 左 -> 右\n     */\n    public void preOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        System.out.print(tree.val);\n        preOrder(tree.left);\n        preOrder(tree.right);\n    }\n```\n\n非递归方式\n\n```java\n//java 中使用 Deque， Stack已经弃用。\n    //Deque 的使用用法：push、pop。\n    public void perOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        stack.push(root);\n        while(!stack.isEmpty()){\n            TreeNode treeNode = stack.pop();\n            result.append(treeNode.val);\n            if (treeNode.right != null){\n                stack.push(treeNode.right);\n            }\n            if (treeNode.left != null){\n                stack.push(treeNode.left);\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 中序遍历\n\n遍历顺序：左节点-> 根节点-> 右节点\n\n代码实现\n\n```java\n/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */\npublic void midOrder(TreeNode tree){\n    if (tree == null){\n        return;\n    }\n    midOrder(tree.left);\n    System.out.print(tree.val);\n    midOrder(tree.right);\n}\n```\n\n```java\n/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */\n    public void minOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        while(root != null || !stack.isEmpty()){\n\n            //此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。\n            while (root != null){\n                stack.push(root);\n                root = root.left;\n            }\n            //调出栈\n            root = stack.pop();\n            result.append(root.val);\n            root = root.right;\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 后序遍历\n\n遍历顺序：左节点-> 右节点-> 根节点\n\n```java\n/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */\n    public void postOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        postOrder(tree.left);\n        postOrder(tree.right);\n        System.out.print(tree.val);\n    }\n```\n\n```java\n/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */\n    public void postOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        TreeNode pre = null; //记录前置节点\n        while(root != null || !stack.isEmpty()){\n            //把所有的左子树节点都放入栈中\n            while(root != null){\n                stack.push(root);\n                root = root.left;\n            }\n\n            //找到当前节点\n            root = stack.pop();\n            //如果当前节点的右节点为空\n            //这里为什么会有对pre的判断，是为了避免重复处理。\n            //拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。\n            if (root.right == null || pre == root.right){\n                result.append(root.val);\n                //设置前置节点\n                pre = root;\n                //置为空的目的是处理栈中堆积的父节点。\n                root = null;\n            } else{\n                //右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。\n                stack.push(root);\n                //把当前节点的右节点作为root进行处理。\n                root = root.right;\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 层级遍历\n\n```java\n/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */\npublic List<StringBuilder> result = new ArrayList<>();\n\npublic void levelOrder(TreeNode root, int level) {\n    if (root == null) {\n        return;\n    }\n    //当数组大小等于层级时，初始化该层级需要的存储空间\n    if (result.size() == level) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(root.val);\n        result.add(level, stringBuilder);\n    } else {\n        result.get(level).append(root.val);\n    }\n    levelOrder(root.left, level + 1);\n    levelOrder(root.right, level + 1);\n}\n```\n\n```java\n/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */\npublic void levelOrderIter(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    StringBuilder result = new StringBuilder();\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        TreeNode current = queue.poll();\n        result.append(current.val);\n        if (current.left != null){\n            queue.add(current.left);\n        }\n        if (current.right != null){\n            queue.add(current.right);\n        }\n    }\n    System.out.println(result.toString());\n}\n```\n\n\n\n额外：\n\n```java\n/**\n * 获取二叉树的最大深度\n */\npublic int getMaxDepth(TreeNode root){\n    if (root == null){\n        return 0;\n    }\n    return Math.max(getMaxDepth(root.left)+1,getMaxDepth(root.right)+1);\n}\n```\n\n\n\n```java\n/**\n     * 打印每个二叉树的层级 按层打印\n     */\n    public void levelOrderIterByLevel(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        StringBuilder result = new StringBuilder();\n        // 当前行打印的最右节点\n        TreeNode last = root;\n        // 下一行打印的最右节点\n        TreeNode nextLast = null;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while(!queue.isEmpty()){\n            TreeNode current = queue.poll();\n            result.append(current.val);\n            if (current.left != null){\n                queue.add(current.left);\n                nextLast = current.left; //如果当前节点的left非空，则认为下一层的next是当前节点的left\n            }\n            if (current.right != null){\n                queue.add(current.right);\n                nextLast = current.right; //同理\n            }\n            //若是发现当前层的最后一个节点同当前节点相同，则打印\n            if (last == current){\n                result.append(\"\\\\n\");\n                //将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环\n                last = nextLast; //\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n","slug":"二叉树的基本知识","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz762026000etp4lg1r52f5p","content":"<h2 id=\"二叉树的四种遍历方式\"><a href=\"#二叉树的四种遍历方式\" class=\"headerlink\" title=\"二叉树的四种遍历方式\"></a>二叉树的四种遍历方式</h2><p>不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）</p>\n<p>基本概念不再赘述。<strong>复杂度：</strong>设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。</p>\n<p>二叉树数据结构</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   5\n &#x2F; \\     \n3   4   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>遍历顺序：根节点-&gt; 左节点-&gt; 右节点</p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 前序遍历  根 -> 左 -> 右\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>非递归方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//java 中使用 Deque， Stack已经弃用。</span>\n    <span class=\"token comment\">//Deque 的使用用法：push、pop。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">perOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> treeNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>遍历顺序：左节点-&gt; 根节点-&gt; 右节点</p>\n<p>代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//调出栈</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><p>遍历顺序：左节点-&gt; 右节点-&gt; 根节点</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录前置节点</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//把所有的左子树节点都放入栈中</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">//找到当前节点</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果当前节点的右节点为空</span>\n            <span class=\"token comment\">//这里为什么会有对pre的判断，是为了避免重复处理。</span>\n            <span class=\"token comment\">//拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> pre <span class=\"token operator\">==</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//设置前置节点</span>\n                pre <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//置为空的目的是处理栈中堆积的父节点。</span>\n                root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//把当前节点的右节点作为root进行处理。</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"层级遍历\"><a href=\"#层级遍历\" class=\"headerlink\" title=\"层级遍历\"></a>层级遍历</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//当数组大小等于层级时，初始化该层级需要的存储空间</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>额外：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 获取二叉树的最大深度\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 打印每个二叉树的层级 按层打印\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIterByLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 当前行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> last <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 下一行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> nextLast <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">//如果当前节点的left非空，则认为下一层的next是当前节点的left</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//同理</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//若是发现当前层的最后一个节点同当前节点相同，则打印</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环</span>\n                last <span class=\"token operator\">=</span> nextLast<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"二叉树的四种遍历方式\"><a href=\"#二叉树的四种遍历方式\" class=\"headerlink\" title=\"二叉树的四种遍历方式\"></a>二叉树的四种遍历方式</h2><p>不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）</p>\n<p>基本概念不再赘述。<strong>复杂度：</strong>设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。</p>\n<p>二叉树数据结构</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   5\n &#x2F; \\     \n3   4   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>遍历顺序：根节点-&gt; 左节点-&gt; 右节点</p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 前序遍历  根 -> 左 -> 右\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>非递归方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//java 中使用 Deque， Stack已经弃用。</span>\n    <span class=\"token comment\">//Deque 的使用用法：push、pop。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">perOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> treeNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>遍历顺序：左节点-&gt; 根节点-&gt; 右节点</p>\n<p>代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//调出栈</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><p>遍历顺序：左节点-&gt; 右节点-&gt; 根节点</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录前置节点</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//把所有的左子树节点都放入栈中</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">//找到当前节点</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果当前节点的右节点为空</span>\n            <span class=\"token comment\">//这里为什么会有对pre的判断，是为了避免重复处理。</span>\n            <span class=\"token comment\">//拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> pre <span class=\"token operator\">==</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//设置前置节点</span>\n                pre <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//置为空的目的是处理栈中堆积的父节点。</span>\n                root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//把当前节点的右节点作为root进行处理。</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"层级遍历\"><a href=\"#层级遍历\" class=\"headerlink\" title=\"层级遍历\"></a>层级遍历</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//当数组大小等于层级时，初始化该层级需要的存储空间</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>额外：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 获取二叉树的最大深度\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 打印每个二叉树的层级 按层打印\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIterByLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 当前行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> last <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 下一行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> nextLast <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">//如果当前节点的left非空，则认为下一层的next是当前节点的left</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//同理</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//若是发现当前层的最后一个节点同当前节点相同，则打印</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环</span>\n                last <span class=\"token operator\">=</span> nextLast<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"删除排序链表中的重复元素 II","date":"2023-03-17T15:39:58.000Z","_content":"\n给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。\n\n \n\n示例 1：\n\n\n输入：head = [1,2,3,3,4,4,5]\n输出：[1,2,5]\n示例 2：\n\n\n输入：head = [1,1,1,2,3]\n输出：[2,3]\n\n\n提示：\n\n链表中节点数目在范围 [0, 300] 内\n-100 <= Node.val <= 100\n题目数据保证链表已经按升序 排列\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii\n\n\n\n**链表的题通常需要注意两点：**\n\n1. **舍得用变量，千万别想着节省变量，否则容易被逻辑绕晕**\n2. **head 有可能需要改动时，先增加一个 假head，返回的时候直接取 假head.next，这样就不需要为修改 head 增加一大堆逻辑了。**\n\n\n\n自己写：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        //整理一下思路：\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        //先初始化一个结束的节点，期望用结束的节点返回结果\n        ListNode result = new ListNode(0, head);\n        ListNode current = result;\n\n        //注意范围的内容为result.next\n        //链表中删除节点的方式是xx.next = xx.next.next;\n        while(current.next != null && current.next.next != null){\n            //临时值\n            int temp = current.next.val;\n            boolean tempB = false;\n            //如果当前节点同下一个节点相同，那么将下一个节点删除，挪移到下下个节点\n            while(current.next.next != null && temp == current.next.next.val){\n                tempB = true;\n                current.next = current.next.next;\n            }\n            if(!tempB){\n                current = current.next;\n            } else {\n                if(temp == current.next.val){\n                    current.next = current.next.next;\n                }\n            }\n        }\n        return result.next;\n    }\n}\n```\n\n\n\n\n\n优化版：\n\n为什么优化？增加了一个boolean的类型是否可以去掉？\n\n结论是可以去掉，建议背过。\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        //整理一下思路：\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        //先初始化一个结束的节点，期望用结束的节点返回结果\n        ListNode result = new ListNode(0, head);\n        ListNode current = result;\n\n        //注意范围的内容为result.next\n        //链表中删除节点的方式是xx.next = xx.next.next;\n        while(current.next != null && current.next.next != null){\n            if(current.next.val == current.next.next.val){\n                //如果相同，那么就需要循环判断下面的值是否相同。\n                int temp = current.next.val;\n                while(current.next != null && temp == current.next.val){\n                    current.next = current.next.next;\n                }\n            } else {\n                current = current.next;\n            }\n        }\n        return result.next;\n    }\n}\n```\n\n","source":"_posts/删除排序链表中的重复元素-II.md","raw":"---\ntitle: 删除排序链表中的重复元素 II\ndate: 2023-03-17 23:39:58\ntags:\n  - 算法\n  - 链表\n---\n\n给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。\n\n \n\n示例 1：\n\n\n输入：head = [1,2,3,3,4,4,5]\n输出：[1,2,5]\n示例 2：\n\n\n输入：head = [1,1,1,2,3]\n输出：[2,3]\n\n\n提示：\n\n链表中节点数目在范围 [0, 300] 内\n-100 <= Node.val <= 100\n题目数据保证链表已经按升序 排列\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii\n\n\n\n**链表的题通常需要注意两点：**\n\n1. **舍得用变量，千万别想着节省变量，否则容易被逻辑绕晕**\n2. **head 有可能需要改动时，先增加一个 假head，返回的时候直接取 假head.next，这样就不需要为修改 head 增加一大堆逻辑了。**\n\n\n\n自己写：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        //整理一下思路：\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        //先初始化一个结束的节点，期望用结束的节点返回结果\n        ListNode result = new ListNode(0, head);\n        ListNode current = result;\n\n        //注意范围的内容为result.next\n        //链表中删除节点的方式是xx.next = xx.next.next;\n        while(current.next != null && current.next.next != null){\n            //临时值\n            int temp = current.next.val;\n            boolean tempB = false;\n            //如果当前节点同下一个节点相同，那么将下一个节点删除，挪移到下下个节点\n            while(current.next.next != null && temp == current.next.next.val){\n                tempB = true;\n                current.next = current.next.next;\n            }\n            if(!tempB){\n                current = current.next;\n            } else {\n                if(temp == current.next.val){\n                    current.next = current.next.next;\n                }\n            }\n        }\n        return result.next;\n    }\n}\n```\n\n\n\n\n\n优化版：\n\n为什么优化？增加了一个boolean的类型是否可以去掉？\n\n结论是可以去掉，建议背过。\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        //整理一下思路：\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        //先初始化一个结束的节点，期望用结束的节点返回结果\n        ListNode result = new ListNode(0, head);\n        ListNode current = result;\n\n        //注意范围的内容为result.next\n        //链表中删除节点的方式是xx.next = xx.next.next;\n        while(current.next != null && current.next.next != null){\n            if(current.next.val == current.next.next.val){\n                //如果相同，那么就需要循环判断下面的值是否相同。\n                int temp = current.next.val;\n                while(current.next != null && temp == current.next.val){\n                    current.next = current.next.next;\n                }\n            } else {\n                current = current.next;\n            }\n        }\n        return result.next;\n    }\n}\n```\n\n","slug":"删除排序链表中的重复元素-II","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz762027000ftp4l94n77run","content":"<p>给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,2,3,3,4,4,5]<br>输出：[1,2,5]<br>示例 2：</p>\n<p>输入：head &#x3D; [1,1,1,2,3]<br>输出：[2,3]</p>\n<p>提示：</p>\n<p>链表中节点数目在范围 [0, 300] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>题目数据保证链表已经按升序 排列</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii\">https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii</a></p>\n<p><strong>链表的题通常需要注意两点：</strong></p>\n<ol>\n<li><strong>舍得用变量，千万别想着节省变量，否则容易被逻辑绕晕</strong></li>\n<li><strong>head 有可能需要改动时，先增加一个 假head，返回的时候直接取 假head.next，这样就不需要为修改 head 增加一大堆逻辑了。</strong></li>\n</ol>\n<p>自己写：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//整理一下思路：</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//先初始化一个结束的节点，期望用结束的节点返回结果</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//注意范围的内容为result.next</span>\n        <span class=\"token comment\">//链表中删除节点的方式是xx.next = xx.next.next;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//临时值</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> tempB <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果当前节点同下一个节点相同，那么将下一个节点删除，挪移到下下个节点</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> temp <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                tempB <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tempB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>优化版：</p>\n<p>为什么优化？增加了一个boolean的类型是否可以去掉？</p>\n<p>结论是可以去掉，建议背过。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//整理一下思路：</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//先初始化一个结束的节点，期望用结束的节点返回结果</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//注意范围的内容为result.next</span>\n        <span class=\"token comment\">//链表中删除节点的方式是xx.next = xx.next.next;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//如果相同，那么就需要循环判断下面的值是否相同。</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> temp <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表 。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,2,3,3,4,4,5]<br>输出：[1,2,5]<br>示例 2：</p>\n<p>输入：head &#x3D; [1,1,1,2,3]<br>输出：[2,3]</p>\n<p>提示：</p>\n<p>链表中节点数目在范围 [0, 300] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>题目数据保证链表已经按升序 排列</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii\">https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii</a></p>\n<p><strong>链表的题通常需要注意两点：</strong></p>\n<ol>\n<li><strong>舍得用变量，千万别想着节省变量，否则容易被逻辑绕晕</strong></li>\n<li><strong>head 有可能需要改动时，先增加一个 假head，返回的时候直接取 假head.next，这样就不需要为修改 head 增加一大堆逻辑了。</strong></li>\n</ol>\n<p>自己写：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//整理一下思路：</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//先初始化一个结束的节点，期望用结束的节点返回结果</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//注意范围的内容为result.next</span>\n        <span class=\"token comment\">//链表中删除节点的方式是xx.next = xx.next.next;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//临时值</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> tempB <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果当前节点同下一个节点相同，那么将下一个节点删除，挪移到下下个节点</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> temp <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                tempB <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tempB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>优化版：</p>\n<p>为什么优化？增加了一个boolean的类型是否可以去掉？</p>\n<p>结论是可以去掉，建议背过。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//整理一下思路：</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//先初始化一个结束的节点，期望用结束的节点返回结果</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//注意范围的内容为result.next</span>\n        <span class=\"token comment\">//链表中删除节点的方式是xx.next = xx.next.next;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//如果相同，那么就需要循环判断下面的值是否相同。</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> temp <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"删除排序链表中的重复元素","date":"2023-03-17T15:33:14.000Z","_content":"\n给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。\n\n \n\n示例 1：\n\n\n输入：head = [1,1,2]\n输出：[1,2]\n示例 2：\n\n\n输入：head = [1,1,2,3,3]\n输出：[1,2,3]\n\n\n提示：\n\n链表中节点数目在范围 [0, 300] 内\n-100 <= Node.val <= 100\n题目数据保证链表已经按升序 排列\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/remove-duplicates-from-sorted-list\n\n解法：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        //先整理下思路：当循环到第二个时，如果发现第二个的值同第一个的值相同，则跳过第二个节点\n        ListNode result = head;\n        ListNode current = head;\n\n        while(current != null && current.next != null){\n            if(current.val == current.next.val){\n                current.next = current.next.next;\n            } else {\n                current = current.next;\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度分析：O(n)\n\n空间复杂度：O（1）\n","source":"_posts/删除排序链表中的重复元素.md","raw":"---\ntitle: 删除排序链表中的重复元素\ndate: 2023-03-17 23:33:14\ntags:\n  - 算法\n  - 链表\n---\n\n给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。\n\n \n\n示例 1：\n\n\n输入：head = [1,1,2]\n输出：[1,2]\n示例 2：\n\n\n输入：head = [1,1,2,3,3]\n输出：[1,2,3]\n\n\n提示：\n\n链表中节点数目在范围 [0, 300] 内\n-100 <= Node.val <= 100\n题目数据保证链表已经按升序 排列\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/remove-duplicates-from-sorted-list\n\n解法：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        //先整理下思路：当循环到第二个时，如果发现第二个的值同第一个的值相同，则跳过第二个节点\n        ListNode result = head;\n        ListNode current = head;\n\n        while(current != null && current.next != null){\n            if(current.val == current.next.val){\n                current.next = current.next.next;\n            } else {\n                current = current.next;\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度分析：O(n)\n\n空间复杂度：O（1）\n","slug":"删除排序链表中的重复元素","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz762027000htp4l2ux7c59u","content":"<p>给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,1,2]<br>输出：[1,2]<br>示例 2：</p>\n<p>输入：head &#x3D; [1,1,2,3,3]<br>输出：[1,2,3]</p>\n<p>提示：</p>\n<p>链表中节点数目在范围 [0, 300] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>题目数据保证链表已经按升序 排列</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list\">https://leetcode.cn/problems/remove-duplicates-from-sorted-list</a></p>\n<p>解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//先整理下思路：当循环到第二个时，如果发现第二个的值同第一个的值相同，则跳过第二个节点</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度分析：O(n)</p>\n<p>空间复杂度：O（1）</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,1,2]<br>输出：[1,2]<br>示例 2：</p>\n<p>输入：head &#x3D; [1,1,2,3,3]<br>输出：[1,2,3]</p>\n<p>提示：</p>\n<p>链表中节点数目在范围 [0, 300] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>题目数据保证链表已经按升序 排列</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list\">https://leetcode.cn/problems/remove-duplicates-from-sorted-list</a></p>\n<p>解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//先整理下思路：当循环到第二个时，如果发现第二个的值同第一个的值相同，则跳过第二个节点</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度分析：O(n)</p>\n<p>空间复杂度：O（1）</p>\n"},{"title":"力扣热题100题-160. 相交链表","date":"2023-02-24T14:32:24.000Z","_content":"\n给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。\n\n图示两个链表在节点 c1 开始相交：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)\n\n题目数据 保证 整个链式结构中不存在环。\n\n注意，函数返回结果后，链表必须 保持其原始结构 。\n\n自定义评测：\n\n评测系统 的输入如下（你设计的程序 不适用 此输入）：\n\nintersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0\nlistA - 第一个链表\nlistB - 第二个链表\nskipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数\nskipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数\n评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png)\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n输出：Intersected at '8'\n解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。\n\n\n示例 2：\n\n![img](https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png)\n\n输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Intersected at '2'\n解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n示例 3：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png)\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n\n\n提示：\n\nlistA 中节点数目为 m\nlistB 中节点数目为 n\n1 <= m, n <= 3 * 104\n1 <= Node.val <= 105\n0 <= skipA <= m\n0 <= skipB <= n\n如果 listA 和 listB 没有交点，intersectVal 为 0\n如果 listA 和 listB 有交点，intersectVal == listA[skipA] == listB[skipB]\n\n\n进阶：你能否设计一个时间复杂度 O(m + n) 、仅用 O(1) 内存的解决方案？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/intersection-of-two-linked-lists\n\n解法1：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    //初级想法：空间换时间的概念\n    //\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        List<ListNode> listA = new ArrayList<>();\n        ListNode temp = headA;\n        while(temp != null){\n            listA.add(temp);\n            temp = temp.next;\n        }\n        ListNode temp2 = headB;\n        while(temp2 != null){\n           if(listA.contains(temp2)){\n               return temp2;\n           }\n           temp2 = temp2.next;\n        }\n        return null;\n    }\n}\n```\n\n\n\n解法2：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if(headA == null || headB == null){\n            return null;\n        }\n        ListNode p1 = headA, p2 = headB;\n        while(p1 != p2){\n            p1 = p1 == null ? headB : p1.next;\n            p2 = p2 == null ? headA : p2.next;\n        }\n        return p1;\n    }\n}\n```\n\n空间复杂度 O(1) 时间复杂度为 O(n+m)\n\n根据题目意思\n如果两个链表相交，那么相交点之后的长度是相同的\n\n我们需要做的事情是，让两个链表从同距离末尾同等距离的位置开始遍历。这个位置只能是较短链表的头结点位置。\n\n","source":"_posts/力扣热题100题-160-相交链表.md","raw":"---\ntitle: 力扣热题100题-160. 相交链表\ndate: 2023-02-24 22:32:24\ntags:\n  - 算法\n  - 链表\n  - 力扣热题100题\n---\n\n给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。\n\n图示两个链表在节点 c1 开始相交：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)\n\n题目数据 保证 整个链式结构中不存在环。\n\n注意，函数返回结果后，链表必须 保持其原始结构 。\n\n自定义评测：\n\n评测系统 的输入如下（你设计的程序 不适用 此输入）：\n\nintersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0\nlistA - 第一个链表\nlistB - 第二个链表\nskipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数\nskipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数\n评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png)\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n输出：Intersected at '8'\n解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。\n\n\n示例 2：\n\n![img](https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png)\n\n输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Intersected at '2'\n解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n示例 3：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png)\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n\n\n提示：\n\nlistA 中节点数目为 m\nlistB 中节点数目为 n\n1 <= m, n <= 3 * 104\n1 <= Node.val <= 105\n0 <= skipA <= m\n0 <= skipB <= n\n如果 listA 和 listB 没有交点，intersectVal 为 0\n如果 listA 和 listB 有交点，intersectVal == listA[skipA] == listB[skipB]\n\n\n进阶：你能否设计一个时间复杂度 O(m + n) 、仅用 O(1) 内存的解决方案？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/intersection-of-two-linked-lists\n\n解法1：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    //初级想法：空间换时间的概念\n    //\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        List<ListNode> listA = new ArrayList<>();\n        ListNode temp = headA;\n        while(temp != null){\n            listA.add(temp);\n            temp = temp.next;\n        }\n        ListNode temp2 = headB;\n        while(temp2 != null){\n           if(listA.contains(temp2)){\n               return temp2;\n           }\n           temp2 = temp2.next;\n        }\n        return null;\n    }\n}\n```\n\n\n\n解法2：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if(headA == null || headB == null){\n            return null;\n        }\n        ListNode p1 = headA, p2 = headB;\n        while(p1 != p2){\n            p1 = p1 == null ? headB : p1.next;\n            p2 = p2 == null ? headA : p2.next;\n        }\n        return p1;\n    }\n}\n```\n\n空间复杂度 O(1) 时间复杂度为 O(n+m)\n\n根据题目意思\n如果两个链表相交，那么相交点之后的长度是相同的\n\n我们需要做的事情是，让两个链表从同距离末尾同等距离的位置开始遍历。这个位置只能是较短链表的头结点位置。\n\n","slug":"力扣热题100题-160-相交链表","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz762028000itp4l9umj8lt2","content":"<p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p>\n<p>图示两个链表在节点 c1 开始相交：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" alt=\"img\"></p>\n<p>题目数据 保证 整个链式结构中不存在环。</p>\n<p>注意，函数返回结果后，链表必须 保持其原始结构 。</p>\n<p>自定义评测：</p>\n<p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p>\n<p>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0<br>listA - 第一个链表<br>listB - 第二个链表<br>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数<br>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数<br>评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,6,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Intersected at ‘8’<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br>— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</p>\n<p>示例 2：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 2, listA &#x3D; [1,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1<br>输出：Intersected at ‘2’<br>解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。<br>在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。<br>示例 3：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2<br>输出：null<br>解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。<br>由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>这两个链表不相交，因此返回 null 。</p>\n<p>提示：</p>\n<p>listA 中节点数目为 m<br>listB 中节点数目为 n<br>1 &lt;&#x3D; m, n &lt;&#x3D; 3 * 104<br>1 &lt;&#x3D; Node.val &lt;&#x3D; 105<br>0 &lt;&#x3D; skipA &lt;&#x3D; m<br>0 &lt;&#x3D; skipB &lt;&#x3D; n<br>如果 listA 和 listB 没有交点，intersectVal 为 0<br>如果 listA 和 listB 有交点，intersectVal &#x3D;&#x3D; listA[skipA] &#x3D;&#x3D; listB[skipB]</p>\n<p>进阶：你能否设计一个时间复杂度 O(m + n) 、仅用 O(1) 内存的解决方案？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists\">https://leetcode.cn/problems/intersection-of-two-linked-lists</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//初级想法：空间换时间的概念</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> listA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            listA<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> temp2 <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>listA<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span> temp2<span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> headB <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> p1 <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            p1 <span class=\"token operator\">=</span> p1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> headB <span class=\"token operator\">:</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            p2 <span class=\"token operator\">=</span> p2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> headA <span class=\"token operator\">:</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度 O(1) 时间复杂度为 O(n+m)</p>\n<p>根据题目意思<br>如果两个链表相交，那么相交点之后的长度是相同的</p>\n<p>我们需要做的事情是，让两个链表从同距离末尾同等距离的位置开始遍历。这个位置只能是较短链表的头结点位置。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p>\n<p>图示两个链表在节点 c1 开始相交：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" alt=\"img\"></p>\n<p>题目数据 保证 整个链式结构中不存在环。</p>\n<p>注意，函数返回结果后，链表必须 保持其原始结构 。</p>\n<p>自定义评测：</p>\n<p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p>\n<p>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0<br>listA - 第一个链表<br>listB - 第二个链表<br>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数<br>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数<br>评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,6,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Intersected at ‘8’<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br>— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</p>\n<p>示例 2：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 2, listA &#x3D; [1,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1<br>输出：Intersected at ‘2’<br>解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。<br>在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。<br>示例 3：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2<br>输出：null<br>解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。<br>由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>这两个链表不相交，因此返回 null 。</p>\n<p>提示：</p>\n<p>listA 中节点数目为 m<br>listB 中节点数目为 n<br>1 &lt;&#x3D; m, n &lt;&#x3D; 3 * 104<br>1 &lt;&#x3D; Node.val &lt;&#x3D; 105<br>0 &lt;&#x3D; skipA &lt;&#x3D; m<br>0 &lt;&#x3D; skipB &lt;&#x3D; n<br>如果 listA 和 listB 没有交点，intersectVal 为 0<br>如果 listA 和 listB 有交点，intersectVal &#x3D;&#x3D; listA[skipA] &#x3D;&#x3D; listB[skipB]</p>\n<p>进阶：你能否设计一个时间复杂度 O(m + n) 、仅用 O(1) 内存的解决方案？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists\">https://leetcode.cn/problems/intersection-of-two-linked-lists</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//初级想法：空间换时间的概念</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> listA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            listA<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> temp2 <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>listA<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span> temp2<span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> headB <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> p1 <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            p1 <span class=\"token operator\">=</span> p1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> headB <span class=\"token operator\">:</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            p2 <span class=\"token operator\">=</span> p2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> headA <span class=\"token operator\">:</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间复杂度 O(1) 时间复杂度为 O(n+m)</p>\n<p>根据题目意思<br>如果两个链表相交，那么相交点之后的长度是相同的</p>\n<p>我们需要做的事情是，让两个链表从同距离末尾同等距离的位置开始遍历。这个位置只能是较短链表的头结点位置。</p>\n"},{"title":"力扣刷题列表","date":"2023-01-28T14:35:53.000Z","_content":"\n| 状态 | 题目                                                         | 简述                     | 难度 |\n| ---- | ------------------------------------------------------------ | ------------------------ | ---- |\n| done | [617. 合并二叉树](https://leetcode.cn/problems/merge-two-binary-trees/) | 二叉树的深度遍历         | 简单 |\n| done | [二叉树直径](https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/) | 二叉树的深度遍历         | 简单 |\n| done | [汉明距离](https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/) | 异或运算                 | 简单 |\n| done | [找到所有数组中消失的数字](https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/) | 数组操作                 | 简单 |\n| done | [比特位计数](https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/) | 二进制(牢记n&(n-1))      | 简单 |\n| done | [移动零](https://fengtingxin.github.io/2023/02/09/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%A7%BB%E5%8A%A8%E9%9B%B6/) | 指针                     | 简单 |\n| done | [回文链表](https://fengtingxin.github.io/2023/02/16/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/) | 链表->中间节点、链表翻转 | 简单 |\n| done | [翻转二叉树](https://fengtingxin.github.io/2023/02/18/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/) | 二叉树                   | 简单 |\n| done | [反转链表](https://fengtingxin.github.io/2023/02/20/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/) | 链表                     | 简单 |\n| done | [多数元素](https://fengtingxin.github.io/2023/02/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/) | 数组，同归于尽消杀法     | 简单 |\n| done | [多数元素②](https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/) | 数组                     | 简单 |\n| done | [相交链表](https://fengtingxin.github.io/2023/02/24/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/) | 链表                     | 简单 |\n| done | [环形链表](https://fengtingxin.github.io/2023/02/28/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/) | 链表                     | 简单 |\n| done | [只出现一次的数字](https://fengtingxin.github.io/2023/03/01/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/) | 异或                     | 简单 |\n| done | [只出现一次的数字②](https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/) | 异或                     | 简单 |\n| done | [只出现一次的数字③](https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/) | 异或                     | 简单 |\n| done | [买卖股票的最佳时机](https://fengtingxin.github.io/2023/03/15/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/) | 简单的动态规划           |      |\n| done | [删除排序链表中的重复元素](https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/) | 链表                     |      |\n| done | [删除排序链表中的重复元素②](https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-II/) | 链表                     |      |\n| done | [二叉树的最大深度](https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/) | 二叉树-前序遍历          |      |\n| done | [对称二叉树](https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/) | 二叉树                   |      |\n| done | [二叉树的中序遍历](https://fengtingxin.github.io/2023/03/23/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/) | 二叉树                   |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n\n","source":"_posts/力扣刷题列表.md","raw":"---\ntitle: 力扣刷题列表\ndate: 2023-01-28 22:35:53\ntags:\n  - 算法\n  - 算法\n  - 力扣热题100题\n---\n\n| 状态 | 题目                                                         | 简述                     | 难度 |\n| ---- | ------------------------------------------------------------ | ------------------------ | ---- |\n| done | [617. 合并二叉树](https://leetcode.cn/problems/merge-two-binary-trees/) | 二叉树的深度遍历         | 简单 |\n| done | [二叉树直径](https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/) | 二叉树的深度遍历         | 简单 |\n| done | [汉明距离](https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/) | 异或运算                 | 简单 |\n| done | [找到所有数组中消失的数字](https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/) | 数组操作                 | 简单 |\n| done | [比特位计数](https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/) | 二进制(牢记n&(n-1))      | 简单 |\n| done | [移动零](https://fengtingxin.github.io/2023/02/09/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%A7%BB%E5%8A%A8%E9%9B%B6/) | 指针                     | 简单 |\n| done | [回文链表](https://fengtingxin.github.io/2023/02/16/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/) | 链表->中间节点、链表翻转 | 简单 |\n| done | [翻转二叉树](https://fengtingxin.github.io/2023/02/18/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/) | 二叉树                   | 简单 |\n| done | [反转链表](https://fengtingxin.github.io/2023/02/20/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/) | 链表                     | 简单 |\n| done | [多数元素](https://fengtingxin.github.io/2023/02/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/) | 数组，同归于尽消杀法     | 简单 |\n| done | [多数元素②](https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/) | 数组                     | 简单 |\n| done | [相交链表](https://fengtingxin.github.io/2023/02/24/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/) | 链表                     | 简单 |\n| done | [环形链表](https://fengtingxin.github.io/2023/02/28/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/) | 链表                     | 简单 |\n| done | [只出现一次的数字](https://fengtingxin.github.io/2023/03/01/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/) | 异或                     | 简单 |\n| done | [只出现一次的数字②](https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/) | 异或                     | 简单 |\n| done | [只出现一次的数字③](https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/) | 异或                     | 简单 |\n| done | [买卖股票的最佳时机](https://fengtingxin.github.io/2023/03/15/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/) | 简单的动态规划           |      |\n| done | [删除排序链表中的重复元素](https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/) | 链表                     |      |\n| done | [删除排序链表中的重复元素②](https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-II/) | 链表                     |      |\n| done | [二叉树的最大深度](https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/) | 二叉树-前序遍历          |      |\n| done | [对称二叉树](https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/) | 二叉树                   |      |\n| done | [二叉树的中序遍历](https://fengtingxin.github.io/2023/03/23/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/) | 二叉树                   |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n|      |                                                              |                          |      |\n\n","slug":"力扣刷题列表","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz762029000ktp4lhlqv21gn","content":"<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>题目</th>\n<th>简述</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>done</td>\n<td><a href=\"https://leetcode.cn/problems/merge-two-binary-trees/\">617. 合并二叉树</a></td>\n<td>二叉树的深度遍历</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/\">二叉树直径</a></td>\n<td>二叉树的深度遍历</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/\">汉明距离</a></td>\n<td>异或运算</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/\">找到所有数组中消失的数字</a></td>\n<td>数组操作</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/\">比特位计数</a></td>\n<td>二进制(牢记n&amp;(n-1))</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/09/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%A7%BB%E5%8A%A8%E9%9B%B6/\">移动零</a></td>\n<td>指针</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/16/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/\">回文链表</a></td>\n<td>链表-&gt;中间节点、链表翻转</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/18/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/\">翻转二叉树</a></td>\n<td>二叉树</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/20/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/\">反转链表</a></td>\n<td>链表</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/\">多数元素</a></td>\n<td>数组，同归于尽消杀法</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/\">多数元素②</a></td>\n<td>数组</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/24/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/\">相交链表</a></td>\n<td>链表</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/28/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/\">环形链表</a></td>\n<td>链表</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/01/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/\">只出现一次的数字</a></td>\n<td>异或</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/\">只出现一次的数字②</a></td>\n<td>异或</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/\">只出现一次的数字③</a></td>\n<td>异或</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/15/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">买卖股票的最佳时机</a></td>\n<td>简单的动态规划</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/\">删除排序链表中的重复元素</a></td>\n<td>链表</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-II/\">删除排序链表中的重复元素②</a></td>\n<td>链表</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/\">二叉树的最大深度</a></td>\n<td>二叉树-前序遍历</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/\">对称二叉树</a></td>\n<td>二叉树</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/23/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/\">二叉树的中序遍历</a></td>\n<td>二叉树</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>题目</th>\n<th>简述</th>\n<th>难度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>done</td>\n<td><a href=\"https://leetcode.cn/problems/merge-two-binary-trees/\">617. 合并二叉树</a></td>\n<td>二叉树的深度遍历</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/\">二叉树直径</a></td>\n<td>二叉树的深度遍历</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/\">汉明距离</a></td>\n<td>异或运算</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/\">找到所有数组中消失的数字</a></td>\n<td>数组操作</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/\">比特位计数</a></td>\n<td>二进制(牢记n&amp;(n-1))</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/09/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%A7%BB%E5%8A%A8%E9%9B%B6/\">移动零</a></td>\n<td>指针</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/16/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/\">回文链表</a></td>\n<td>链表-&gt;中间节点、链表翻转</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/18/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/\">翻转二叉树</a></td>\n<td>二叉树</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/20/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/\">反转链表</a></td>\n<td>链表</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/\">多数元素</a></td>\n<td>数组，同归于尽消杀法</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/\">多数元素②</a></td>\n<td>数组</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/24/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/\">相交链表</a></td>\n<td>链表</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/02/28/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/\">环形链表</a></td>\n<td>链表</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/01/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/\">只出现一次的数字</a></td>\n<td>异或</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/\">只出现一次的数字②</a></td>\n<td>异或</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/\">只出现一次的数字③</a></td>\n<td>异或</td>\n<td>简单</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/15/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/\">买卖股票的最佳时机</a></td>\n<td>简单的动态规划</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/\">删除排序链表中的重复元素</a></td>\n<td>链表</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/17/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-II/\">删除排序链表中的重复元素②</a></td>\n<td>链表</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/\">二叉树的最大深度</a></td>\n<td>二叉树-前序遍历</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/22/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/\">对称二叉树</a></td>\n<td>二叉树</td>\n<td></td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/03/23/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/\">二叉树的中序遍历</a></td>\n<td>二叉树</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"力扣热题100题-LRU 缓存","date":"2023-04-20T15:47:27.000Z","_content":"\n请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：\nLRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存\nint get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。\nvoid put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。\n函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。\n\n \n\n示例：\n\n输入\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n输出\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n解释\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // 缓存是 {1=1}\nlRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\nlRUCache.get(1);    // 返回 1\nlRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nlRUCache.get(2);    // 返回 -1 (未找到)\nlRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nlRUCache.get(1);    // 返回 -1 (未找到)\nlRUCache.get(3);    // 返回 3\nlRUCache.get(4);    // 返回 4\n\n\n提示：\n\n1 <= capacity <= 3000\n0 <= key <= 10000\n0 <= value <= 105\n最多调用 2 * 105 次 get 和 put\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/lru-cache\n\n\n\n\n\n解法1：\n\n```java\nclass LRUCache extends LinkedHashMap<Integer,Integer>{\n\n    private int capacity = 0;\n\n    public LRUCache(int capacity) {\n\n        //capacity设置容量。\n        super(capacity, 0.75F, true);\n\n        this.capacity = capacity;\n    }\n    \n    public int get(int key) {\n        return super.getOrDefault(key, -1);\n    }\n    \n    public void put(int key, int value) {\n        super.put(key, value);\n    }\n\n    protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {\n        return size() > capacity; \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n```\n\n","source":"_posts/力扣热题100题-LRU-缓存.md","raw":"---\ntitle: 力扣热题100题-LRU 缓存\ndate: 2023-04-20 23:47:27\ntags:\n  - 算法\n  - 链表\n  - 力扣热题100题\n---\n\n请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：\nLRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存\nint get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。\nvoid put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。\n函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。\n\n \n\n示例：\n\n输入\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n输出\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n解释\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // 缓存是 {1=1}\nlRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\nlRUCache.get(1);    // 返回 1\nlRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nlRUCache.get(2);    // 返回 -1 (未找到)\nlRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nlRUCache.get(1);    // 返回 -1 (未找到)\nlRUCache.get(3);    // 返回 3\nlRUCache.get(4);    // 返回 4\n\n\n提示：\n\n1 <= capacity <= 3000\n0 <= key <= 10000\n0 <= value <= 105\n最多调用 2 * 105 次 get 和 put\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/lru-cache\n\n\n\n\n\n解法1：\n\n```java\nclass LRUCache extends LinkedHashMap<Integer,Integer>{\n\n    private int capacity = 0;\n\n    public LRUCache(int capacity) {\n\n        //capacity设置容量。\n        super(capacity, 0.75F, true);\n\n        this.capacity = capacity;\n    }\n    \n    public int get(int key) {\n        return super.getOrDefault(key, -1);\n    }\n    \n    public void put(int key, int value) {\n        super.put(key, value);\n    }\n\n    protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {\n        return size() > capacity; \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n```\n\n","slug":"力扣热题100题-LRU-缓存","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz762029000mtp4lg2e81s1m","content":"<p>请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。<br>实现 LRUCache 类：<br>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存<br>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。<br>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。<br>函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。</p>\n<p>示例：</p>\n<p>输入<br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>输出<br>[null, null, null, 1, null, -1, null, -1, 3, 4]</p>\n<p>解释<br>LRUCache lRUCache &#x3D; new LRUCache(2);<br>lRUCache.put(1, 1); &#x2F;&#x2F; 缓存是 {1&#x3D;1}<br>lRUCache.put(2, 2); &#x2F;&#x2F; 缓存是 {1&#x3D;1, 2&#x3D;2}<br>lRUCache.get(1);    &#x2F;&#x2F; 返回 1<br>lRUCache.put(3, 3); &#x2F;&#x2F; 该操作会使得关键字 2 作废，缓存是 {1&#x3D;1, 3&#x3D;3}<br>lRUCache.get(2);    &#x2F;&#x2F; 返回 -1 (未找到)<br>lRUCache.put(4, 4); &#x2F;&#x2F; 该操作会使得关键字 1 作废，缓存是 {4&#x3D;4, 3&#x3D;3}<br>lRUCache.get(1);    &#x2F;&#x2F; 返回 -1 (未找到)<br>lRUCache.get(3);    &#x2F;&#x2F; 返回 3<br>lRUCache.get(4);    &#x2F;&#x2F; 返回 4</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; capacity &lt;&#x3D; 3000<br>0 &lt;&#x3D; key &lt;&#x3D; 10000<br>0 &lt;&#x3D; value &lt;&#x3D; 105<br>最多调用 2 * 105 次 get 和 put</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/lru-cache\">https://leetcode.cn/problems/lru-cache</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//capacity设置容量。</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> <span class=\"token number\">0.75F</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeEldestEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> capacity<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。<br>实现 LRUCache 类：<br>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存<br>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。<br>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。<br>函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。</p>\n<p>示例：</p>\n<p>输入<br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>输出<br>[null, null, null, 1, null, -1, null, -1, 3, 4]</p>\n<p>解释<br>LRUCache lRUCache &#x3D; new LRUCache(2);<br>lRUCache.put(1, 1); &#x2F;&#x2F; 缓存是 {1&#x3D;1}<br>lRUCache.put(2, 2); &#x2F;&#x2F; 缓存是 {1&#x3D;1, 2&#x3D;2}<br>lRUCache.get(1);    &#x2F;&#x2F; 返回 1<br>lRUCache.put(3, 3); &#x2F;&#x2F; 该操作会使得关键字 2 作废，缓存是 {1&#x3D;1, 3&#x3D;3}<br>lRUCache.get(2);    &#x2F;&#x2F; 返回 -1 (未找到)<br>lRUCache.put(4, 4); &#x2F;&#x2F; 该操作会使得关键字 1 作废，缓存是 {4&#x3D;4, 3&#x3D;3}<br>lRUCache.get(1);    &#x2F;&#x2F; 返回 -1 (未找到)<br>lRUCache.get(3);    &#x2F;&#x2F; 返回 3<br>lRUCache.get(4);    &#x2F;&#x2F; 返回 4</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; capacity &lt;&#x3D; 3000<br>0 &lt;&#x3D; key &lt;&#x3D; 10000<br>0 &lt;&#x3D; value &lt;&#x3D; 105<br>最多调用 2 * 105 次 get 和 put</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/lru-cache\">https://leetcode.cn/problems/lru-cache</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//capacity设置容量。</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> <span class=\"token number\">0.75F</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeEldestEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> capacity<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-两数之和","date":"2022-06-16T15:15:58.000Z","_content":"\n给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。 \n\n示例 1：\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n示例 2：\n\n```\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n```\n\n示例 3：\n\n```\n输入：nums = [3,3], target = 6\n输出：[0,1]\n```\n\n\n提示：\n\n- 2 <= nums.length <= 104\n- -109 <= nums[i] <= 109\n- -109 <= target <= 109\n- 只会存在一个有效答案\n\n进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？\n来源：力扣   链接：https://leetcode.cn/problems/two-sum\n\n\n\n**最简单的方案-暴力解法**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n  //暴力解法不解释\n        for(int i = 0 ; i< nums.length; i++){\n            for(int j = i+1 ; j < nums.length ; j++){\n                if(nums[i]+nums[j] == target){\n                    return new int[]{i,j};\n                }\n            }\n        }\n        return null;\n    }\n```\n\n时间复杂度：O(n ^ 2)  空间复杂度：O(1)\n\n\n\n**减少时间复杂度，增加空间复杂度**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i = 0;i < nums.length ; i++){\n            if(map.containsKey(target - nums[i])){\n                return new int[]{map.get(target - nums[i]),i}; \n            } else {\n                map.put(nums[i],i);\n            }\n        }\n        return null;\n    }\n```\n\n用空间换时间，是大多数降低时间复杂度的方法\n\n时间复杂度：O(n)  空间复杂度：O(n) \n","source":"_posts/力扣热题100题-两数之和.md","raw":"---\ntitle: 力扣热题100题-两数之和\ndate: 2022-06-16 23:15:58\ntags:\n  - 算法\n  - 数组\n  - 力扣热题100题\n---\n\n给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。 \n\n示例 1：\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n示例 2：\n\n```\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n```\n\n示例 3：\n\n```\n输入：nums = [3,3], target = 6\n输出：[0,1]\n```\n\n\n提示：\n\n- 2 <= nums.length <= 104\n- -109 <= nums[i] <= 109\n- -109 <= target <= 109\n- 只会存在一个有效答案\n\n进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？\n来源：力扣   链接：https://leetcode.cn/problems/two-sum\n\n\n\n**最简单的方案-暴力解法**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n  //暴力解法不解释\n        for(int i = 0 ; i< nums.length; i++){\n            for(int j = i+1 ; j < nums.length ; j++){\n                if(nums[i]+nums[j] == target){\n                    return new int[]{i,j};\n                }\n            }\n        }\n        return null;\n    }\n```\n\n时间复杂度：O(n ^ 2)  空间复杂度：O(1)\n\n\n\n**减少时间复杂度，增加空间复杂度**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i = 0;i < nums.length ; i++){\n            if(map.containsKey(target - nums[i])){\n                return new int[]{map.get(target - nums[i]),i}; \n            } else {\n                map.put(nums[i],i);\n            }\n        }\n        return null;\n    }\n```\n\n用空间换时间，是大多数降低时间复杂度的方法\n\n时间复杂度：O(n)  空间复杂度：O(n) \n","slug":"力扣热题100题-两数之和","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202a000ptp4lamjpft8e","content":"<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。 </p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,2,4], target &#x3D; 6\n输出：[1,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,3], target &#x3D; 6\n输出：[0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<ul>\n<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 104</li>\n<li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>\n<li>-109 &lt;&#x3D; target &lt;&#x3D; 109</li>\n<li>只会存在一个有效答案</li>\n</ul>\n<p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？<br>来源：力扣   链接：<a href=\"https://leetcode.cn/problems/two-sum\">https://leetcode.cn/problems/two-sum</a></p>\n<p><strong>最简单的方案-暴力解法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//暴力解法不解释</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n ^ 2)  空间复杂度：O(1)</p>\n<p><strong>减少时间复杂度，增加空间复杂度</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用空间换时间，是大多数降低时间复杂度的方法</p>\n<p>时间复杂度：O(n)  空间复杂度：O(n) </p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。 </p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,2,4], target &#x3D; 6\n输出：[1,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,3], target &#x3D; 6\n输出：[0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<ul>\n<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 104</li>\n<li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>\n<li>-109 &lt;&#x3D; target &lt;&#x3D; 109</li>\n<li>只会存在一个有效答案</li>\n</ul>\n<p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？<br>来源：力扣   链接：<a href=\"https://leetcode.cn/problems/two-sum\">https://leetcode.cn/problems/two-sum</a></p>\n<p><strong>最简单的方案-暴力解法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//暴力解法不解释</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n ^ 2)  空间复杂度：O(1)</p>\n<p><strong>减少时间复杂度，增加空间复杂度</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用空间换时间，是大多数降低时间复杂度的方法</p>\n<p>时间复杂度：O(n)  空间复杂度：O(n) </p>\n"},{"title":"力扣热题100题-两数相加","date":"2023-03-25T15:23:43.000Z","_content":"\n给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。\n\n请你将两个数相加，并以相同形式返回一个表示和的链表。\n\n你可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg)\n\n\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n示例 2：\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n示例 3：\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n\n\n提示：\n\n每个链表中的节点数在范围 [1, 100] 内\n0 <= Node.val <= 9\n题目数据保证列表表示的数字不含前导零\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/add-two-numbers\n\n\n\n解题：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        boolean judge = false;\n        ListNode current = new ListNode(0,null);\n        ListNode result = current;\n        while(l1 != null || l2 != null){\n            int sum = 0;\n            if(l1 != null && l2 != null){\n                sum = l1.val + l2.val;\n            } else if(l1 != null){\n                sum = l1.val;\n            } else {\n                sum = l2.val;\n            }\n            if(judge){\n                sum= sum+1;\n            }\n            current.next = new ListNode(sum%10,null);\n            current = current.next;\n            if(sum >= 10){\n                judge = true;\n            } else {\n                judge = false;\n            }\n            if(l1 != null){\n                l1 = l1.next;\n            }\n            if(l2 != null){\n                l2 = l2.next;\n            }\n        }\n        if(judge){\n            current.next = new ListNode(1,null);\n        }\n        return result.next;\n    }\n}\n```\n\n时间复杂度：O(n)\n\n空间复杂度：O（1）\n","source":"_posts/力扣热题100题-两数相加.md","raw":"---\ntitle: 力扣热题100题-两数相加\ndate: 2023-03-25 23:23:43\ntags:\n  - 算法\n  - 链表\n  - 力扣热题100题\n---\n\n给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。\n\n请你将两个数相加，并以相同形式返回一个表示和的链表。\n\n你可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg)\n\n\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n示例 2：\n\n输入：l1 = [0], l2 = [0]\n输出：[0]\n示例 3：\n\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n\n\n提示：\n\n每个链表中的节点数在范围 [1, 100] 内\n0 <= Node.val <= 9\n题目数据保证列表表示的数字不含前导零\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/add-two-numbers\n\n\n\n解题：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        boolean judge = false;\n        ListNode current = new ListNode(0,null);\n        ListNode result = current;\n        while(l1 != null || l2 != null){\n            int sum = 0;\n            if(l1 != null && l2 != null){\n                sum = l1.val + l2.val;\n            } else if(l1 != null){\n                sum = l1.val;\n            } else {\n                sum = l2.val;\n            }\n            if(judge){\n                sum= sum+1;\n            }\n            current.next = new ListNode(sum%10,null);\n            current = current.next;\n            if(sum >= 10){\n                judge = true;\n            } else {\n                judge = false;\n            }\n            if(l1 != null){\n                l1 = l1.next;\n            }\n            if(l2 != null){\n                l2 = l2.next;\n            }\n        }\n        if(judge){\n            current.next = new ListNode(1,null);\n        }\n        return result.next;\n    }\n}\n```\n\n时间复杂度：O(n)\n\n空间复杂度：O（1）\n","slug":"力扣热题100题-两数相加","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202a000rtp4l29hmgrn3","content":"<p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"img\"></p>\n<p>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.<br>示例 2：</p>\n<p>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]<br>示例 3：</p>\n<p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>\n<p>提示：</p>\n<p>每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;&#x3D; Node.val &lt;&#x3D; 9<br>题目数据保证列表表示的数字不含前导零</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/add-two-numbers\">https://leetcode.cn/problems/add-two-numbers</a></p>\n<p>解题：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> judge <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>judge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum<span class=\"token operator\">=</span> sum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                judge <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                judge <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>judge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O（1）</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"img\"></p>\n<p>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.<br>示例 2：</p>\n<p>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]<br>示例 3：</p>\n<p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p>\n<p>提示：</p>\n<p>每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;&#x3D; Node.val &lt;&#x3D; 9<br>题目数据保证列表表示的数字不含前导零</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/add-two-numbers\">https://leetcode.cn/problems/add-two-numbers</a></p>\n<p>解题：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> judge <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>judge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                sum<span class=\"token operator\">=</span> sum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                judge <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                judge <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>judge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O（1）</p>\n"},{"title":"力扣热题100题-买卖股票的最佳时机","date":"2023-03-15T14:51:05.000Z","_content":"\n给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。\n\n你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。\n\n返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。\n\n \n\n示例 1：\n\n输入：[7,1,5,3,6,4]\n输出：5\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\n示例 2：\n\n输入：prices = [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 没有交易完成, 所以最大利润为 0。\n\n\n提示：\n\n1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^4\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock\n\n\n\n解法1：暴力解法，解法的结果是超时.\n\n```java\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int result = 0;\n        for(int i = 0; i < prices.length-1; i++){\n            for(int j = i+1; j < prices.length;j++){\n                int temp = prices[j] - prices[i];\n                if( temp > result){\n                    result = temp;\n                }\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度是O(n^2) 空间复杂度O(1)\n\n\n\n那么我们解决这种问题呢？\n\n这是一个明显的动态规划的问题：\n\n","source":"_posts/力扣热题100题-买卖股票的最佳时机.md","raw":"---\ntitle: 力扣热题100题-买卖股票的最佳时机\ndate: 2023-03-15 22:51:05\ntags:\n  - 算法\n  - 力扣热题100题\n  - 动态规划\n---\n\n给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。\n\n你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。\n\n返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。\n\n \n\n示例 1：\n\n输入：[7,1,5,3,6,4]\n输出：5\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\n示例 2：\n\n输入：prices = [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 没有交易完成, 所以最大利润为 0。\n\n\n提示：\n\n1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^4\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock\n\n\n\n解法1：暴力解法，解法的结果是超时.\n\n```java\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int result = 0;\n        for(int i = 0; i < prices.length-1; i++){\n            for(int j = i+1; j < prices.length;j++){\n                int temp = prices[j] - prices[i];\n                if( temp > result){\n                    result = temp;\n                }\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度是O(n^2) 空间复杂度O(1)\n\n\n\n那么我们解决这种问题呢？\n\n这是一个明显的动态规划的问题：\n\n","slug":"力扣热题100题-买卖股票的最佳时机","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202b000utp4lch86cz3g","content":"<p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p>\n<p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>\n<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p>\n<p>示例 1：</p>\n<p>输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。<br>     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br>示例 2：</p>\n<p>输入：prices &#x3D; [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; prices.length &lt;&#x3D; 10^5<br>0 &lt;&#x3D; prices[i] &lt;&#x3D; 10^4</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock\">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock</a></p>\n<p>解法1：暴力解法，解法的结果是超时.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> temp <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    result <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度是O(n^2) 空间复杂度O(1)</p>\n<p>那么我们解决这种问题呢？</p>\n<p>这是一个明显的动态规划的问题：</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p>\n<p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>\n<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p>\n<p>示例 1：</p>\n<p>输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。<br>     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br>示例 2：</p>\n<p>输入：prices &#x3D; [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; prices.length &lt;&#x3D; 10^5<br>0 &lt;&#x3D; prices[i] &lt;&#x3D; 10^4</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock\">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock</a></p>\n<p>解法1：暴力解法，解法的结果是超时.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> temp <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    result <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度是O(n^2) 空间复杂度O(1)</p>\n<p>那么我们解决这种问题呢？</p>\n<p>这是一个明显的动态规划的问题：</p>\n"},{"title":"2956. 找到两个数组中的公共元素","date":"2024-07-16T15:16:30.000Z","_content":"\n给你两个下标从 **0** 开始的整数数组 `nums1` 和 `nums2` ，它们分别含有 `n` 和 `m` 个元素。请你计算以下两个数值：\n\n- `answer1`：使得 `nums1[i]` 在 `nums2` 中出现的下标 `i` 的数量。\n- `answer2`：使得 `nums2[i]` 在 `nums1` 中出现的下标 `i` 的数量。\n\n返回 `[answer1, answer2]`。\n\n \n\n**示例 1：**\n\n**输入：**nums1 = [2,3,2], nums2 = [1,2]\n\n**输出：**[2,1]\n\n**解释：**\n\n![img](https://assets.leetcode.com/uploads/2024/05/26/3488_find_common_elements_between_two_arrays-t1.gif)\n\n**示例 2：**\n\n**输入：**nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]\n\n**输出：**[3,4]\n\n**解释：**\n\n`nums1` 中下标在 1，2，3 的元素在 `nums2` 中也存在。所以 `answer1` 为 3。\n\n`nums2` 中下标在 0，1，3，4 的元素在 `nums1` 中也存在。所以 `answer2` 为 4。\n\n**示例 3：**\n\n**输入：**nums1 = [3,4,2,3], nums2 = [1,5]\n\n**输出：**[0,0]\n\n**解释：**\n\n`nums1` 和 `nums2` 中没有相同的数字，所以答案是 [0,0]。\n\n \n\n**提示：**\n\n- `n == nums1.length`\n- `m == nums2.length`\n- `1 <= n, m <= 100`\n- `1 <= nums1[i], nums2[i] <= 100`\n\n\n\n开始喽！！！7.16开始刷题。\n\n```java\nclass Solution {\n    public int[] findIntersectionValues(int[] nums1, int[] nums2) {\n        \n        Map<Integer,Integer> nums1Have = new HashMap<>();\n\n        Map<Integer,Integer> nums2Have = new HashMap<>();\n        //得到相同数字出现了几次.\n        for(int num : nums1){\n            nums1Have.put(num,nums1Have.getOrDefault(num,0) + 1);\n        }\n\n        System.out.println(nums1Have);\n\n        for(int num : nums2){\n            nums2Have.put(num,nums2Have.getOrDefault(num,0) + 1);\n        }\n        System.out.println(nums2Have);\n\n        int result[] = new int[2];\n        for(int num : nums2){\n            result[0] = result[0]+nums1Have.getOrDefault(num,0);\n            nums1Have.remove(num);\n        }\n\n        for(int num : nums1){\n            result[1] = result[1]+nums2Have.getOrDefault(num,0);\n            nums2Have.remove(num);\n        }\n        return result;\n    }\n}\n```\n\n","source":"_posts/2956-找到两个数组中的公共元素.md","raw":"---\ntitle: 2956. 找到两个数组中的公共元素\ndate: 2024-07-16 23:16:30\ncategories:\n  - 算法\ntags:\n  - 算法\n  - 哈希表\n  - 数组\n---\n\n给你两个下标从 **0** 开始的整数数组 `nums1` 和 `nums2` ，它们分别含有 `n` 和 `m` 个元素。请你计算以下两个数值：\n\n- `answer1`：使得 `nums1[i]` 在 `nums2` 中出现的下标 `i` 的数量。\n- `answer2`：使得 `nums2[i]` 在 `nums1` 中出现的下标 `i` 的数量。\n\n返回 `[answer1, answer2]`。\n\n \n\n**示例 1：**\n\n**输入：**nums1 = [2,3,2], nums2 = [1,2]\n\n**输出：**[2,1]\n\n**解释：**\n\n![img](https://assets.leetcode.com/uploads/2024/05/26/3488_find_common_elements_between_two_arrays-t1.gif)\n\n**示例 2：**\n\n**输入：**nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]\n\n**输出：**[3,4]\n\n**解释：**\n\n`nums1` 中下标在 1，2，3 的元素在 `nums2` 中也存在。所以 `answer1` 为 3。\n\n`nums2` 中下标在 0，1，3，4 的元素在 `nums1` 中也存在。所以 `answer2` 为 4。\n\n**示例 3：**\n\n**输入：**nums1 = [3,4,2,3], nums2 = [1,5]\n\n**输出：**[0,0]\n\n**解释：**\n\n`nums1` 和 `nums2` 中没有相同的数字，所以答案是 [0,0]。\n\n \n\n**提示：**\n\n- `n == nums1.length`\n- `m == nums2.length`\n- `1 <= n, m <= 100`\n- `1 <= nums1[i], nums2[i] <= 100`\n\n\n\n开始喽！！！7.16开始刷题。\n\n```java\nclass Solution {\n    public int[] findIntersectionValues(int[] nums1, int[] nums2) {\n        \n        Map<Integer,Integer> nums1Have = new HashMap<>();\n\n        Map<Integer,Integer> nums2Have = new HashMap<>();\n        //得到相同数字出现了几次.\n        for(int num : nums1){\n            nums1Have.put(num,nums1Have.getOrDefault(num,0) + 1);\n        }\n\n        System.out.println(nums1Have);\n\n        for(int num : nums2){\n            nums2Have.put(num,nums2Have.getOrDefault(num,0) + 1);\n        }\n        System.out.println(nums2Have);\n\n        int result[] = new int[2];\n        for(int num : nums2){\n            result[0] = result[0]+nums1Have.getOrDefault(num,0);\n            nums1Have.remove(num);\n        }\n\n        for(int num : nums1){\n            result[1] = result[1]+nums2Have.getOrDefault(num,0);\n            nums2Have.remove(num);\n        }\n        return result;\n    }\n}\n```\n\n","slug":"2956-找到两个数组中的公共元素","published":1,"updated":"2024-07-20T15:41:42.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202c000wtp4lcazog9fc","content":"<p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，它们分别含有 <code>n</code> 和 <code>m</code> 个元素。请你计算以下两个数值：</p>\n<ul>\n<li><code>answer1</code>：使得 <code>nums1[i]</code> 在 <code>nums2</code> 中出现的下标 <code>i</code> 的数量。</li>\n<li><code>answer2</code>：使得 <code>nums2[i]</code> 在 <code>nums1</code> 中出现的下标 <code>i</code> 的数量。</li>\n</ul>\n<p>返回 <code>[answer1, answer2]</code>。</p>\n<p><strong>示例 1：</strong></p>\n<p><strong>输入：</strong>nums1 &#x3D; [2,3,2], nums2 &#x3D; [1,2]</p>\n<p><strong>输出：</strong>[2,1]</p>\n<p><strong>解释：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/26/3488_find_common_elements_between_two_arrays-t1.gif\" alt=\"img\"></p>\n<p><strong>示例 2：</strong></p>\n<p><strong>输入：</strong>nums1 &#x3D; [4,3,2,3,1], nums2 &#x3D; [2,2,5,2,3,6]</p>\n<p><strong>输出：</strong>[3,4]</p>\n<p><strong>解释：</strong></p>\n<p><code>nums1</code> 中下标在 1，2，3 的元素在 <code>nums2</code> 中也存在。所以 <code>answer1</code> 为 3。</p>\n<p><code>nums2</code> 中下标在 0，1，3，4 的元素在 <code>nums1</code> 中也存在。所以 <code>answer2</code> 为 4。</p>\n<p><strong>示例 3：</strong></p>\n<p><strong>输入：</strong>nums1 &#x3D; [3,4,2,3], nums2 &#x3D; [1,5]</p>\n<p><strong>输出：</strong>[0,0]</p>\n<p><strong>解释：</strong></p>\n<p><code>nums1</code> 和 <code>nums2</code> 中没有相同的数字，所以答案是 [0,0]。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == nums1.length</code></li>\n<li><code>m == nums2.length</code></li>\n<li><code>1 &lt;= n, m &lt;= 100</code></li>\n<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 100</code></li>\n</ul>\n<p>开始喽！！！7.16开始刷题。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">findIntersectionValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums1Have <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums2Have <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到相同数字出现了几次.</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nums1Have<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nums2Have<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，它们分别含有 <code>n</code> 和 <code>m</code> 个元素。请你计算以下两个数值：</p>\n<ul>\n<li><code>answer1</code>：使得 <code>nums1[i]</code> 在 <code>nums2</code> 中出现的下标 <code>i</code> 的数量。</li>\n<li><code>answer2</code>：使得 <code>nums2[i]</code> 在 <code>nums1</code> 中出现的下标 <code>i</code> 的数量。</li>\n</ul>\n<p>返回 <code>[answer1, answer2]</code>。</p>\n<p><strong>示例 1：</strong></p>\n<p><strong>输入：</strong>nums1 &#x3D; [2,3,2], nums2 &#x3D; [1,2]</p>\n<p><strong>输出：</strong>[2,1]</p>\n<p><strong>解释：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/26/3488_find_common_elements_between_two_arrays-t1.gif\" alt=\"img\"></p>\n<p><strong>示例 2：</strong></p>\n<p><strong>输入：</strong>nums1 &#x3D; [4,3,2,3,1], nums2 &#x3D; [2,2,5,2,3,6]</p>\n<p><strong>输出：</strong>[3,4]</p>\n<p><strong>解释：</strong></p>\n<p><code>nums1</code> 中下标在 1，2，3 的元素在 <code>nums2</code> 中也存在。所以 <code>answer1</code> 为 3。</p>\n<p><code>nums2</code> 中下标在 0，1，3，4 的元素在 <code>nums1</code> 中也存在。所以 <code>answer2</code> 为 4。</p>\n<p><strong>示例 3：</strong></p>\n<p><strong>输入：</strong>nums1 &#x3D; [3,4,2,3], nums2 &#x3D; [1,5]</p>\n<p><strong>输出：</strong>[0,0]</p>\n<p><strong>解释：</strong></p>\n<p><code>nums1</code> 和 <code>nums2</code> 中没有相同的数字，所以答案是 [0,0]。</p>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == nums1.length</code></li>\n<li><code>m == nums2.length</code></li>\n<li><code>1 &lt;= n, m &lt;= 100</code></li>\n<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 100</code></li>\n</ul>\n<p>开始喽！！！7.16开始刷题。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">findIntersectionValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums1Have <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums2Have <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到相同数字出现了几次.</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nums1Have<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nums2Have<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nums1Have<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nums2Have<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-二叉树的中序遍历","date":"2023-03-23T15:34:21.000Z","_content":"\n给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。\n\n ![img](https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg)\n\n示例 1：\n\n输入：root = [1,null,2,3]\n输出：[1,3,2]\n示例 2：\n\n输入：root = []\n输出：[]\n示例 3：\n\n输入：root = [1]\n输出：[1]\n\n\n提示：\n\n树中节点数目在范围 [0, 100] 内\n-100 <= Node.val <= 100\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/binary-tree-inorder-traversal\n\n解法1：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<Integer>();\n        if(root == null){\n            return result;\n        }\n        if(root.left != null){\n            result.addAll(inorderTraversal(root.left));\n        }\n        result.add(root.val);\n        if(root.right != null){\n            result.addAll(inorderTraversal(root.right));\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n\n\n第二种解法：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<Integer>();\n        if(root == null){\n            return result;\n        }\n        Stack<TreeNode> stack = new Stack<TreeNode>();\n        while(root != null || !stack.isEmpty()){\n            while(root != null){\n                stack.push(root);\n                root= root.left;\n            }\n            root = stack.pop();\n            result.add(root.val);\n            root = root.right;\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(n) 空间复杂度O(n)\n","source":"_posts/力扣热题100题-二叉树的中序遍历.md","raw":"---\ntitle: 力扣热题100题-二叉树的中序遍历\ndate: 2023-03-23 23:34:21\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。\n\n ![img](https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg)\n\n示例 1：\n\n输入：root = [1,null,2,3]\n输出：[1,3,2]\n示例 2：\n\n输入：root = []\n输出：[]\n示例 3：\n\n输入：root = [1]\n输出：[1]\n\n\n提示：\n\n树中节点数目在范围 [0, 100] 内\n-100 <= Node.val <= 100\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/binary-tree-inorder-traversal\n\n解法1：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<Integer>();\n        if(root == null){\n            return result;\n        }\n        if(root.left != null){\n            result.addAll(inorderTraversal(root.left));\n        }\n        result.add(root.val);\n        if(root.right != null){\n            result.addAll(inorderTraversal(root.right));\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(n) 空间复杂度：O(n)\n\n\n\n第二种解法：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<Integer>();\n        if(root == null){\n            return result;\n        }\n        Stack<TreeNode> stack = new Stack<TreeNode>();\n        while(root != null || !stack.isEmpty()){\n            while(root != null){\n                stack.push(root);\n                root= root.left;\n            }\n            root = stack.pop();\n            result.add(root.val);\n            root = root.right;\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(n) 空间复杂度O(n)\n","slug":"力扣热题100题-二叉树的中序遍历","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202d000ytp4l43ancyjc","content":"<p>给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。</p>\n<p> <img src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" alt=\"img\"></p>\n<p>示例 1：</p>\n<p>输入：root &#x3D; [1,null,2,3]<br>输出：[1,3,2]<br>示例 2：</p>\n<p>输入：root &#x3D; []<br>输出：[]<br>示例 3：</p>\n<p>输入：root &#x3D; [1]<br>输出：[1]</p>\n<p>提示：</p>\n<p>树中节点数目在范围 [0, 100] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal\">https://leetcode.cn/problems/binary-tree-inorder-traversal</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<p>第二种解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度O(n)</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。</p>\n<p> <img src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" alt=\"img\"></p>\n<p>示例 1：</p>\n<p>输入：root &#x3D; [1,null,2,3]<br>输出：[1,3,2]<br>示例 2：</p>\n<p>输入：root &#x3D; []<br>输出：[]<br>示例 3：</p>\n<p>输入：root &#x3D; [1]<br>输出：[1]</p>\n<p>提示：</p>\n<p>树中节点数目在范围 [0, 100] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal\">https://leetcode.cn/problems/binary-tree-inorder-traversal</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度：O(n)</p>\n<p>第二种解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度O(n)</p>\n"},{"title":"力扣热题100题-二叉树的最大深度","date":"2023-03-22T14:22:35.000Z","_content":"\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n说明: 叶子节点是指没有子节点的节点。\n\n示例：\n给定二叉树 [3,9,20,null,null,15,7]，\n\n    \t\t3\n       / \\\n      9  20\n        /  \\\n       15   7\n\n返回它的最大深度 3 。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/maximum-depth-of-binary-tree\n\n\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if(root == null){\n            return 0;\n        }\n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        return Math.max(left,right)+1;\n    }\n}\n```\n\n\n\n时间复杂度：O(n)\n\n空间复杂度：O(height) height是二叉树的高度。\n\n","source":"_posts/力扣热题100题-二叉树的最大深度.md","raw":"---\ntitle: 力扣热题100题-二叉树的最大深度\ndate: 2023-03-22 22:22:35\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n说明: 叶子节点是指没有子节点的节点。\n\n示例：\n给定二叉树 [3,9,20,null,null,15,7]，\n\n    \t\t3\n       / \\\n      9  20\n        /  \\\n       15   7\n\n返回它的最大深度 3 。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/maximum-depth-of-binary-tree\n\n\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if(root == null){\n            return 0;\n        }\n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        return Math.max(left,right)+1;\n    }\n}\n```\n\n\n\n时间复杂度：O(n)\n\n空间复杂度：O(height) height是二叉树的高度。\n\n","slug":"力扣热题100题-二叉树的最大深度","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202d0011tp4lcsd734dm","content":"<p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p>\n<pre><code>        3\n   / \\\n  9  20\n    /  \\\n   15   7\n</code></pre>\n<p>返回它的最大深度 3 。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree\">https://leetcode.cn/problems/maximum-depth-of-binary-tree</a></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O(height) height是二叉树的高度。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p>\n<pre><code>        3\n   / \\\n  9  20\n    /  \\\n   15   7\n</code></pre>\n<p>返回它的最大深度 3 。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree\">https://leetcode.cn/problems/maximum-depth-of-binary-tree</a></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：O(n)</p>\n<p>空间复杂度：O(height) height是二叉树的高度。</p>\n"},{"title":"力扣热题100题-二叉树展开为链表","date":"2023-04-17T14:55:18.000Z","_content":"\n给你二叉树的根结点 root ，请你将它展开为一个单链表：\n\n展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。\n展开后的单链表应该与二叉树 先序遍历 顺序相同。\n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg)\n\n输入：root = [1,2,5,3,4,null,6]\n输出：[1,null,2,null,3,null,4,null,5,null,6]\n示例 2：\n\n输入：root = []\n输出：[]\n示例 3：\n\n输入：root = [0]\n输出：[0]\n\n\n提示：\n\n树中结点数在范围 [0, 2000] 内\n-100 <= Node.val <= 100\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/flatten-binary-tree-to-linked-list\n\n**进阶：**你可以使用原地算法（`O(1)` 额外空间）展开这棵树吗？\n\n解法1：前序遍历\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    //思路：1.先序遍历此二叉树，得到list，在将其转换为链表形式\n    public void flatten(TreeNode root) {\n        if(root == null){\n            return ;\n        }\n        List<TreeNode> list = new LinkedList<>();\n        preOrder(root,list);\n        //转换链表\n        for(int i = 0; i < list.size() - 1; i++){\n            TreeNode pre = list.get(i);\n            TreeNode next = list.get(i+1);\n            pre.right = next;\n            pre.left = null;\n        }\n    }\n\n    //先序遍历\n    public void preOrder(TreeNode tree,List<TreeNode> list){\n        list.add(tree);\n\n        if(tree.left != null){\n            preOrder(tree.left,list);\n        }\n        if(tree.right != null){\n            preOrder(tree.right,list);\n        }\n    }\n}\n```\n\n\n\n解法2：尝试原地算法（`O(1)` 额外空间）\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    //思路：\n    //关键的点在于将5挪到4的右子节点\n    public void flatten(TreeNode root) {\n        if(root == null){\n            return ;\n        }\n        TreeNode current = root;\n        while(current != null){\n            if(current.left != null){\n                //当前节点的左节点不为空，若是为空，\n                TreeNode pre = current.left;\n                //找到当前子树的最右侧节点\n                while(pre.right != null){\n                    pre = pre.right;\n                }\n                //将当前根节点的右子树赋值为 左子树的最右节点的右子树\n                pre.right = current.right;\n\n                //基于上一步的基础上，右子树已经空了，我们将左子树全部赋值到右子树，这样右子树又有值了\n                current.right = current.left;\n                //然后将左子树置为空。\n                current.left = null;\n                //轮回执行此右子树\n                current = current.right;\n            } else {\n                current = current.right;\n            }\n        }\n    }\n\n    \n}\n```\n\n\n\n解题思路：二叉树的操作，先脑海里出现它的操作步骤，再用思路不断地实现它。\n\n","source":"_posts/力扣热题100题-二叉树展开为链表.md","raw":"---\ntitle: 力扣热题100题-二叉树展开为链表\ndate: 2023-04-17 22:55:18\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n给你二叉树的根结点 root ，请你将它展开为一个单链表：\n\n展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。\n展开后的单链表应该与二叉树 先序遍历 顺序相同。\n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg)\n\n输入：root = [1,2,5,3,4,null,6]\n输出：[1,null,2,null,3,null,4,null,5,null,6]\n示例 2：\n\n输入：root = []\n输出：[]\n示例 3：\n\n输入：root = [0]\n输出：[0]\n\n\n提示：\n\n树中结点数在范围 [0, 2000] 内\n-100 <= Node.val <= 100\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/flatten-binary-tree-to-linked-list\n\n**进阶：**你可以使用原地算法（`O(1)` 额外空间）展开这棵树吗？\n\n解法1：前序遍历\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    //思路：1.先序遍历此二叉树，得到list，在将其转换为链表形式\n    public void flatten(TreeNode root) {\n        if(root == null){\n            return ;\n        }\n        List<TreeNode> list = new LinkedList<>();\n        preOrder(root,list);\n        //转换链表\n        for(int i = 0; i < list.size() - 1; i++){\n            TreeNode pre = list.get(i);\n            TreeNode next = list.get(i+1);\n            pre.right = next;\n            pre.left = null;\n        }\n    }\n\n    //先序遍历\n    public void preOrder(TreeNode tree,List<TreeNode> list){\n        list.add(tree);\n\n        if(tree.left != null){\n            preOrder(tree.left,list);\n        }\n        if(tree.right != null){\n            preOrder(tree.right,list);\n        }\n    }\n}\n```\n\n\n\n解法2：尝试原地算法（`O(1)` 额外空间）\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    //思路：\n    //关键的点在于将5挪到4的右子节点\n    public void flatten(TreeNode root) {\n        if(root == null){\n            return ;\n        }\n        TreeNode current = root;\n        while(current != null){\n            if(current.left != null){\n                //当前节点的左节点不为空，若是为空，\n                TreeNode pre = current.left;\n                //找到当前子树的最右侧节点\n                while(pre.right != null){\n                    pre = pre.right;\n                }\n                //将当前根节点的右子树赋值为 左子树的最右节点的右子树\n                pre.right = current.right;\n\n                //基于上一步的基础上，右子树已经空了，我们将左子树全部赋值到右子树，这样右子树又有值了\n                current.right = current.left;\n                //然后将左子树置为空。\n                current.left = null;\n                //轮回执行此右子树\n                current = current.right;\n            } else {\n                current = current.right;\n            }\n        }\n    }\n\n    \n}\n```\n\n\n\n解题思路：二叉树的操作，先脑海里出现它的操作步骤，再用思路不断地实现它。\n\n","slug":"力扣热题100题-二叉树展开为链表","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202e0012tp4l8tog7tje","content":"<p>给你二叉树的根结点 root ，请你将它展开为一个单链表：</p>\n<p>展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。<br>展开后的单链表应该与二叉树 先序遍历 顺序相同。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [1,2,5,3,4,null,6]<br>输出：[1,null,2,null,3,null,4,null,5,null,6]<br>示例 2：</p>\n<p>输入：root &#x3D; []<br>输出：[]<br>示例 3：</p>\n<p>输入：root &#x3D; [0]<br>输出：[0]</p>\n<p>提示：</p>\n<p>树中结点数在范围 [0, 2000] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list\">https://leetcode.cn/problems/flatten-binary-tree-to-linked-list</a></p>\n<p><strong>进阶：</strong>你可以使用原地算法（<code>O(1)</code> 额外空间）展开这棵树吗？</p>\n<p>解法1：前序遍历</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路：1.先序遍历此二叉树，得到list，在将其转换为链表形式</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//转换链表</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TreeNode</span> next <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n            pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//先序遍历</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解法2：尝试原地算法（<code>O(1)</code> 额外空间）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路：</span>\n    <span class=\"token comment\">//关键的点在于将5挪到4的右子节点</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//当前节点的左节点不为空，若是为空，</span>\n                <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//找到当前子树的最右侧节点</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//将当前根节点的右子树赋值为 左子树的最右节点的右子树</span>\n                pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//基于上一步的基础上，右子树已经空了，我们将左子树全部赋值到右子树，这样右子树又有值了</span>\n                current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//然后将左子树置为空。</span>\n                current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//轮回执行此右子树</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解题思路：二叉树的操作，先脑海里出现它的操作步骤，再用思路不断地实现它。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你二叉树的根结点 root ，请你将它展开为一个单链表：</p>\n<p>展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。<br>展开后的单链表应该与二叉树 先序遍历 顺序相同。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [1,2,5,3,4,null,6]<br>输出：[1,null,2,null,3,null,4,null,5,null,6]<br>示例 2：</p>\n<p>输入：root &#x3D; []<br>输出：[]<br>示例 3：</p>\n<p>输入：root &#x3D; [0]<br>输出：[0]</p>\n<p>提示：</p>\n<p>树中结点数在范围 [0, 2000] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list\">https://leetcode.cn/problems/flatten-binary-tree-to-linked-list</a></p>\n<p><strong>进阶：</strong>你可以使用原地算法（<code>O(1)</code> 额外空间）展开这棵树吗？</p>\n<p>解法1：前序遍历</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路：1.先序遍历此二叉树，得到list，在将其转换为链表形式</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//转换链表</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TreeNode</span> next <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n            pre<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//先序遍历</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解法2：尝试原地算法（<code>O(1)</code> 额外空间）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路：</span>\n    <span class=\"token comment\">//关键的点在于将5挪到4的右子节点</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//当前节点的左节点不为空，若是为空，</span>\n                <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//找到当前子树的最右侧节点</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//将当前根节点的右子树赋值为 左子树的最右节点的右子树</span>\n                pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//基于上一步的基础上，右子树已经空了，我们将左子树全部赋值到右子树，这样右子树又有值了</span>\n                current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//然后将左子树置为空。</span>\n                current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//轮回执行此右子树</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解题思路：二叉树的操作，先脑海里出现它的操作步骤，再用思路不断地实现它。</p>\n"},{"title":"力扣热题100题-二叉树的直径","date":"2022-06-12T07:37:23.000Z","_content":"\n## 题目：\n\n543. 二叉树的直径\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n示例 :\n给定二叉树\n\n```\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n```\n\n返回 **3**, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n**注意：**两结点之间的路径长度是以它们之间边的数目表示。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/diameter-of-binary-tree\n\n## 解题思路\n\n前提：了解二叉树的前序、中序、后序、层级遍历\n\n参考：[二叉树的基本知识](https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/)\n\n1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。\n\n## 代码\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    /**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */\n    public int diameterOfBinaryTree(TreeNode root) {\n        /**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */\n        depth(root);\n        return MAX;\n    }\n\n    /**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */\n    public int MAX = 0 ;\n    public int depth(TreeNode root){\n        if (root == null){\n            return 0;\n        }\n        int leftDepth = depth(root.left);\n        int rightDepth = depth(root.right);\n        int sum = leftDepth + rightDepth;\n        if (sum > MAX){\n            MAX = sum;\n        }\n        return Math.max(leftDepth,rightDepth)+1;\n    }\n}\n```\n\n时间复杂度：O(N)，也就是遍历这一个二叉树的时间\n\n空间复杂度：O(树的Height) Height 是二叉树的高度。\n\n\n\n","source":"_posts/力扣热题100题-二叉树的直径.md","raw":"---\ntitle: 力扣热题100题-二叉树的直径\ndate: 2022-06-12 15:37:23\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n## 题目：\n\n543. 二叉树的直径\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n示例 :\n给定二叉树\n\n```\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n```\n\n返回 **3**, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n**注意：**两结点之间的路径长度是以它们之间边的数目表示。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/diameter-of-binary-tree\n\n## 解题思路\n\n前提：了解二叉树的前序、中序、后序、层级遍历\n\n参考：[二叉树的基本知识](https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/)\n\n1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。\n\n## 代码\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    /**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */\n    public int diameterOfBinaryTree(TreeNode root) {\n        /**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */\n        depth(root);\n        return MAX;\n    }\n\n    /**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */\n    public int MAX = 0 ;\n    public int depth(TreeNode root){\n        if (root == null){\n            return 0;\n        }\n        int leftDepth = depth(root.left);\n        int rightDepth = depth(root.right);\n        int sum = leftDepth + rightDepth;\n        if (sum > MAX){\n            MAX = sum;\n        }\n        return Math.max(leftDepth,rightDepth)+1;\n    }\n}\n```\n\n时间复杂度：O(N)，也就是遍历这一个二叉树的时间\n\n空间复杂度：O(树的Height) Height 是二叉树的高度。\n\n\n\n","slug":"力扣热题100题-二叉树的直径","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202e0014tp4l9k3z6ftp","content":"<h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><ol start=\"543\">\n<li>二叉树的直径<br>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。<br>示例 :<br>给定二叉树</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   3\n &#x2F; \\     \n4   5    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>\n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/diameter-of-binary-tree\">https://leetcode.cn/problems/diameter-of-binary-tree</a></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>前提：了解二叉树的前序、中序、后序、层级遍历</p>\n<p>参考：<a href=\"https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/\">二叉树的基本知识</a></p>\n<p>1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */</span>\n        <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> leftDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> leftDepth <span class=\"token operator\">+</span> rightDepth<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            MAX <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftDepth<span class=\"token punctuation\">,</span>rightDepth<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)，也就是遍历这一个二叉树的时间</p>\n<p>空间复杂度：O(树的Height) Height 是二叉树的高度。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><ol start=\"543\">\n<li>二叉树的直径<br>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。<br>示例 :<br>给定二叉树</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   3\n &#x2F; \\     \n4   5    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>\n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/diameter-of-binary-tree\">https://leetcode.cn/problems/diameter-of-binary-tree</a></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>前提：了解二叉树的前序、中序、后序、层级遍历</p>\n<p>参考：<a href=\"https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/\">二叉树的基本知识</a></p>\n<p>1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */</span>\n        <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> leftDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> leftDepth <span class=\"token operator\">+</span> rightDepth<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            MAX <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftDepth<span class=\"token punctuation\">,</span>rightDepth<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)，也就是遍历这一个二叉树的时间</p>\n<p>空间复杂度：O(树的Height) Height 是二叉树的高度。</p>\n"},{"title":"力扣热题100题-反转链表","date":"2023-02-19T16:01:00.000Z","_content":"\n给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。\n\n\n示例 1：\n\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n示例 2：\n\n输入：head = [1,2]\n输出：[2,1]\n示例 3：\n\n输入：head = []\n输出：[]\n\n\n提示：\n\n链表中节点的数目范围是 [0, 5000]\n-5000 <= Node.val <= 5000\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/reverse-linked-list\n**进阶：**链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？\n\n\n\n这题同之前一道题十分类似：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode reverse = null;\n        while(head != null){\n            ListNode temp = head;\n            head = head.next;\n            temp.next = reverse;\n            reverse = temp;\n        }\n        return reverse;\n    }\n}\n```\n\n这里迭代的方式我们就不再重复了说明了\n\n下面主要要说的是递归的形式：\n\n我可以简单用\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        ListNode result = reverseList(head.next);\n        //这里的head是2 ，head.next是3\n        head.next.next = head;\n        head.next = null;\n        return result;\n    }\n}\n```\n\n这里可以用一个简单例子描述：\n\n如果链表是：1->2->3\n\n那么第一次循环结果为：\n\n1->2<-3\n\n具体可以见如下动图：\n\n![img](https://pic.leetcode-cn.com/9ce26a709147ad9ce6152d604efc1cc19a33dc5d467ed2aae5bc68463fdd2888.gif)\n","source":"_posts/力扣热题100题-反转链表.md","raw":"---\ntitle: 力扣热题100题-反转链表\ndate: 2023-02-20 00:01:00\ntags:\n  - 链表\n  - 算法\n  - 力扣热题100题\n---\n\n给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。\n\n\n示例 1：\n\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n示例 2：\n\n输入：head = [1,2]\n输出：[2,1]\n示例 3：\n\n输入：head = []\n输出：[]\n\n\n提示：\n\n链表中节点的数目范围是 [0, 5000]\n-5000 <= Node.val <= 5000\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/reverse-linked-list\n**进阶：**链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？\n\n\n\n这题同之前一道题十分类似：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode reverse = null;\n        while(head != null){\n            ListNode temp = head;\n            head = head.next;\n            temp.next = reverse;\n            reverse = temp;\n        }\n        return reverse;\n    }\n}\n```\n\n这里迭代的方式我们就不再重复了说明了\n\n下面主要要说的是递归的形式：\n\n我可以简单用\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        ListNode result = reverseList(head.next);\n        //这里的head是2 ，head.next是3\n        head.next.next = head;\n        head.next = null;\n        return result;\n    }\n}\n```\n\n这里可以用一个简单例子描述：\n\n如果链表是：1->2->3\n\n那么第一次循环结果为：\n\n1->2<-3\n\n具体可以见如下动图：\n\n![img](https://pic.leetcode-cn.com/9ce26a709147ad9ce6152d604efc1cc19a33dc5d467ed2aae5bc68463fdd2888.gif)\n","slug":"力扣热题100题-反转链表","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202e0016tp4l4vc37t7y","content":"<p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]<br>示例 2：</p>\n<p>输入：head &#x3D; [1,2]<br>输出：[2,1]<br>示例 3：</p>\n<p>输入：head &#x3D; []<br>输出：[]</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 5000]<br>-5000 &lt;&#x3D; Node.val &lt;&#x3D; 5000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list\">https://leetcode.cn/problems/reverse-linked-list</a><br><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<p>这题同之前一道题十分类似：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里迭代的方式我们就不再重复了说明了</p>\n<p>下面主要要说的是递归的形式：</p>\n<p>我可以简单用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这里的head是2 ，head.next是3</span>\n        head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里可以用一个简单例子描述：</p>\n<p>如果链表是：1-&gt;2-&gt;3</p>\n<p>那么第一次循环结果为：</p>\n<p>1-&gt;2&lt;-3</p>\n<p>具体可以见如下动图：</p>\n<p><img src=\"https://pic.leetcode-cn.com/9ce26a709147ad9ce6152d604efc1cc19a33dc5d467ed2aae5bc68463fdd2888.gif\" alt=\"img\"></p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]<br>示例 2：</p>\n<p>输入：head &#x3D; [1,2]<br>输出：[2,1]<br>示例 3：</p>\n<p>输入：head &#x3D; []<br>输出：[]</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 5000]<br>-5000 &lt;&#x3D; Node.val &lt;&#x3D; 5000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/reverse-linked-list\">https://leetcode.cn/problems/reverse-linked-list</a><br><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<p>这题同之前一道题十分类似：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里迭代的方式我们就不再重复了说明了</p>\n<p>下面主要要说的是递归的形式：</p>\n<p>我可以简单用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这里的head是2 ，head.next是3</span>\n        head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里可以用一个简单例子描述：</p>\n<p>如果链表是：1-&gt;2-&gt;3</p>\n<p>那么第一次循环结果为：</p>\n<p>1-&gt;2&lt;-3</p>\n<p>具体可以见如下动图：</p>\n<p><img src=\"https://pic.leetcode-cn.com/9ce26a709147ad9ce6152d604efc1cc19a33dc5d467ed2aae5bc68463fdd2888.gif\" alt=\"img\"></p>\n"},{"title":"力扣热题100题-只出现一次的数字","date":"2023-03-01T15:52:25.000Z","_content":"\n给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n\n你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 \n\n示例 1 ：\n\n输入：nums = [2,2,1]\n输出：1\n示例 2 ：\n\n输入：nums = [4,1,2,1,2]\n输出：4\n示例 3 ：\n\n输入：nums = [1]\n输出：1\n\n\n提示：\n\n1 <= nums.length <= 3 * 10^4\n-3 * 10^4 <= nums[i] <= 3 * 10^4\n除了某个元素只出现一次以外，其余每个元素均出现两次。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/single-number\n\n\n\n这道题真的是，想到异或就能解答出来，想不到就解不出来。\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int result = nums[0];\n        for(int i = 1 ; i < nums.length; i++){\n            result = result ^ nums[i];\n        }\n        return result;\n    }\n}\n```\n\n问题升级：[只出现一次的数字②](https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/)\n\n","source":"_posts/力扣热题100题-只出现一次的数字.md","raw":"---\ntitle: 力扣热题100题-只出现一次的数字\ndate: 2023-03-01 23:52:25\ntags:\n  - 算法\n  - 数组\n  - 异或与\n  - 力扣热题100题\n---\n\n给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n\n你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 \n\n示例 1 ：\n\n输入：nums = [2,2,1]\n输出：1\n示例 2 ：\n\n输入：nums = [4,1,2,1,2]\n输出：4\n示例 3 ：\n\n输入：nums = [1]\n输出：1\n\n\n提示：\n\n1 <= nums.length <= 3 * 10^4\n-3 * 10^4 <= nums[i] <= 3 * 10^4\n除了某个元素只出现一次以外，其余每个元素均出现两次。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/single-number\n\n\n\n这道题真的是，想到异或就能解答出来，想不到就解不出来。\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int result = nums[0];\n        for(int i = 1 ; i < nums.length; i++){\n            result = result ^ nums[i];\n        }\n        return result;\n    }\n}\n```\n\n问题升级：[只出现一次的数字②](https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/)\n\n","slug":"力扣热题100题-只出现一次的数字","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202f0019tp4lcnushhlz","content":"<p>给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n<p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 </p>\n<p>示例 1 ：</p>\n<p>输入：nums &#x3D; [2,2,1]<br>输出：1<br>示例 2 ：</p>\n<p>输入：nums &#x3D; [4,1,2,1,2]<br>输出：4<br>示例 3 ：</p>\n<p>输入：nums &#x3D; [1]<br>输出：1</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4<br>-3 * 10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 3 * 10^4<br>除了某个元素只出现一次以外，其余每个元素均出现两次。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/single-number\">https://leetcode.cn/problems/single-number</a></p>\n<p>这道题真的是，想到异或就能解答出来，想不到就解不出来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> result <span class=\"token operator\">^</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>问题升级：<a href=\"https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/\">只出现一次的数字②</a></p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n<p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 </p>\n<p>示例 1 ：</p>\n<p>输入：nums &#x3D; [2,2,1]<br>输出：1<br>示例 2 ：</p>\n<p>输入：nums &#x3D; [4,1,2,1,2]<br>输出：4<br>示例 3 ：</p>\n<p>输入：nums &#x3D; [1]<br>输出：1</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4<br>-3 * 10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 3 * 10^4<br>除了某个元素只出现一次以外，其余每个元素均出现两次。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/single-number\">https://leetcode.cn/problems/single-number</a></p>\n<p>这道题真的是，想到异或就能解答出来，想不到就解不出来。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> result <span class=\"token operator\">^</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>问题升级：<a href=\"https://fengtingxin.github.io/2023/03/02/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%972/\">只出现一次的数字②</a></p>\n"},{"title":"力扣热题100题-合并 K 个升序链表","date":"2023-04-11T14:57:46.000Z","_content":"\n给你一个链表数组，每个链表都已经按升序排列。\n\n请你将所有链表合并到一个升序链表中，返回合并后的链表。\n\n \n\n示例 1：\n\n输入：lists = [[1,4,5],[1,3,4],[2,6]]\n输出：[1,1,2,3,4,4,5,6]\n解释：链表数组如下：\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n将它们合并到一个有序链表中得到。\n1->1->2->3->4->4->5->6\n示例 2：\n\n输入：lists = []\n输出：[]\n示例 3：\n\n输入：lists = [[]]\n输出：[]\n\n\n提示：\n\nk == lists.length\n0 <= k <= 10^4\n0 <= lists[i].length <= 500\n-10^4 <= lists[i][j] <= 10^4\nlists[i] 按 升序 排列\nlists[i].length 的总和不超过 10^4\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/merge-k-sorted-lists\n\n\n\n解答1：使用小顶堆\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    //第一种解法:需要将链表的节点放入到小顶堆中 \n    public ListNode mergeKLists(ListNode[] lists) {\n        if(lists == null || lists.length == 0){\n            return null;\n        }\n        PriorityQueue<ListNode> queue = new PriorityQueue<>(lists.length,new Comparator<ListNode>(){\n            public int compare(ListNode o1, ListNode o2) {\n                //由于是小顶堆，所以需要对比o1和o2的值的大小，如果\n                if(o1.val < o2.val){\n                    return -1;\n                }\n                if(o2.val < o1.val){\n                    return 1;\n                }\n                return 0;\n            }\n        });\n        for(ListNode temp: lists){\n            queue.add(temp);\n        }\n        //设置返回信息的参数\n        ListNode result = new ListNode(0);\n        ListNode current = result;\n        while(!queue.isEmpty()){\n           ListNode temp = queue.poll();\n           current.next = temp;\n           if(temp.next != null){\n               queue.add(temp.next);\n           }\n           current = current.next;\n        }\n        return result.next;\n    }\n}\n```\n\n\n\n\n\n解答2：分治算法\n\n\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    //第二种解法：\n    //链表两两合并，递归转化为两个升序链表合并\n    // 如果左右边界相等直接返回左边界\n    // 选取中间点，开始对中间点左右进行递归升序，转换为两个链表 分\n    // 对上面递归后的两个结果进行递归合并\n    public ListNode mergeKLists(ListNode[] lists) {\n        if(lists == null || lists.length == 0){\n            return null;\n        }\n        return merge(lists,0,lists.length -1);\n        \n    }\n\n    /**对数组进行二分操作\n     */\n    public ListNode merge(ListNode[] lists,int left,int right){\n        if(left == right){\n            return lists[left];\n        }\n        //求数组的中间值\n        int mid = left + (right - left) / 2;\n        //找到左边的merge结果\n        ListNode l1 = merge(lists, left, mid);\n        //找到右边的merge\n        ListNode l2 = merge(lists, mid+1, right);\n        return mergeTwoLists(l1,l2);\n    }\n\n\n    //合并两个链表的\n    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) return l2;\n        if (l2 == null) return l1;\n        if (l1.val < l2.val) {\n            l1.next = mergeTwoLists(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeTwoLists(l1,l2.next);\n            return l2;\n        }\n    }\n}\n```\n\n我觉得这个写法很牛，但当前阶段，我应该还写不出来。\n","source":"_posts/力扣热题100题-合并-K-个升序链表.md","raw":"---\ntitle: 力扣热题100题-合并 K 个升序链表\ndate: 2023-04-11 22:57:46\ntags:\n  - 算法\n  - 力扣热题100题\n  - \n---\n\n给你一个链表数组，每个链表都已经按升序排列。\n\n请你将所有链表合并到一个升序链表中，返回合并后的链表。\n\n \n\n示例 1：\n\n输入：lists = [[1,4,5],[1,3,4],[2,6]]\n输出：[1,1,2,3,4,4,5,6]\n解释：链表数组如下：\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n将它们合并到一个有序链表中得到。\n1->1->2->3->4->4->5->6\n示例 2：\n\n输入：lists = []\n输出：[]\n示例 3：\n\n输入：lists = [[]]\n输出：[]\n\n\n提示：\n\nk == lists.length\n0 <= k <= 10^4\n0 <= lists[i].length <= 500\n-10^4 <= lists[i][j] <= 10^4\nlists[i] 按 升序 排列\nlists[i].length 的总和不超过 10^4\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/merge-k-sorted-lists\n\n\n\n解答1：使用小顶堆\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    //第一种解法:需要将链表的节点放入到小顶堆中 \n    public ListNode mergeKLists(ListNode[] lists) {\n        if(lists == null || lists.length == 0){\n            return null;\n        }\n        PriorityQueue<ListNode> queue = new PriorityQueue<>(lists.length,new Comparator<ListNode>(){\n            public int compare(ListNode o1, ListNode o2) {\n                //由于是小顶堆，所以需要对比o1和o2的值的大小，如果\n                if(o1.val < o2.val){\n                    return -1;\n                }\n                if(o2.val < o1.val){\n                    return 1;\n                }\n                return 0;\n            }\n        });\n        for(ListNode temp: lists){\n            queue.add(temp);\n        }\n        //设置返回信息的参数\n        ListNode result = new ListNode(0);\n        ListNode current = result;\n        while(!queue.isEmpty()){\n           ListNode temp = queue.poll();\n           current.next = temp;\n           if(temp.next != null){\n               queue.add(temp.next);\n           }\n           current = current.next;\n        }\n        return result.next;\n    }\n}\n```\n\n\n\n\n\n解答2：分治算法\n\n\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    //第二种解法：\n    //链表两两合并，递归转化为两个升序链表合并\n    // 如果左右边界相等直接返回左边界\n    // 选取中间点，开始对中间点左右进行递归升序，转换为两个链表 分\n    // 对上面递归后的两个结果进行递归合并\n    public ListNode mergeKLists(ListNode[] lists) {\n        if(lists == null || lists.length == 0){\n            return null;\n        }\n        return merge(lists,0,lists.length -1);\n        \n    }\n\n    /**对数组进行二分操作\n     */\n    public ListNode merge(ListNode[] lists,int left,int right){\n        if(left == right){\n            return lists[left];\n        }\n        //求数组的中间值\n        int mid = left + (right - left) / 2;\n        //找到左边的merge结果\n        ListNode l1 = merge(lists, left, mid);\n        //找到右边的merge\n        ListNode l2 = merge(lists, mid+1, right);\n        return mergeTwoLists(l1,l2);\n    }\n\n\n    //合并两个链表的\n    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) return l2;\n        if (l2 == null) return l1;\n        if (l1.val < l2.val) {\n            l1.next = mergeTwoLists(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeTwoLists(l1,l2.next);\n            return l2;\n        }\n    }\n}\n```\n\n我觉得这个写法很牛，但当前阶段，我应该还写不出来。\n","slug":"力扣热题100题-合并-K-个升序链表","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202f001ctp4l5wts0s1b","content":"<p>给你一个链表数组，每个链表都已经按升序排列。</p>\n<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>\n<p>示例 1：</p>\n<p>输入：lists &#x3D; [[1,4,5],[1,3,4],[2,6]]<br>输出：[1,1,2,3,4,4,5,6]<br>解释：链表数组如下：<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>将它们合并到一个有序链表中得到。<br>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6<br>示例 2：</p>\n<p>输入：lists &#x3D; []<br>输出：[]<br>示例 3：</p>\n<p>输入：lists &#x3D; [[]]<br>输出：[]</p>\n<p>提示：</p>\n<p>k &#x3D;&#x3D; lists.length<br>0 &lt;&#x3D; k &lt;&#x3D; 10^4<br>0 &lt;&#x3D; lists[i].length &lt;&#x3D; 500<br>-10^4 &lt;&#x3D; lists[i][j] &lt;&#x3D; 10^4<br>lists[i] 按 升序 排列<br>lists[i].length 的总和不超过 10^4</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/merge-k-sorted-lists\">https://leetcode.cn/problems/merge-k-sorted-lists</a></p>\n<p>解答1：使用小顶堆</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//第一种解法:需要将链表的节点放入到小顶堆中 </span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//由于是小顶堆，所以需要对比o1和o2的值的大小，如果</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> o2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> o1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> temp<span class=\"token operator\">:</span> lists<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//设置返回信息的参数</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>解答2：分治算法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//第二种解法：</span>\n    <span class=\"token comment\">//链表两两合并，递归转化为两个升序链表合并</span>\n    <span class=\"token comment\">// 如果左右边界相等直接返回左边界</span>\n    <span class=\"token comment\">// 选取中间点，开始对中间点左右进行递归升序，转换为两个链表 分</span>\n    <span class=\"token comment\">// 对上面递归后的两个结果进行递归合并</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**对数组进行二分操作\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//求数组的中间值</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//找到左边的merge结果</span>\n        <span class=\"token class-name\">ListNode</span> l1 <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//找到右边的merge</span>\n        <span class=\"token class-name\">ListNode</span> l2 <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">//合并两个链表的</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span>l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我觉得这个写法很牛，但当前阶段，我应该还写不出来。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个链表数组，每个链表都已经按升序排列。</p>\n<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>\n<p>示例 1：</p>\n<p>输入：lists &#x3D; [[1,4,5],[1,3,4],[2,6]]<br>输出：[1,1,2,3,4,4,5,6]<br>解释：链表数组如下：<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>将它们合并到一个有序链表中得到。<br>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6<br>示例 2：</p>\n<p>输入：lists &#x3D; []<br>输出：[]<br>示例 3：</p>\n<p>输入：lists &#x3D; [[]]<br>输出：[]</p>\n<p>提示：</p>\n<p>k &#x3D;&#x3D; lists.length<br>0 &lt;&#x3D; k &lt;&#x3D; 10^4<br>0 &lt;&#x3D; lists[i].length &lt;&#x3D; 500<br>-10^4 &lt;&#x3D; lists[i][j] &lt;&#x3D; 10^4<br>lists[i] 按 升序 排列<br>lists[i].length 的总和不超过 10^4</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/merge-k-sorted-lists\">https://leetcode.cn/problems/merge-k-sorted-lists</a></p>\n<p>解答1：使用小顶堆</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//第一种解法:需要将链表的节点放入到小顶堆中 </span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//由于是小顶堆，所以需要对比o1和o2的值的大小，如果</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> o2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> o1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> temp<span class=\"token operator\">:</span> lists<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//设置返回信息的参数</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>解答2：分治算法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//第二种解法：</span>\n    <span class=\"token comment\">//链表两两合并，递归转化为两个升序链表合并</span>\n    <span class=\"token comment\">// 如果左右边界相等直接返回左边界</span>\n    <span class=\"token comment\">// 选取中间点，开始对中间点左右进行递归升序，转换为两个链表 分</span>\n    <span class=\"token comment\">// 对上面递归后的两个结果进行递归合并</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**对数组进行二分操作\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//求数组的中间值</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//找到左边的merge结果</span>\n        <span class=\"token class-name\">ListNode</span> l1 <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//找到右边的merge</span>\n        <span class=\"token class-name\">ListNode</span> l2 <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">//合并两个链表的</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span>l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我觉得这个写法很牛，但当前阶段，我应该还写不出来。</p>\n"},{"title":"力扣热题100题-合并两个有序链表","date":"2022-06-18T10:45:04.000Z","_content":"\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n\n```\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n```\n\n\n示例 2：\n\n```\n输入：l1 = [], l2 = []\n输出：[]\n```\n\n示例 3：\n\n```\n输入：l1 = [], l2 = [0]\n输出：[0]\n```\n\n\n提示：\n\n两个链表的节点数目范围是 [0, 50]\n-100 <= Node.val <= 100\nl1 和 l2 均按 非递减顺序 排列\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/merge-two-sorted-lists\n\n解：\n\n```java\npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        if(list1 == null){\n            return list2;\n        }\n        if(list2 == null){\n            return list1;\n        }\n        ListNode result = new ListNode();\n        ListNode current = result;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val){\n                current.next = list1;\n                list1 = list1.next;\n            } else {\n                current.next = list2;\n                list2 = list2.next;\n            }\n            current = current.next;\n        }\n        if(list1 != null){\n            current.next = list1;\n        } else {\n            current.next = list2;\n        }\n        return result.next;\n    }\n```\n\n时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。\n","source":"_posts/力扣热题100题-合并两个有序链表.md","raw":"---\ntitle: 力扣热题100题-合并两个有序链表\ndate: 2022-06-18 18:45:04\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n\n```\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n```\n\n\n示例 2：\n\n```\n输入：l1 = [], l2 = []\n输出：[]\n```\n\n示例 3：\n\n```\n输入：l1 = [], l2 = [0]\n输出：[0]\n```\n\n\n提示：\n\n两个链表的节点数目范围是 [0, 50]\n-100 <= Node.val <= 100\nl1 和 l2 均按 非递减顺序 排列\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/merge-two-sorted-lists\n\n解：\n\n```java\npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        if(list1 == null){\n            return list2;\n        }\n        if(list2 == null){\n            return list1;\n        }\n        ListNode result = new ListNode();\n        ListNode current = result;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val){\n                current.next = list1;\n                list1 = list1.next;\n            } else {\n                current.next = list2;\n                list2 = list2.next;\n            }\n            current = current.next;\n        }\n        if(list1 != null){\n            current.next = list1;\n        } else {\n            current.next = list2;\n        }\n        return result.next;\n    }\n```\n\n时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。\n","slug":"力扣热题100题-合并两个有序链表","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202f001ftp4l63kydrmy","content":"<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  </p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]\n输出：[1,1,2,3,4,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; []\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; [0]\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>两个链表的节点数目范围是 [0, 50]<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>l1 和 l2 均按 非递减顺序 排列</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/merge-two-sorted-lists\">https://leetcode.cn/problems/merge-two-sorted-lists</a></p>\n<p>解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> list2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> list2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n                list1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n                list2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  </p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]\n输出：[1,1,2,3,4,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; []\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; [0]\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>两个链表的节点数目范围是 [0, 50]<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>l1 和 l2 均按 非递减顺序 排列</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/merge-two-sorted-lists\">https://leetcode.cn/problems/merge-two-sorted-lists</a></p>\n<p>解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> list2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> list2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n                list1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n                list2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。</p>\n"},{"title":"力扣热题100题-回文链表","date":"2023-02-16T00:40:06.000Z","_content":"\n给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。\n\n \n\n示例 1：\n\n输入：head = [1,2,2,1]\n输出：true\n示例 2：\n\n\n输入：head = [1,2]\n输出：false\n\n\n提示：\n\n链表中节点数目在范围[1, 105] 内\n0 <= Node.val <= 9\n\n\n进阶：你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/palindrome-linked-list\n\n\n\n解法1：没有参考解法，最粗糙的解答方法：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    //最初想到的方案：\n    //时间复杂度 ：o(n) 空间复杂度 o(n)\n    //\n    public boolean isPalindrome(ListNode head) {\n        //找到head的长度\n        ListNode first = head;\n        ListNode center = head;\n        int length = 0;\n        \n        Stack<Integer> stack = new Stack<>();\n        while(first != null){\n            length++;\n            stack.push(first.val);\n            first=first.next;\n        }\n\n        int centerLength = length/2;\n\n        int count = 0;\n        //判断长度是偶数还是奇数\n        boolean isOu = length%2 == 0;\n        while(center != null){\n            Integer temp = stack.pop();\n            if(isOu && count >= centerLength){\n                if(center.val != temp){\n                    return false;\n                }\n            } else if(!isOu && count >= centerLength+1){\n                if(center.val != temp){\n                    return false;\n                }\n            }\n            count++;\n            center = center.next;\n        }\n        return stack.isEmpty();\n    }\n}\n```\n\n这里借助了额外的存储空间，所以空间复杂度是O(n)，循环了两次所以时间复杂度是O(n) \n\n那么我们想想怎么能够优化空间复杂度呢？\n\n主要问题是怎么获取到中间节点\n\n我们可以死记硬背住获取中间节点的方法：\n\n```java\nListNode center = head;\n        ListNode fast = head;\n        while(fast.next != null && fast.next.next != null){\n            fast = fast.next.next;\n            center = center.next;\n        }\n```\n\n如果已知中间节点，那就可以将中间节点之前的链表翻转，再跟中间节点之后的链表对比，就可以了。\n\n好了，现在的问题简化为链表翻转问题。\n\n```java\npublic ListNode reverseList(ListNode head){\n        ListNode reverse = null;\n        while(head != null){\n            ListNode temp = head;\n            head = head.next;\n            temp.next = reverse;\n            reverse = temp;\n        }\n        return reverse;\n    }\n```\n\n那最后可以得出解法：\n\n \n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n\n        //得到中间节点\n        ListNode center = head;\n        ListNode fast = head;\n        while(fast.next != null && fast.next.next != null){\n            fast = fast.next.next;\n            center = center.next;\n        }\n\n        //链表翻转\n        ListNode reverse = reverseList(center);\n\n        //判断节点是否相同\n        while(head != null && reverse != null){\n            if(head.val != reverse.val){\n                return false;\n            }\n            head = head.next;\n            reverse = reverse.next;\n        }\n        return true;\n    }\n\n    public ListNode reverseList(ListNode head){\n        ListNode reverse = null;\n        while(head != null){\n            ListNode temp = head;\n            head = head.next;\n            temp.next = reverse;\n            reverse = temp;\n        }\n        return reverse;\n    }\n}\n```\n\n时间复杂度为O(n) 空间复杂度为O(1)\n","source":"_posts/力扣热题100题-回文链表.md","raw":"---\ntitle: 力扣热题100题-回文链表\ndate: 2023-02-16 08:40:06\ntags:\n  - 算法\n  - 链表\n  - 力扣热题100题\n---\n\n给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。\n\n \n\n示例 1：\n\n输入：head = [1,2,2,1]\n输出：true\n示例 2：\n\n\n输入：head = [1,2]\n输出：false\n\n\n提示：\n\n链表中节点数目在范围[1, 105] 内\n0 <= Node.val <= 9\n\n\n进阶：你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/palindrome-linked-list\n\n\n\n解法1：没有参考解法，最粗糙的解答方法：\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    //最初想到的方案：\n    //时间复杂度 ：o(n) 空间复杂度 o(n)\n    //\n    public boolean isPalindrome(ListNode head) {\n        //找到head的长度\n        ListNode first = head;\n        ListNode center = head;\n        int length = 0;\n        \n        Stack<Integer> stack = new Stack<>();\n        while(first != null){\n            length++;\n            stack.push(first.val);\n            first=first.next;\n        }\n\n        int centerLength = length/2;\n\n        int count = 0;\n        //判断长度是偶数还是奇数\n        boolean isOu = length%2 == 0;\n        while(center != null){\n            Integer temp = stack.pop();\n            if(isOu && count >= centerLength){\n                if(center.val != temp){\n                    return false;\n                }\n            } else if(!isOu && count >= centerLength+1){\n                if(center.val != temp){\n                    return false;\n                }\n            }\n            count++;\n            center = center.next;\n        }\n        return stack.isEmpty();\n    }\n}\n```\n\n这里借助了额外的存储空间，所以空间复杂度是O(n)，循环了两次所以时间复杂度是O(n) \n\n那么我们想想怎么能够优化空间复杂度呢？\n\n主要问题是怎么获取到中间节点\n\n我们可以死记硬背住获取中间节点的方法：\n\n```java\nListNode center = head;\n        ListNode fast = head;\n        while(fast.next != null && fast.next.next != null){\n            fast = fast.next.next;\n            center = center.next;\n        }\n```\n\n如果已知中间节点，那就可以将中间节点之前的链表翻转，再跟中间节点之后的链表对比，就可以了。\n\n好了，现在的问题简化为链表翻转问题。\n\n```java\npublic ListNode reverseList(ListNode head){\n        ListNode reverse = null;\n        while(head != null){\n            ListNode temp = head;\n            head = head.next;\n            temp.next = reverse;\n            reverse = temp;\n        }\n        return reverse;\n    }\n```\n\n那最后可以得出解法：\n\n \n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n\n        //得到中间节点\n        ListNode center = head;\n        ListNode fast = head;\n        while(fast.next != null && fast.next.next != null){\n            fast = fast.next.next;\n            center = center.next;\n        }\n\n        //链表翻转\n        ListNode reverse = reverseList(center);\n\n        //判断节点是否相同\n        while(head != null && reverse != null){\n            if(head.val != reverse.val){\n                return false;\n            }\n            head = head.next;\n            reverse = reverse.next;\n        }\n        return true;\n    }\n\n    public ListNode reverseList(ListNode head){\n        ListNode reverse = null;\n        while(head != null){\n            ListNode temp = head;\n            head = head.next;\n            temp.next = reverse;\n            reverse = temp;\n        }\n        return reverse;\n    }\n}\n```\n\n时间复杂度为O(n) 空间复杂度为O(1)\n","slug":"力扣热题100题-回文链表","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202f001htp4lg3fce86a","content":"<p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,2,2,1]<br>输出：true<br>示例 2：</p>\n<p>输入：head &#x3D; [1,2]<br>输出：false</p>\n<p>提示：</p>\n<p>链表中节点数目在范围[1, 105] 内<br>0 &lt;&#x3D; Node.val &lt;&#x3D; 9</p>\n<p>进阶：你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/palindrome-linked-list\">https://leetcode.cn/problems/palindrome-linked-list</a></p>\n<p>解法1：没有参考解法，最粗糙的解答方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//最初想到的方案：</span>\n    <span class=\"token comment\">//时间复杂度 ：o(n) 空间复杂度 o(n)</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//找到head的长度</span>\n        <span class=\"token class-name\">ListNode</span> first <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> center <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            first<span class=\"token operator\">=</span>first<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> centerLength <span class=\"token operator\">=</span> length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断长度是偶数还是奇数</span>\n        <span class=\"token keyword\">boolean</span> isOu <span class=\"token operator\">=</span> length<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>center <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Integer</span> temp <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isOu <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">>=</span> centerLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOu <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">>=</span> centerLength<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            center <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里借助了额外的存储空间，所以空间复杂度是O(n)，循环了两次所以时间复杂度是O(n) </p>\n<p>那么我们想想怎么能够优化空间复杂度呢？</p>\n<p>主要问题是怎么获取到中间节点</p>\n<p>我们可以死记硬背住获取中间节点的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ListNode</span> center <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            center <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果已知中间节点，那就可以将中间节点之前的链表翻转，再跟中间节点之后的链表对比，就可以了。</p>\n<p>好了，现在的问题简化为链表翻转问题。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那最后可以得出解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//得到中间节点</span>\n        <span class=\"token class-name\">ListNode</span> center <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            center <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//链表翻转</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//判断节点是否相同</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> reverse <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> reverse<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为O(n) 空间复杂度为O(1)</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p>\n<p>示例 1：</p>\n<p>输入：head &#x3D; [1,2,2,1]<br>输出：true<br>示例 2：</p>\n<p>输入：head &#x3D; [1,2]<br>输出：false</p>\n<p>提示：</p>\n<p>链表中节点数目在范围[1, 105] 内<br>0 &lt;&#x3D; Node.val &lt;&#x3D; 9</p>\n<p>进阶：你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/palindrome-linked-list\">https://leetcode.cn/problems/palindrome-linked-list</a></p>\n<p>解法1：没有参考解法，最粗糙的解答方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//最初想到的方案：</span>\n    <span class=\"token comment\">//时间复杂度 ：o(n) 空间复杂度 o(n)</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//找到head的长度</span>\n        <span class=\"token class-name\">ListNode</span> first <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> center <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            first<span class=\"token operator\">=</span>first<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> centerLength <span class=\"token operator\">=</span> length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//判断长度是偶数还是奇数</span>\n        <span class=\"token keyword\">boolean</span> isOu <span class=\"token operator\">=</span> length<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>center <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Integer</span> temp <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isOu <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">>=</span> centerLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOu <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">>=</span> centerLength<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            center <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里借助了额外的存储空间，所以空间复杂度是O(n)，循环了两次所以时间复杂度是O(n) </p>\n<p>那么我们想想怎么能够优化空间复杂度呢？</p>\n<p>主要问题是怎么获取到中间节点</p>\n<p>我们可以死记硬背住获取中间节点的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ListNode</span> center <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            center <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果已知中间节点，那就可以将中间节点之前的链表翻转，再跟中间节点之后的链表对比，就可以了。</p>\n<p>好了，现在的问题简化为链表翻转问题。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那最后可以得出解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//得到中间节点</span>\n        <span class=\"token class-name\">ListNode</span> center <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            center <span class=\"token operator\">=</span> center<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//链表翻转</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//判断节点是否相同</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> reverse <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> reverse<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">;</span>\n            reverse <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为O(n) 空间复杂度为O(1)</p>\n"},{"title":"力扣热题100题-多数元素","date":"2023-02-22T15:23:00.000Z","_content":"\n给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。\n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n示例 1：\n\n输入：nums = [3,2,3]\n输出：3\n示例 2：\n\n输入：nums = [2,2,1,1,1,2,2]\n输出：2\n\n\n提示：\nn == nums.length\n1 <= n <= 5 * 104\n-109 <= nums[i] <= 109\n\n\n进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/majority-element\n\n\n\n解法1：无脑解法，不思考，利用空间，计算出来次数多次的元素。\n\n```java\nclass Solution {\n    public int majorityElement(int[] nums) {\n        //通过hashMap存储，找到数组中出现频率最高的数字\n        Map<Integer,Integer> map = new HashMap<>();\n        for(int i =0;i< nums.length; i++){\n            int temp = nums[i];\n            map.put(temp,map.getOrDefault(temp,0)+1);\n        }\n        //计算map中的最大值\n        int max = Integer.MIN_VALUE;\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() > max){\n                max = entry.getValue();\n            }\n        }\n\n        //找到最大值对应的key\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() == max){\n                return entry.getKey();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n由于写解答是在leecode上直接写，也暴露出对map的常用方法的缺失，例如：map.entrySet()方法，或者是Map.Entry<Integer,Integer> .甚至是Integer.MIN_VALUE.都是对无idea编写的考研。\n\n最后虽然能够解答成功，但是空间复杂度不尽如人意，是O(n)，那么我们思考下怎么将空间复杂度优化为O(1)？\n\n我觉得还是要继续审题，问题的关键点在2/n上。\n\n最终的最终，还是看了题解，那么我们一起来了解一下解题方法：\n\n我这里参考的不是官方正式答案，而是其中一个题解，我感觉很有意思，也很好理解\n\n简称：“同归于尽消杀法”\n\n例如：有100个人，可能这100中有2个队伍或者3个队伍，或者4个队伍\n\n那么肯定有一个队伍A的人数>=51人，也就是其他队伍的人数都比他少。\n\n那么我们可以设置一个领地 x ，顺序让这些人去抢占领地，如果他们遇到同队的，就可以一起占领，如果不同队伍的，只能拼杀至死，去掉一人，那么到最后剩下的人一定是A队的人。\n\n由此可得解法：\n\n```java\npublic int majorityElement(int[] nums) {\n        int x = nums[0]; //x为领地，先让第一个人占领\n        int count = 1; \n        for(int i = 1; i< nums.length ; i++){\n            //如果遇到同队伍的人，那么就一起占领\n            if(x == nums[i]){\n                count++;\n            } else if(count == 0) {\n                //如果已经无人占领了，那么就由当前的人来占领\n                count++;\n                x = nums[i];\n            } else {\n                //遇到不同队伍的人，拼杀减少一人\n                count--;\n            }\n        }\n        return x;\n    }\n```\n\n太爱这个算法了，原来我们想的算法其实在生活中也没有那么复杂，都是简单且直接的\n\n那么终于通过此算法得到了空间复杂度为O(1)的算法。\n\njava工具类写法：\n\n```java\nclass Solution {\n    public int majorityElement(int[] nums) {\n        Arrays.sort(nums);\n        return nums[nums.length/2];\n    }\n}\n```\n\n无言独上西楼，不再赘述。\n\n\n\n**注意**\n\n升级版：[升级元素||](https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/)\n","source":"_posts/力扣热题100题-多数元素.md","raw":"---\ntitle: 力扣热题100题-多数元素\ndate: 2023-02-22 23:23:00\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。\n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n示例 1：\n\n输入：nums = [3,2,3]\n输出：3\n示例 2：\n\n输入：nums = [2,2,1,1,1,2,2]\n输出：2\n\n\n提示：\nn == nums.length\n1 <= n <= 5 * 104\n-109 <= nums[i] <= 109\n\n\n进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/majority-element\n\n\n\n解法1：无脑解法，不思考，利用空间，计算出来次数多次的元素。\n\n```java\nclass Solution {\n    public int majorityElement(int[] nums) {\n        //通过hashMap存储，找到数组中出现频率最高的数字\n        Map<Integer,Integer> map = new HashMap<>();\n        for(int i =0;i< nums.length; i++){\n            int temp = nums[i];\n            map.put(temp,map.getOrDefault(temp,0)+1);\n        }\n        //计算map中的最大值\n        int max = Integer.MIN_VALUE;\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() > max){\n                max = entry.getValue();\n            }\n        }\n\n        //找到最大值对应的key\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() == max){\n                return entry.getKey();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n由于写解答是在leecode上直接写，也暴露出对map的常用方法的缺失，例如：map.entrySet()方法，或者是Map.Entry<Integer,Integer> .甚至是Integer.MIN_VALUE.都是对无idea编写的考研。\n\n最后虽然能够解答成功，但是空间复杂度不尽如人意，是O(n)，那么我们思考下怎么将空间复杂度优化为O(1)？\n\n我觉得还是要继续审题，问题的关键点在2/n上。\n\n最终的最终，还是看了题解，那么我们一起来了解一下解题方法：\n\n我这里参考的不是官方正式答案，而是其中一个题解，我感觉很有意思，也很好理解\n\n简称：“同归于尽消杀法”\n\n例如：有100个人，可能这100中有2个队伍或者3个队伍，或者4个队伍\n\n那么肯定有一个队伍A的人数>=51人，也就是其他队伍的人数都比他少。\n\n那么我们可以设置一个领地 x ，顺序让这些人去抢占领地，如果他们遇到同队的，就可以一起占领，如果不同队伍的，只能拼杀至死，去掉一人，那么到最后剩下的人一定是A队的人。\n\n由此可得解法：\n\n```java\npublic int majorityElement(int[] nums) {\n        int x = nums[0]; //x为领地，先让第一个人占领\n        int count = 1; \n        for(int i = 1; i< nums.length ; i++){\n            //如果遇到同队伍的人，那么就一起占领\n            if(x == nums[i]){\n                count++;\n            } else if(count == 0) {\n                //如果已经无人占领了，那么就由当前的人来占领\n                count++;\n                x = nums[i];\n            } else {\n                //遇到不同队伍的人，拼杀减少一人\n                count--;\n            }\n        }\n        return x;\n    }\n```\n\n太爱这个算法了，原来我们想的算法其实在生活中也没有那么复杂，都是简单且直接的\n\n那么终于通过此算法得到了空间复杂度为O(1)的算法。\n\njava工具类写法：\n\n```java\nclass Solution {\n    public int majorityElement(int[] nums) {\n        Arrays.sort(nums);\n        return nums[nums.length/2];\n    }\n}\n```\n\n无言独上西楼，不再赘述。\n\n\n\n**注意**\n\n升级版：[升级元素||](https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/)\n","slug":"力扣热题100题-多数元素","published":1,"updated":"2024-07-20T15:41:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202g001jtp4lap0zafqx","content":"<p>给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n&#x2F;2 ⌋ 的元素。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,2,3]<br>输出：3<br>示例 2：</p>\n<p>输入：nums &#x3D; [2,2,1,1,1,2,2]<br>输出：2</p>\n<p>提示：<br>n &#x3D;&#x3D; nums.length<br>1 &lt;&#x3D; n &lt;&#x3D; 5 * 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</p>\n<p>进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/majority-element\">https://leetcode.cn/problems/majority-element</a></p>\n<p>解法1：无脑解法，不思考，利用空间，计算出来次数多次的元素。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//通过hashMap存储，找到数组中出现频率最高的数字</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//计算map中的最大值</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//找到最大值对应的key</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于写解答是在leecode上直接写，也暴露出对map的常用方法的缺失，例如：map.entrySet()方法，或者是Map.Entry&lt;Integer,Integer&gt; .甚至是Integer.MIN_VALUE.都是对无idea编写的考研。</p>\n<p>最后虽然能够解答成功，但是空间复杂度不尽如人意，是O(n)，那么我们思考下怎么将空间复杂度优化为O(1)？</p>\n<p>我觉得还是要继续审题，问题的关键点在2&#x2F;n上。</p>\n<p>最终的最终，还是看了题解，那么我们一起来了解一下解题方法：</p>\n<p>我这里参考的不是官方正式答案，而是其中一个题解，我感觉很有意思，也很好理解</p>\n<p>简称：“同归于尽消杀法”</p>\n<p>例如：有100个人，可能这100中有2个队伍或者3个队伍，或者4个队伍</p>\n<p>那么肯定有一个队伍A的人数&gt;&#x3D;51人，也就是其他队伍的人数都比他少。</p>\n<p>那么我们可以设置一个领地 x ，顺序让这些人去抢占领地，如果他们遇到同队的，就可以一起占领，如果不同队伍的，只能拼杀至死，去掉一人，那么到最后剩下的人一定是A队的人。</p>\n<p>由此可得解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//x为领地，先让第一个人占领</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果遇到同队伍的人，那么就一起占领</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//如果已经无人占领了，那么就由当前的人来占领</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                x <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//遇到不同队伍的人，拼杀减少一人</span>\n                count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>太爱这个算法了，原来我们想的算法其实在生活中也没有那么复杂，都是简单且直接的</p>\n<p>那么终于通过此算法得到了空间复杂度为O(1)的算法。</p>\n<p>java工具类写法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>无言独上西楼，不再赘述。</p>\n<p><strong>注意</strong></p>\n<p>升级版：<a href=\"https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/\">升级元素||</a></p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n&#x2F;2 ⌋ 的元素。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,2,3]<br>输出：3<br>示例 2：</p>\n<p>输入：nums &#x3D; [2,2,1,1,1,2,2]<br>输出：2</p>\n<p>提示：<br>n &#x3D;&#x3D; nums.length<br>1 &lt;&#x3D; n &lt;&#x3D; 5 * 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</p>\n<p>进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/majority-element\">https://leetcode.cn/problems/majority-element</a></p>\n<p>解法1：无脑解法，不思考，利用空间，计算出来次数多次的元素。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//通过hashMap存储，找到数组中出现频率最高的数字</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//计算map中的最大值</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//找到最大值对应的key</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于写解答是在leecode上直接写，也暴露出对map的常用方法的缺失，例如：map.entrySet()方法，或者是Map.Entry&lt;Integer,Integer&gt; .甚至是Integer.MIN_VALUE.都是对无idea编写的考研。</p>\n<p>最后虽然能够解答成功，但是空间复杂度不尽如人意，是O(n)，那么我们思考下怎么将空间复杂度优化为O(1)？</p>\n<p>我觉得还是要继续审题，问题的关键点在2&#x2F;n上。</p>\n<p>最终的最终，还是看了题解，那么我们一起来了解一下解题方法：</p>\n<p>我这里参考的不是官方正式答案，而是其中一个题解，我感觉很有意思，也很好理解</p>\n<p>简称：“同归于尽消杀法”</p>\n<p>例如：有100个人，可能这100中有2个队伍或者3个队伍，或者4个队伍</p>\n<p>那么肯定有一个队伍A的人数&gt;&#x3D;51人，也就是其他队伍的人数都比他少。</p>\n<p>那么我们可以设置一个领地 x ，顺序让这些人去抢占领地，如果他们遇到同队的，就可以一起占领，如果不同队伍的，只能拼杀至死，去掉一人，那么到最后剩下的人一定是A队的人。</p>\n<p>由此可得解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//x为领地，先让第一个人占领</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果遇到同队伍的人，那么就一起占领</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//如果已经无人占领了，那么就由当前的人来占领</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                x <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//遇到不同队伍的人，拼杀减少一人</span>\n                count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>太爱这个算法了，原来我们想的算法其实在生活中也没有那么复杂，都是简单且直接的</p>\n<p>那么终于通过此算法得到了空间复杂度为O(1)的算法。</p>\n<p>java工具类写法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>无言独上西楼，不再赘述。</p>\n<p><strong>注意</strong></p>\n<p>升级版：<a href=\"https://fengtingxin.github.io/2023/02/23/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-II/\">升级元素||</a></p>\n"},{"title":"力扣热题100题-字母异位词分组","date":"2023-05-30T01:51:48.000Z","_content":"\n\n给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。\n\n字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。\n\n \n示例 1:\n\n输入: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n输出: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n示例 2:\n\n输入: strs = [\"\"]\n输出: [[\"\"]]\n示例 3:\n\n输入: strs = [\"a\"]\n输出: [[\"a\"]]\n \n\n提示：\n\n1 <= strs.length <= 104\n0 <= strs[i].length <= 100\nstrs[i] 仅包含小写字母\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/group-anagrams\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n```java\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String,List<String>> map = new HashMap<>();\n\n        for(int i = 0 ; i < strs.length ; i++){\n            char[] arrayChar = strs[i].toCharArray();\n            Arrays.sort(arrayChar);\n            String tmp = String.valueOf(arrayChar);\n            if(!map.containsKey(tmp)){\n                map.put(tmp,new ArrayList<>());\n            }\n            map.get(tmp).add(strs[i]);\n        }\n\n        List<List<String>> result = new ArrayList<>();\n\n        for(Map.Entry<String,List<String>> entry: map.entrySet()){\n            result.add(entry.getValue());\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(nlogn)\n","source":"_posts/力扣热题100题-字母异位词分组.md","raw":"---\ntitle: 力扣热题100题-字母异位词分组\ndate: 2023-05-30 09:51:48\ntags:\n\t- 算法\n\t- 力扣热题100题\n\t- 哈希\n---\n\n\n给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。\n\n字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。\n\n \n示例 1:\n\n输入: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n输出: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n示例 2:\n\n输入: strs = [\"\"]\n输出: [[\"\"]]\n示例 3:\n\n输入: strs = [\"a\"]\n输出: [[\"a\"]]\n \n\n提示：\n\n1 <= strs.length <= 104\n0 <= strs[i].length <= 100\nstrs[i] 仅包含小写字母\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/group-anagrams\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n```java\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String,List<String>> map = new HashMap<>();\n\n        for(int i = 0 ; i < strs.length ; i++){\n            char[] arrayChar = strs[i].toCharArray();\n            Arrays.sort(arrayChar);\n            String tmp = String.valueOf(arrayChar);\n            if(!map.containsKey(tmp)){\n                map.put(tmp,new ArrayList<>());\n            }\n            map.get(tmp).add(strs[i]);\n        }\n\n        List<List<String>> result = new ArrayList<>();\n\n        for(Map.Entry<String,List<String>> entry: map.entrySet()){\n            result.add(entry.getValue());\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(nlogn)\n","slug":"力扣热题100题-字母异位词分组","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202g001mtp4l7fl5actk","content":"<p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p>\n<p>字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</p>\n<p> <br>示例 1:</p>\n<p>输入: strs &#x3D; [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]<br>输出: [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]<br>示例 2:</p>\n<p>输入: strs &#x3D; [“”]<br>输出: [[“”]]<br>示例 3:</p>\n<p>输入: strs &#x3D; [“a”]<br>输出: [[“a”]]\n </p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; strs.length &lt;&#x3D; 104<br>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 100<br>strs[i] 仅包含小写字母</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/group-anagrams\">https://leetcode.cn/problems/group-anagrams</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strs<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayChar <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arrayChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> tmp <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>arrayChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(nlogn)</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p>\n<p>字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</p>\n<p> <br>示例 1:</p>\n<p>输入: strs &#x3D; [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]<br>输出: [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]<br>示例 2:</p>\n<p>输入: strs &#x3D; [“”]<br>输出: [[“”]]<br>示例 3:</p>\n<p>输入: strs &#x3D; [“a”]<br>输出: [[“a”]]\n </p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; strs.length &lt;&#x3D; 104<br>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 100<br>strs[i] 仅包含小写字母</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/group-anagrams\">https://leetcode.cn/problems/group-anagrams</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strs<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayChar <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arrayChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> tmp <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>arrayChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(nlogn)</p>\n"},{"title":"力扣热题100题-对称二叉树","date":"2023-03-22T14:41:46.000Z","_content":"\n给你一个二叉树的根节点 root ， 检查它是否轴对称。\n\n \n\n示例 1：![img](https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg)\n\n输入：root = [1,2,2,3,4,4,3]\n输出：true\n示例 2：![img](https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg)\n\n\n输入：root = [1,2,2,null,3,null,3]\n输出：false\n\n\n提示：\n\n树中节点数目在范围 [1, 1000] 内\n-100 <= Node.val <= 100\n\n\n进阶：你可以运用递归和迭代两种方法解决这个问题吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/symmetric-tree\n\n\n\n解法1：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if(root == null){\n            return true;\n        }\n        return compare(root.left,root.right);\n    }\n\n    public boolean compare(TreeNode left,TreeNode right){\n        if(left == null && right == null){\n            return true;\n        }\n        if(left== null || right == null){\n            return false;\n        }\n        if(left.val != right.val){\n            return false;\n        }\n        boolean leftCompare = compare(left.right,right.left);\n        if(!leftCompare){\n            return false;\n        }\n        boolean rightCompare = compare(left.left,right.right);\n        if(!rightCompare){\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n递归：时间复杂度：O(n) 空间复杂度：O(height)\n\n\n\n使用迭代的方法：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if(root == null){\n            return true;\n        }\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.add(root.left);\n        queue.add(root.right);\n        while(!queue.isEmpty()){\n            TreeNode left = queue.poll();\n            TreeNode right = queue.poll();\n\n            //判断left和right是否相同\n            if(left == null && right == null){\n                continue;\n            }\n\n            if(left == null || right == null){\n                return false;\n            }\n            if(left.val != right.val){\n                return false;\n            }\n\n            queue.add(left.left);\n            queue.add(right.right);\n            queue.add(left.right);\n            queue.add(right.left);\n        }\n        return queue.isEmpty();\n    }\n\n    \n}\n```\n\n","source":"_posts/力扣热题100题-对称二叉树.md","raw":"---\ntitle: 力扣热题100题-对称二叉树\ndate: 2023-03-22 22:41:46\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n给你一个二叉树的根节点 root ， 检查它是否轴对称。\n\n \n\n示例 1：![img](https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg)\n\n输入：root = [1,2,2,3,4,4,3]\n输出：true\n示例 2：![img](https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg)\n\n\n输入：root = [1,2,2,null,3,null,3]\n输出：false\n\n\n提示：\n\n树中节点数目在范围 [1, 1000] 内\n-100 <= Node.val <= 100\n\n\n进阶：你可以运用递归和迭代两种方法解决这个问题吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/symmetric-tree\n\n\n\n解法1：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if(root == null){\n            return true;\n        }\n        return compare(root.left,root.right);\n    }\n\n    public boolean compare(TreeNode left,TreeNode right){\n        if(left == null && right == null){\n            return true;\n        }\n        if(left== null || right == null){\n            return false;\n        }\n        if(left.val != right.val){\n            return false;\n        }\n        boolean leftCompare = compare(left.right,right.left);\n        if(!leftCompare){\n            return false;\n        }\n        boolean rightCompare = compare(left.left,right.right);\n        if(!rightCompare){\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n递归：时间复杂度：O(n) 空间复杂度：O(height)\n\n\n\n使用迭代的方法：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if(root == null){\n            return true;\n        }\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.add(root.left);\n        queue.add(root.right);\n        while(!queue.isEmpty()){\n            TreeNode left = queue.poll();\n            TreeNode right = queue.poll();\n\n            //判断left和right是否相同\n            if(left == null && right == null){\n                continue;\n            }\n\n            if(left == null || right == null){\n                return false;\n            }\n            if(left.val != right.val){\n                return false;\n            }\n\n            queue.add(left.left);\n            queue.add(right.right);\n            queue.add(left.right);\n            queue.add(right.left);\n        }\n        return queue.isEmpty();\n    }\n\n    \n}\n```\n\n","slug":"力扣热题100题-对称二叉树","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202g001otp4lczlscvu1","content":"<p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p>\n<p>示例 1：<img src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [1,2,2,3,4,4,3]<br>输出：true<br>示例 2：<img src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [1,2,2,null,3,null,3]<br>输出：false</p>\n<p>提示：</p>\n<p>树中节点数目在范围 [1, 1000] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>进阶：你可以运用递归和迭代两种方法解决这个问题吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/symmetric-tree\">https://leetcode.cn/problems/symmetric-tree</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span><span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">boolean</span> leftCompare <span class=\"token operator\">=</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>leftCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">boolean</span> rightCompare <span class=\"token operator\">=</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rightCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>递归：时间复杂度：O(n) 空间复杂度：O(height)</p>\n<p>使用迭代的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TreeNode</span> right <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//判断left和right是否相同</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p>\n<p>示例 1：<img src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [1,2,2,3,4,4,3]<br>输出：true<br>示例 2：<img src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [1,2,2,null,3,null,3]<br>输出：false</p>\n<p>提示：</p>\n<p>树中节点数目在范围 [1, 1000] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>进阶：你可以运用递归和迭代两种方法解决这个问题吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/symmetric-tree\">https://leetcode.cn/problems/symmetric-tree</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span><span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">boolean</span> leftCompare <span class=\"token operator\">=</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>leftCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">boolean</span> rightCompare <span class=\"token operator\">=</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rightCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>递归：时间复杂度：O(n) 空间复杂度：O(height)</p>\n<p>使用迭代的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TreeNode</span> right <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//判断left和right是否相同</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-找到所有数组中消失的数字","date":"2023-01-31T11:27:25.000Z","_content":"\n给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。\n\n示例 1：\n\n输入：nums = [4,3,2,7,8,2,3,1]\n输出：[5,6]\n示例 2：\n\n输入：nums = [1,1]\n输出：[2]\n\n\n提示：\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n\n进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\n\n\n\n额外使用一个数组作为hash表，记录哪个数字没有出现过：\n\n```java\nclass Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for(int i = 0;i < length; i++){\n            temp[nums[i]-1]=1;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            if(temp[i] == 0){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间\n\n那么怎么不使用额外的空间呢？\n\n考虑只能从数组本身下手了\n\n\n\n官方答案：\n\n```java\nclass Solution {\n\n    //思路是这样\n        //发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,\n        // 有可能存在多次+n的情况，实际值为: value %n即可。\n        // 可能存在没有+n的情况，那就是没有出现在范围内容的数字\n\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        for(int i = 0;i < length; i++){\n            //找到这个数对应的数组下标\n            int x =(nums[i]-1)%length ;\n            nums[x] = nums[x] + length;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            //只要是出现过，那就肯定大于n\n            if(nums[i] <= length){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n这样就可以已当前数组为哈希表。\n","source":"_posts/力扣热题100题-找到所有数组中消失的数字.md","raw":"---\ntitle: 力扣热题100题-找到所有数组中消失的数字\ndate: 2023-01-31 19:27:25\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。\n\n示例 1：\n\n输入：nums = [4,3,2,7,8,2,3,1]\n输出：[5,6]\n示例 2：\n\n输入：nums = [1,1]\n输出：[2]\n\n\n提示：\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n\n进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\n\n\n\n额外使用一个数组作为hash表，记录哪个数字没有出现过：\n\n```java\nclass Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for(int i = 0;i < length; i++){\n            temp[nums[i]-1]=1;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            if(temp[i] == 0){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间\n\n那么怎么不使用额外的空间呢？\n\n考虑只能从数组本身下手了\n\n\n\n官方答案：\n\n```java\nclass Solution {\n\n    //思路是这样\n        //发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,\n        // 有可能存在多次+n的情况，实际值为: value %n即可。\n        // 可能存在没有+n的情况，那就是没有出现在范围内容的数字\n\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        for(int i = 0;i < length; i++){\n            //找到这个数对应的数组下标\n            int x =(nums[i]-1)%length ;\n            nums[x] = nums[x] + length;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            //只要是出现过，那就肯定大于n\n            if(nums[i] <= length){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n这样就可以已当前数组为哈希表。\n","slug":"力扣热题100题-找到所有数组中消失的数字","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202g001rtp4l4frxantf","content":"<p>给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [4,3,2,7,8,2,3,1]<br>输出：[5,6]<br>示例 2：</p>\n<p>输入：nums &#x3D; [1,1]<br>输出：[2]</p>\n<p>提示：</p>\n<p>n &#x3D;&#x3D; nums.length<br>1 &lt;&#x3D; n &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; n<br>进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\">https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array</a></p>\n<p>额外使用一个数组作为hash表，记录哪个数字没有出现过：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间</p>\n<p>那么怎么不使用额外的空间呢？</p>\n<p>考虑只能从数组本身下手了</p>\n<p>官方答案：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路是这样</span>\n        <span class=\"token comment\">//发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,</span>\n        <span class=\"token comment\">// 有可能存在多次+n的情况，实际值为: value %n即可。</span>\n        <span class=\"token comment\">// 可能存在没有+n的情况，那就是没有出现在范围内容的数字</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//找到这个数对应的数组下标</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>length <span class=\"token punctuation\">;</span>\n            nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//只要是出现过，那就肯定大于n</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样就可以已当前数组为哈希表。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [4,3,2,7,8,2,3,1]<br>输出：[5,6]<br>示例 2：</p>\n<p>输入：nums &#x3D; [1,1]<br>输出：[2]</p>\n<p>提示：</p>\n<p>n &#x3D;&#x3D; nums.length<br>1 &lt;&#x3D; n &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; n<br>进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\">https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array</a></p>\n<p>额外使用一个数组作为hash表，记录哪个数字没有出现过：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间</p>\n<p>那么怎么不使用额外的空间呢？</p>\n<p>考虑只能从数组本身下手了</p>\n<p>官方答案：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路是这样</span>\n        <span class=\"token comment\">//发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,</span>\n        <span class=\"token comment\">// 有可能存在多次+n的情况，实际值为: value %n即可。</span>\n        <span class=\"token comment\">// 可能存在没有+n的情况，那就是没有出现在范围内容的数字</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//找到这个数对应的数组下标</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>length <span class=\"token punctuation\">;</span>\n            nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//只要是出现过，那就肯定大于n</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样就可以已当前数组为哈希表。</p>\n"},{"title":"力扣热题100题-无重复字符的最长子串","date":"2023-03-27T06:47:50.000Z","_content":"\n\n给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。\n\n示例 1:\n\n输入: s = \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n示例 2:\n\n输入: s = \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n示例 3:\n\n输入: s = \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n\n\n提示：\n\n0 <= s.length <= 5 * 10^4\n\ns 由英文字母、数字、符号和空格组成\n\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n\n\n提示：\n\n0 <= s.length <= 5 * 104\ns 由英文字母、数字、符号和空格组成\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/longest-substring-without-repeating-characters\n\n解法1：超时\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        //假如使用动态规划,好像不太符合，因为动态规划无法判断当前字符同之前的字符是否相同。不同通过某种公式推导出来。\n\n        //ok，那现在就是看看笨的方法了,把字符串不同的记录下来\n        int maxResult = 0;\n        for(int i = 0 ; i < s.toCharArray().length; i++){\n            List<Character> charList = new ArrayList<>();\n            char ch = s.toCharArray()[i];\n            charList.add(ch);\n            for(int j = i+1; j < s.toCharArray().length; j++){\n                if(charList.contains(s.toCharArray()[j])){\n                    break;\n                }\n                charList.add(s.toCharArray()[j]);\n            }\n            maxResult = Math.max(maxResult,charList.size());\n        }\n        return maxResult;\n    }\n}\n```\n\n解法2：\n滑动窗口\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        //什么是滑动窗口？\n        // 从第一个节点开始，计算到第几个节点才有不重复的数字\n        // 如果有重复的字符\n        Map<Character,Integer> map = new HashMap<>();\n\n        int maxLength = 0; //最大的长度\n\n        int leftIndex = 0; // 最左侧的值，用于记录当前索引值下，能够记录到的最长的无重复的子串\n\n        //\n        for(int i = 0; i < s.length(); i++){\n            //如果不包含此字符，那么在当前的最大长度就是索引值减 left\n            if(map.containsKey(s.charAt(i))){\n                //如果包含，则获取当前字符的索引值+1，使子串长度减少一位，然后看看是哪个的最左子串的索引位置值最大\n                leftIndex = Math.max(map.get(s.charAt(i))+1,leftIndex); //最左的字符需要跟当前字符串的索引位置比大小 \n            }\n            maxLength = Math.max(maxLength,i-leftIndex+1);\n            map.put(s.charAt(i),i);\n        }\n        return maxLength;\n    }\n}\n```\n\n\n\n这样的话，时间复杂度就是O(n)\n","source":"_posts/力扣热题100题-无重复字符的最长子串.md","raw":"---\ntitle: 力扣热题100题-无重复字符的最长子串\ndate: 2023-03-27 14:47:50\ntags:\n  - 算法\n  - 滑动窗口算法\n  - 力扣热题100题\n---\n\n\n给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。\n\n示例 1:\n\n输入: s = \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n示例 2:\n\n输入: s = \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n示例 3:\n\n输入: s = \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n\n\n提示：\n\n0 <= s.length <= 5 * 10^4\n\ns 由英文字母、数字、符号和空格组成\n\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n\n\n提示：\n\n0 <= s.length <= 5 * 104\ns 由英文字母、数字、符号和空格组成\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/longest-substring-without-repeating-characters\n\n解法1：超时\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        //假如使用动态规划,好像不太符合，因为动态规划无法判断当前字符同之前的字符是否相同。不同通过某种公式推导出来。\n\n        //ok，那现在就是看看笨的方法了,把字符串不同的记录下来\n        int maxResult = 0;\n        for(int i = 0 ; i < s.toCharArray().length; i++){\n            List<Character> charList = new ArrayList<>();\n            char ch = s.toCharArray()[i];\n            charList.add(ch);\n            for(int j = i+1; j < s.toCharArray().length; j++){\n                if(charList.contains(s.toCharArray()[j])){\n                    break;\n                }\n                charList.add(s.toCharArray()[j]);\n            }\n            maxResult = Math.max(maxResult,charList.size());\n        }\n        return maxResult;\n    }\n}\n```\n\n解法2：\n滑动窗口\n\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        //什么是滑动窗口？\n        // 从第一个节点开始，计算到第几个节点才有不重复的数字\n        // 如果有重复的字符\n        Map<Character,Integer> map = new HashMap<>();\n\n        int maxLength = 0; //最大的长度\n\n        int leftIndex = 0; // 最左侧的值，用于记录当前索引值下，能够记录到的最长的无重复的子串\n\n        //\n        for(int i = 0; i < s.length(); i++){\n            //如果不包含此字符，那么在当前的最大长度就是索引值减 left\n            if(map.containsKey(s.charAt(i))){\n                //如果包含，则获取当前字符的索引值+1，使子串长度减少一位，然后看看是哪个的最左子串的索引位置值最大\n                leftIndex = Math.max(map.get(s.charAt(i))+1,leftIndex); //最左的字符需要跟当前字符串的索引位置比大小 \n            }\n            maxLength = Math.max(maxLength,i-leftIndex+1);\n            map.put(s.charAt(i),i);\n        }\n        return maxLength;\n    }\n}\n```\n\n\n\n这样的话，时间复杂度就是O(n)\n","slug":"力扣热题100题-无重复字符的最长子串","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202h001ttp4l0zzfeh51","content":"<p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<p>示例 1:</p>\n<p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p>\n<p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p>\n<p>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 10^4</p>\n<p>s 由英文字母、数字、符号和空格组成</p>\n<p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104<br>s 由英文字母、数字、符号和空格组成</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters\">https://leetcode.cn/problems/longest-substring-without-repeating-characters</a></p>\n<p>解法1：超时</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//假如使用动态规划,好像不太符合，因为动态规划无法判断当前字符同之前的字符是否相同。不同通过某种公式推导出来。</span>\n\n        <span class=\"token comment\">//ok，那现在就是看看笨的方法了,把字符串不同的记录下来</span>\n        <span class=\"token keyword\">int</span> maxResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> charList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            charList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                charList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            maxResult <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxResult<span class=\"token punctuation\">,</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> maxResult<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解法2：<br>滑动窗口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//什么是滑动窗口？</span>\n        <span class=\"token comment\">// 从第一个节点开始，计算到第几个节点才有不重复的数字</span>\n        <span class=\"token comment\">// 如果有重复的字符</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> maxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最大的长度</span>\n\n        <span class=\"token keyword\">int</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最左侧的值，用于记录当前索引值下，能够记录到的最长的无重复的子串</span>\n\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果不包含此字符，那么在当前的最大长度就是索引值减 left</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//如果包含，则获取当前字符的索引值+1，使子串长度减少一位，然后看看是哪个的最左子串的索引位置值最大</span>\n                leftIndex <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>leftIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最左的字符需要跟当前字符串的索引位置比大小 </span>\n            <span class=\"token punctuation\">&#125;</span>\n            maxLength <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxLength<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span>leftIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> maxLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这样的话，时间复杂度就是O(n)</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<p>示例 1:</p>\n<p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p>\n<p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p>\n<p>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 10^4</p>\n<p>s 由英文字母、数字、符号和空格组成</p>\n<p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104<br>s 由英文字母、数字、符号和空格组成</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters\">https://leetcode.cn/problems/longest-substring-without-repeating-characters</a></p>\n<p>解法1：超时</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//假如使用动态规划,好像不太符合，因为动态规划无法判断当前字符同之前的字符是否相同。不同通过某种公式推导出来。</span>\n\n        <span class=\"token comment\">//ok，那现在就是看看笨的方法了,把字符串不同的记录下来</span>\n        <span class=\"token keyword\">int</span> maxResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> charList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            charList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                charList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            maxResult <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxResult<span class=\"token punctuation\">,</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> maxResult<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解法2：<br>滑动窗口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//什么是滑动窗口？</span>\n        <span class=\"token comment\">// 从第一个节点开始，计算到第几个节点才有不重复的数字</span>\n        <span class=\"token comment\">// 如果有重复的字符</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> maxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最大的长度</span>\n\n        <span class=\"token keyword\">int</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最左侧的值，用于记录当前索引值下，能够记录到的最长的无重复的子串</span>\n\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果不包含此字符，那么在当前的最大长度就是索引值减 left</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//如果包含，则获取当前字符的索引值+1，使子串长度减少一位，然后看看是哪个的最左子串的索引位置值最大</span>\n                leftIndex <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>leftIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//最左的字符需要跟当前字符串的索引位置比大小 </span>\n            <span class=\"token punctuation\">&#125;</span>\n            maxLength <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxLength<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span>leftIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> maxLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这样的话，时间复杂度就是O(n)</p>\n"},{"title":"力扣热题100题-最大子数组和","date":"2022-06-18T11:27:25.000Z","_content":"\n给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n子数组 是数组中的一个连续部分。\n\n \n\n示例 1：\n\n```\n输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n```\n\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n示例 2：\n\n```\n输入：nums = [1]\n输出：1\n```\n\n示例 3：\n\n```\n输入：nums = [5,4,-1,7,8]\n输出：23\n```\n\n\n提示：\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n\n进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/maximum-subarray\n\n暴力解法：\n\n```java\n/**\n    暴力解法：\n     */\n    public int maxSubArray(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < nums.length ;i++){\n            max = Math.max(max,nums[i]);\n            int temp = nums[i];\n            for(int j = i+1 ; j < nums.length ;j++){\n                temp = temp + nums[j];\n                max = Math.max(max,temp);\n            }\n        }\n        return max;\n    }\n```\n\n力扣显示超时，思考如何优化算法的时间复杂度。\n\n\n\n\u0003\u0003动态规划版本一：\n\n```java\npublic int maxSubArray2(int[] nums) {\n    int len = nums.length;\n    // dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和\n    int[] dp = new int[len];\n    dp[0] = nums[0];\n\n    for (int i = 1; i < len; i++) {\n        //当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数\n        if (dp[i - 1] > 0) {\n            dp[i] = dp[i - 1] + nums[i];\n        } else {\n            dp[i] = nums[i];\n        }\n    }\n\n    // 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择\n    int res = dp[0];\n    for (int i = 1; i < len; i++) {\n        res = Math.max(res, dp[i]);\n    }\n    return res;\n}\n```\n\n\n\n动态规划版本二：\n\n```java\n/**\n     * 动态规划\n     */\n    public int maxSubArray(int[] nums) {\n        //f(n) = max(f(n-1) + nums[n], nums[n]);\n        // 前置的和\n        int preSum = 0;\n\n        // 最大值，所有的前置和的最大值。\n        int max = nums[0];\n\n        for (int num : nums) {\n            preSum = Math.max(preSum + num, num);\n            max = Math.max(max, preSum);\n        }\n        return max;\n    }\n```\n\n动态规划的方程必须要理解一个点：\n\n**子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。**\n\n方法二：分治法\n\n连续子序列的最大和主要由这三部分子区间里元素的最大和得到：\n\n- 第 1 部分：子区间 [left, mid]；\n\n- 第 2 部分：子区间 [mid + 1, right]；\n- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n\n对这三个部分求最大值即可。\n\n```java\npublic int maxSubArray(int[] nums) {\n        int len = nums.length;\n        return maxSubArraySum(nums, 0, len-1);\n    }\n\n//- 第 1 部分：子区间 [left, mid]；\n//- 第 2 部分：子区间 [mid + 1, right]；\n//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n    //最大子数组和\n    private int maxSubArraySum(int[] nums, int left, int right) {\n\n        if (left == right) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        //\n        return Math.max(maxSubArraySum(nums, left, mid),\n                Math.max(maxSubArraySum(nums, left + 1, right),\n                        maxCrossingSum(nums, left, mid, right)));\n    }\n\n    private int maxCrossingSum(int[] nums, int left, int mid, int right) {\n        // 一定会包含 nums[mid] 这个元素\n        int sum = 0;\n        int leftSum = Integer.MIN_VALUE;\n        // 左半边包含 nums[mid] 元素，最多可以到什么地方\n        // 走到最边界，看看最值是什么\n        // 计算以 mid 结尾的最大的子数组的和\n        for (int i = mid; i >= left; i--) {\n            sum += nums[i];\n            if (sum > leftSum) {\n                leftSum = sum;\n            }\n        }\n        sum = 0;\n        int rightSum = Integer.MIN_VALUE;\n        // 右半边不包含 nums[mid] 元素，最多可以到什么地方\n        // 计算以 mid+1 开始的最大的子数组的和\n        for (int i = mid + 1; i <= right; i++) {\n            sum += nums[i];\n            if (sum > rightSum) {\n                rightSum = sum;\n            }\n        }\n        return leftSum + rightSum;\n    }\n```\n\n\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；\n空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。\n\n\n\n\n\n\n\n","source":"_posts/力扣热题100题-最大子数组和.md","raw":"---\ntitle: 力扣热题100题-最大子数组和\ndate: 2022-06-18 19:27:25\ntags:\n  - 算法\n  - 力扣热题100题\n  - 待回顾\n---\n\n给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n子数组 是数组中的一个连续部分。\n\n \n\n示例 1：\n\n```\n输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n```\n\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n示例 2：\n\n```\n输入：nums = [1]\n输出：1\n```\n\n示例 3：\n\n```\n输入：nums = [5,4,-1,7,8]\n输出：23\n```\n\n\n提示：\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n\n进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/maximum-subarray\n\n暴力解法：\n\n```java\n/**\n    暴力解法：\n     */\n    public int maxSubArray(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < nums.length ;i++){\n            max = Math.max(max,nums[i]);\n            int temp = nums[i];\n            for(int j = i+1 ; j < nums.length ;j++){\n                temp = temp + nums[j];\n                max = Math.max(max,temp);\n            }\n        }\n        return max;\n    }\n```\n\n力扣显示超时，思考如何优化算法的时间复杂度。\n\n\n\n\u0003\u0003动态规划版本一：\n\n```java\npublic int maxSubArray2(int[] nums) {\n    int len = nums.length;\n    // dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和\n    int[] dp = new int[len];\n    dp[0] = nums[0];\n\n    for (int i = 1; i < len; i++) {\n        //当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数\n        if (dp[i - 1] > 0) {\n            dp[i] = dp[i - 1] + nums[i];\n        } else {\n            dp[i] = nums[i];\n        }\n    }\n\n    // 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择\n    int res = dp[0];\n    for (int i = 1; i < len; i++) {\n        res = Math.max(res, dp[i]);\n    }\n    return res;\n}\n```\n\n\n\n动态规划版本二：\n\n```java\n/**\n     * 动态规划\n     */\n    public int maxSubArray(int[] nums) {\n        //f(n) = max(f(n-1) + nums[n], nums[n]);\n        // 前置的和\n        int preSum = 0;\n\n        // 最大值，所有的前置和的最大值。\n        int max = nums[0];\n\n        for (int num : nums) {\n            preSum = Math.max(preSum + num, num);\n            max = Math.max(max, preSum);\n        }\n        return max;\n    }\n```\n\n动态规划的方程必须要理解一个点：\n\n**子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。**\n\n方法二：分治法\n\n连续子序列的最大和主要由这三部分子区间里元素的最大和得到：\n\n- 第 1 部分：子区间 [left, mid]；\n\n- 第 2 部分：子区间 [mid + 1, right]；\n- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n\n对这三个部分求最大值即可。\n\n```java\npublic int maxSubArray(int[] nums) {\n        int len = nums.length;\n        return maxSubArraySum(nums, 0, len-1);\n    }\n\n//- 第 1 部分：子区间 [left, mid]；\n//- 第 2 部分：子区间 [mid + 1, right]；\n//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n    //最大子数组和\n    private int maxSubArraySum(int[] nums, int left, int right) {\n\n        if (left == right) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        //\n        return Math.max(maxSubArraySum(nums, left, mid),\n                Math.max(maxSubArraySum(nums, left + 1, right),\n                        maxCrossingSum(nums, left, mid, right)));\n    }\n\n    private int maxCrossingSum(int[] nums, int left, int mid, int right) {\n        // 一定会包含 nums[mid] 这个元素\n        int sum = 0;\n        int leftSum = Integer.MIN_VALUE;\n        // 左半边包含 nums[mid] 元素，最多可以到什么地方\n        // 走到最边界，看看最值是什么\n        // 计算以 mid 结尾的最大的子数组的和\n        for (int i = mid; i >= left; i--) {\n            sum += nums[i];\n            if (sum > leftSum) {\n                leftSum = sum;\n            }\n        }\n        sum = 0;\n        int rightSum = Integer.MIN_VALUE;\n        // 右半边不包含 nums[mid] 元素，最多可以到什么地方\n        // 计算以 mid+1 开始的最大的子数组的和\n        for (int i = mid + 1; i <= right; i++) {\n            sum += nums[i];\n            if (sum > rightSum) {\n                rightSum = sum;\n            }\n        }\n        return leftSum + rightSum;\n    }\n```\n\n\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；\n空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。\n\n\n\n\n\n\n\n","slug":"力扣热题100题-最大子数组和","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202h001wtp4l4de42kn6","content":"<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]\n输出：6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [5,4,-1,7,8]\n输出：23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p>\n<p>进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/maximum-subarray\">https://leetcode.cn/problems/maximum-subarray</a></p>\n<p>暴力解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n    暴力解法：\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                temp <span class=\"token operator\">=</span> temp <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>力扣显示超时，思考如何优化算法的时间复杂度。</p>\n<p>\u0003\u0003动态规划版本一：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        res <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>动态规划版本二：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 动态规划\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//f(n) = max(f(n-1) + nums[n], nums[n]);</span>\n        <span class=\"token comment\">// 前置的和</span>\n        <span class=\"token keyword\">int</span> preSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 最大值，所有的前置和的最大值。</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            preSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>preSum <span class=\"token operator\">+</span> num<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> preSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>动态规划的方程必须要理解一个点：</p>\n<p><strong>子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。</strong></p>\n<p>方法二：分治法</p>\n<p>连续子序列的最大和主要由这三部分子区间里元素的最大和得到：</p>\n<ul>\n<li><p>第 1 部分：子区间 [left, mid]；</p>\n</li>\n<li><p>第 2 部分：子区间 [mid + 1, right]；</p>\n</li>\n<li><p>第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</p>\n</li>\n</ul>\n<p>对这三个部分求最大值即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//- 第 1 部分：子区间 [left, mid]；</span>\n<span class=\"token comment\">//- 第 2 部分：子区间 [mid + 1, right]；</span>\n<span class=\"token comment\">//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</span>\n    <span class=\"token comment\">//最大子数组和</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 一定会包含 nums[mid] 这个元素</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leftSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 左半边包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 走到最边界，看看最值是什么</span>\n        <span class=\"token comment\">// 计算以 mid 结尾的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> leftSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leftSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 右半边不包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 计算以 mid+1 开始的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> rightSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rightSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> leftSum <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；<br>空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]\n输出：6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [5,4,-1,7,8]\n输出：23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p>\n<p>进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/maximum-subarray\">https://leetcode.cn/problems/maximum-subarray</a></p>\n<p>暴力解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n    暴力解法：\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                temp <span class=\"token operator\">=</span> temp <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>力扣显示超时，思考如何优化算法的时间复杂度。</p>\n<p>\u0003\u0003动态规划版本一：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        res <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>动态规划版本二：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 动态规划\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//f(n) = max(f(n-1) + nums[n], nums[n]);</span>\n        <span class=\"token comment\">// 前置的和</span>\n        <span class=\"token keyword\">int</span> preSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 最大值，所有的前置和的最大值。</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            preSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>preSum <span class=\"token operator\">+</span> num<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> preSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>动态规划的方程必须要理解一个点：</p>\n<p><strong>子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。</strong></p>\n<p>方法二：分治法</p>\n<p>连续子序列的最大和主要由这三部分子区间里元素的最大和得到：</p>\n<ul>\n<li><p>第 1 部分：子区间 [left, mid]；</p>\n</li>\n<li><p>第 2 部分：子区间 [mid + 1, right]；</p>\n</li>\n<li><p>第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</p>\n</li>\n</ul>\n<p>对这三个部分求最大值即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//- 第 1 部分：子区间 [left, mid]；</span>\n<span class=\"token comment\">//- 第 2 部分：子区间 [mid + 1, right]；</span>\n<span class=\"token comment\">//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</span>\n    <span class=\"token comment\">//最大子数组和</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 一定会包含 nums[mid] 这个元素</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leftSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 左半边包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 走到最边界，看看最值是什么</span>\n        <span class=\"token comment\">// 计算以 mid 结尾的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> leftSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leftSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 右半边不包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 计算以 mid+1 开始的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> rightSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rightSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> leftSum <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；<br>空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。</p>\n"},{"title":"力扣热题100题-有效的括号","date":"2022-06-18T04:02:26.000Z","_content":"\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n\n示例 1：\n\n```\n输入：s = \"()\"\n输出：true\n```\n\n示例 2：\n\n```\n输入：s = \"()[]{}\"\n输出：true\n```\n\n示例 3：\n\n```\n输入：s = \"(]\"\n输出：false\n```\n\n示例 4：\n\n```\n输入：s = \"([)]\"\n输出：false\n```\n\n示例 5：\n\n```\n输入：s = \"{[]}\"\n输出：true\n```\n\n\n提示：\n\n1 <= s.length <= 104\ns 仅由括号 '()[]{}' 组成\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/valid-parentheses\n\n解答：\n\n```java\npublic boolean isValid(String s) {\n        //借助栈\n        Deque<Character> stack = new ArrayDeque<Character>();\n        char[] charArray = s.toCharArray();\n        for(char c : charArray){\n            if('{' == c){\n                stack.push('}');\n            } else if ('(' == c){\n                stack.push(')');\n            } else if ('[' == c){\n                stack.push(']');\n            } else if (stack.isEmpty() || c != stack.pop()){\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n```\n\n时间复杂度：O(n) 空间复杂度O(n)\n","source":"_posts/力扣热题100题-有效的括号.md","raw":"---\ntitle: 力扣热题100题-有效的括号\ndate: 2022-06-18 12:02:26\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n\n示例 1：\n\n```\n输入：s = \"()\"\n输出：true\n```\n\n示例 2：\n\n```\n输入：s = \"()[]{}\"\n输出：true\n```\n\n示例 3：\n\n```\n输入：s = \"(]\"\n输出：false\n```\n\n示例 4：\n\n```\n输入：s = \"([)]\"\n输出：false\n```\n\n示例 5：\n\n```\n输入：s = \"{[]}\"\n输出：true\n```\n\n\n提示：\n\n1 <= s.length <= 104\ns 仅由括号 '()[]{}' 组成\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/valid-parentheses\n\n解答：\n\n```java\npublic boolean isValid(String s) {\n        //借助栈\n        Deque<Character> stack = new ArrayDeque<Character>();\n        char[] charArray = s.toCharArray();\n        for(char c : charArray){\n            if('{' == c){\n                stack.push('}');\n            } else if ('(' == c){\n                stack.push(')');\n            } else if ('[' == c){\n                stack.push(']');\n            } else if (stack.isEmpty() || c != stack.pop()){\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n```\n\n时间复杂度：O(n) 空间复杂度O(n)\n","slug":"力扣热题100题-有效的括号","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202h001ytp4lb94s62g7","content":"<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;(]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 4：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;([)]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 5：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;&#123;[]&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 仅由括号 ‘()[]{}’ 组成</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/valid-parentheses\">https://leetcode.cn/problems/valid-parentheses</a></p>\n<p>解答：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//借助栈</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#123;'</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'('</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'['</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">!=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度O(n)</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;(]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 4：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;([)]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 5：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;&#123;[]&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 仅由括号 ‘()[]{}’ 组成</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/valid-parentheses\">https://leetcode.cn/problems/valid-parentheses</a></p>\n<p>解答：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//借助栈</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#123;'</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'('</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'['</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">!=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度O(n)</p>\n"},{"title":"力扣热题100题-比特位计数","date":"2023-01-05T14:04:36.000Z","_content":"\n给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。\n\n示例 1：\n\n输入：n = 2\n输出：[0,1,1]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n示例 2：\n\n输入：n = 5\n输出：[0,1,1,2,1,2]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n\n提示：\n\n0 <= n <= 105\n\n\n进阶：\n\n很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？\n你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/counting-bits\n\n\n\n解答1：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = Integer.bitCount(i);\n        }\n        return result;\n    }\n}\n```\n\n使用Integer工具计算二进制中1的个数。\n\n但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？\n\n解法2：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = getOneNum(i);\n        }\n        return result;\n    }\n\n    /**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 & 0 = 01;\n    2 & 1 = 00\n    3 & 2 = 01\n     */\n    public int getOneNum(int i){\n        int count =0;\n        while(i > 0){\n            i = i&(i-1);\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n此算法的时间复杂度为：O(N log N)\n\n空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。\n\n思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&2 = 1  下一步要计算 1&0 但在此之前已经计算过1&0了，所有，可以减少这类计算的次数，由此得到解法3.\n\n解法3：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        int bigHight = 0;\n        for(int i =1;i<=n;i++){\n            bigHight = i&(i-1);\n            if(bigHight == 0){\n                result[i] = 0 + 1;\n            } else {\n                result[i] = result[bigHight] +1;\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(N)\n\n优化为：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =1;i<=n;i++){\n            result[i] = result[i&(i-1)] +1;\n        }\n        return result;\n    }\n}\n```\n\n\n\n赞👍🏻\n\n\n\n\n\n","source":"_posts/力扣热题100题-比特位计数.md","raw":"---\ntitle: 力扣热题100题-比特位计数\ndate: 2023-01-05 22:04:36\ntags:\n  - 二进制\n  - 算法\n  - 力扣热题100题\n---\n\n给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。\n\n示例 1：\n\n输入：n = 2\n输出：[0,1,1]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n示例 2：\n\n输入：n = 5\n输出：[0,1,1,2,1,2]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n\n提示：\n\n0 <= n <= 105\n\n\n进阶：\n\n很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？\n你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/counting-bits\n\n\n\n解答1：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = Integer.bitCount(i);\n        }\n        return result;\n    }\n}\n```\n\n使用Integer工具计算二进制中1的个数。\n\n但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？\n\n解法2：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = getOneNum(i);\n        }\n        return result;\n    }\n\n    /**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 & 0 = 01;\n    2 & 1 = 00\n    3 & 2 = 01\n     */\n    public int getOneNum(int i){\n        int count =0;\n        while(i > 0){\n            i = i&(i-1);\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n此算法的时间复杂度为：O(N log N)\n\n空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。\n\n思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&2 = 1  下一步要计算 1&0 但在此之前已经计算过1&0了，所有，可以减少这类计算的次数，由此得到解法3.\n\n解法3：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        int bigHight = 0;\n        for(int i =1;i<=n;i++){\n            bigHight = i&(i-1);\n            if(bigHight == 0){\n                result[i] = 0 + 1;\n            } else {\n                result[i] = result[bigHight] +1;\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(N)\n\n优化为：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =1;i<=n;i++){\n            result[i] = result[i&(i-1)] +1;\n        }\n        return result;\n    }\n}\n```\n\n\n\n赞👍🏻\n\n\n\n\n\n","slug":"力扣热题100题-比特位计数","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202i0021tp4lharx0es9","content":"<p>给你一个整数 n ，对于 0 &lt;&#x3D; i &lt;&#x3D; n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：[0,1,1]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>示例 2：</p>\n<p>输入：n &#x3D; 5<br>输出：[0,1,1,2,1,2]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>3 –&gt; 11<br>4 –&gt; 100<br>5 –&gt; 101</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; n &lt;&#x3D; 105</p>\n<p>进阶：</p>\n<p>很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？<br>你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/counting-bits\">https://leetcode.cn/problems/counting-bits</a></p>\n<p>解答1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用Integer工具计算二进制中1的个数。</p>\n<p>但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？</p>\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 &amp; 0 = 01;\n    2 &amp; 1 = 00\n    3 &amp; 2 = 01\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            i <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此算法的时间复杂度为：O(N log N)</p>\n<p>空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。</p>\n<p>思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&amp;2 &#x3D; 1  下一步要计算 1&amp;0 但在此之前已经计算过1&amp;0了，所有，可以减少这类计算的次数，由此得到解法3.</p>\n<p>解法3：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bigHight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            bigHight <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bigHight <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>bigHight<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)</p>\n<p>优化为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>赞👍🏻</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个整数 n ，对于 0 &lt;&#x3D; i &lt;&#x3D; n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：[0,1,1]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>示例 2：</p>\n<p>输入：n &#x3D; 5<br>输出：[0,1,1,2,1,2]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>3 –&gt; 11<br>4 –&gt; 100<br>5 –&gt; 101</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; n &lt;&#x3D; 105</p>\n<p>进阶：</p>\n<p>很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？<br>你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/counting-bits\">https://leetcode.cn/problems/counting-bits</a></p>\n<p>解答1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用Integer工具计算二进制中1的个数。</p>\n<p>但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？</p>\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 &amp; 0 = 01;\n    2 &amp; 1 = 00\n    3 &amp; 2 = 01\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            i <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此算法的时间复杂度为：O(N log N)</p>\n<p>空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。</p>\n<p>思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&amp;2 &#x3D; 1  下一步要计算 1&amp;0 但在此之前已经计算过1&amp;0了，所有，可以减少这类计算的次数，由此得到解法3.</p>\n<p>解法3：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bigHight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            bigHight <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bigHight <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>bigHight<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)</p>\n<p>优化为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>赞👍🏻</p>\n"},{"title":"力扣热题100题-汉明距离","date":"2023-01-30T14:42:15.000Z","_content":"\n两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。\n\n给你两个整数 x 和 y，计算并返回它们之间的汉明距离。\n\n示例 1：\n\n输入：x = 1, y = 4\n输出：2\n解释：\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\n上面的箭头指出了对应二进制位不同的位置。\n示例 2：\n\n输入：x = 3, y = 1\n输出：1\n\n\n提示：\n\n0 <= x, y <= 2$31$ - 1\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/hamming-distance\n\n\n\n使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        //计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            count += z & 1;\n            z = z >> 1;\n        }\n        return count;\n    }\n}\n```\n\n时间复杂度：O(log(C))  C 表示是n的二进制位数\n\n不使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        \n        int count = 0;\n\n        while(x != 0 || y != 0){\n            if((x&1) != (y&1)){\n                count++;\n            }\n            x=x>>1;\n            y=y>>1;\n        }\n        return count;\n    }\n}\n```\n\n\n\n使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        return Integer.bitCount(x ^ y);\n    }\n}\n```\n\n\n\n来自官方：Brian Kernighan 算法\n\n（`n & (n - 1)`可以把最右边的1变为0）！！！！！\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            z = z&(z-1); // n 同 n-1做与运算是为了消除最右边的1\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n","source":"_posts/力扣热题100题-汉明距离.md","raw":"---\ntitle: 力扣热题100题-汉明距离\ndate: 2023-01-30 22:42:15\ntags:\n  - 二进制\n  - 算法\n  - 力扣热题100题\n---\n\n两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。\n\n给你两个整数 x 和 y，计算并返回它们之间的汉明距离。\n\n示例 1：\n\n输入：x = 1, y = 4\n输出：2\n解释：\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\n上面的箭头指出了对应二进制位不同的位置。\n示例 2：\n\n输入：x = 3, y = 1\n输出：1\n\n\n提示：\n\n0 <= x, y <= 2$31$ - 1\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/hamming-distance\n\n\n\n使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        //计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            count += z & 1;\n            z = z >> 1;\n        }\n        return count;\n    }\n}\n```\n\n时间复杂度：O(log(C))  C 表示是n的二进制位数\n\n不使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        \n        int count = 0;\n\n        while(x != 0 || y != 0){\n            if((x&1) != (y&1)){\n                count++;\n            }\n            x=x>>1;\n            y=y>>1;\n        }\n        return count;\n    }\n}\n```\n\n\n\n使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        return Integer.bitCount(x ^ y);\n    }\n}\n```\n\n\n\n来自官方：Brian Kernighan 算法\n\n（`n & (n - 1)`可以把最右边的1变为0）！！！！！\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            z = z&(z-1); // n 同 n-1做与运算是为了消除最右边的1\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n","slug":"力扣热题100题-汉明距离","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202i0023tp4lh7t0589v","content":"<p>两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。</p>\n<p>给你两个整数 x 和 y，计算并返回它们之间的汉明距离。</p>\n<p>示例 1：</p>\n<p>输入：x &#x3D; 1, y &#x3D; 4<br>输出：2<br>解释：<br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>       ↑   ↑<br>上面的箭头指出了对应二进制位不同的位置。<br>示例 2：</p>\n<p>输入：x &#x3D; 3, y &#x3D; 1<br>输出：1</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; x, y &lt;&#x3D; 2$31$ - 1</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/hamming-distance\">https://leetcode.cn/problems/hamming-distance</a></p>\n<p>使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            count <span class=\"token operator\">+=</span> z <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            z <span class=\"token operator\">=</span> z <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(log(C))  C 表示是n的二进制位数</p>\n<p>不使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x<span class=\"token operator\">=</span>x<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">=</span>y<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>来自官方：Brian Kernighan 算法</p>\n<p>（<code>n &amp; (n - 1)</code>可以把最右边的1变为0）！！！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            z <span class=\"token operator\">=</span> z<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n 同 n-1做与运算是为了消除最右边的1</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。</p>\n<p>给你两个整数 x 和 y，计算并返回它们之间的汉明距离。</p>\n<p>示例 1：</p>\n<p>输入：x &#x3D; 1, y &#x3D; 4<br>输出：2<br>解释：<br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>       ↑   ↑<br>上面的箭头指出了对应二进制位不同的位置。<br>示例 2：</p>\n<p>输入：x &#x3D; 3, y &#x3D; 1<br>输出：1</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; x, y &lt;&#x3D; 2$31$ - 1</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/hamming-distance\">https://leetcode.cn/problems/hamming-distance</a></p>\n<p>使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            count <span class=\"token operator\">+=</span> z <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            z <span class=\"token operator\">=</span> z <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(log(C))  C 表示是n的二进制位数</p>\n<p>不使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x<span class=\"token operator\">=</span>x<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">=</span>y<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>来自官方：Brian Kernighan 算法</p>\n<p>（<code>n &amp; (n - 1)</code>可以把最右边的1变为0）！！！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            z <span class=\"token operator\">=</span> z<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n 同 n-1做与运算是为了消除最右边的1</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-爬楼梯","date":"2022-06-22T16:05:30.000Z","_content":"\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n \n\n示例 1：\n\n输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。\n1. 1 阶 + 1 阶\n2. 2 阶\n示例 2：\n\n输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。\n1. 1 阶 + 1 阶 + 1 阶\n2. 1 阶 + 2 阶\n3. 2 阶 + 1 阶\n\n\n提示：\n\n1 <= n <= 45\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/climbing-stairs\n\n\n\n思路：\n\n找到规律：\n\nn = 2  结果为2\n\nn = 3  结果为3\n\nn = 4 结果为5\n\nn = 5 结果为8\n\n由此可以推导：f(n) = f(n-1) + f(n-2)\n\n```java\n//使用递归算法\npublic int climbStairs(int n) {\n        if(n == 2){\n            return 2;\n        }\n        if(n == 3){\n            return 3;\n        }\n        return climbStairs(n -1) + climbStairs (n -2);\n    }\n```\n\n提交效果为超时。\n\n怎么不使用递归算法呢？\n\n定义两个额外的元素，然后计算。\n\n```java\npublic int sum = 2;\n    public int pre = 1;\n    public int climbStairs(int n) {\n        if(n == 1){\n            return 1;\n        }\n        if(n == 2){\n            return 2;\n        }\n\n        for(int i = 3; i <= n; i++){\n            int temp = sum;\n            sum = sum + pre;\n            pre = temp;\n        }\n        return sum;\n    }\n```\n\n","source":"_posts/力扣热题100题-爬楼梯.md","raw":"---\ntitle: 力扣热题100题-爬楼梯\ndate: 2022-06-23 00:05:30\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n \n\n示例 1：\n\n输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。\n1. 1 阶 + 1 阶\n2. 2 阶\n示例 2：\n\n输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。\n1. 1 阶 + 1 阶 + 1 阶\n2. 1 阶 + 2 阶\n3. 2 阶 + 1 阶\n\n\n提示：\n\n1 <= n <= 45\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/climbing-stairs\n\n\n\n思路：\n\n找到规律：\n\nn = 2  结果为2\n\nn = 3  结果为3\n\nn = 4 结果为5\n\nn = 5 结果为8\n\n由此可以推导：f(n) = f(n-1) + f(n-2)\n\n```java\n//使用递归算法\npublic int climbStairs(int n) {\n        if(n == 2){\n            return 2;\n        }\n        if(n == 3){\n            return 3;\n        }\n        return climbStairs(n -1) + climbStairs (n -2);\n    }\n```\n\n提交效果为超时。\n\n怎么不使用递归算法呢？\n\n定义两个额外的元素，然后计算。\n\n```java\npublic int sum = 2;\n    public int pre = 1;\n    public int climbStairs(int n) {\n        if(n == 1){\n            return 1;\n        }\n        if(n == 2){\n            return 2;\n        }\n\n        for(int i = 3; i <= n; i++){\n            int temp = sum;\n            sum = sum + pre;\n            pre = temp;\n        }\n        return sum;\n    }\n```\n\n","slug":"力扣热题100题-爬楼梯","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202i0026tp4l4uak08v4","content":"<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶<br>示例 2：</li>\n</ol>\n<p>输入：n &#x3D; 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ol>\n<p>提示：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 45</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/climbing-stairs\">https://leetcode.cn/problems/climbing-stairs</a></p>\n<p>思路：</p>\n<p>找到规律：</p>\n<p>n &#x3D; 2  结果为2</p>\n<p>n &#x3D; 3  结果为3</p>\n<p>n &#x3D; 4 结果为5</p>\n<p>n &#x3D; 5 结果为8</p>\n<p>由此可以推导：f(n) &#x3D; f(n-1) + f(n-2)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用递归算法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> climbStairs <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>提交效果为超时。</p>\n<p>怎么不使用递归算法呢？</p>\n<p>定义两个额外的元素，然后计算。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> pre<span class=\"token punctuation\">;</span>\n            pre <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶<br>示例 2：</li>\n</ol>\n<p>输入：n &#x3D; 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ol>\n<p>提示：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 45</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/climbing-stairs\">https://leetcode.cn/problems/climbing-stairs</a></p>\n<p>思路：</p>\n<p>找到规律：</p>\n<p>n &#x3D; 2  结果为2</p>\n<p>n &#x3D; 3  结果为3</p>\n<p>n &#x3D; 4 结果为5</p>\n<p>n &#x3D; 5 结果为8</p>\n<p>由此可以推导：f(n) &#x3D; f(n-1) + f(n-2)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用递归算法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> climbStairs <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>提交效果为超时。</p>\n<p>怎么不使用递归算法呢？</p>\n<p>定义两个额外的元素，然后计算。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> pre<span class=\"token punctuation\">;</span>\n            pre <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-环形链表","date":"2023-02-28T14:32:13.000Z","_content":"\n给你一个链表的头节点 head ，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。\n\n如果链表中存在环 ，则返回 true 。 否则，返回 false 。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png)\n\n输入：head = [3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n示例 2：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n输入：head = [1,2], pos = 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。\n示例 3：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n输入：head = [1], pos = -1\n输出：false\n解释：链表中没有环。\n\n\n提示：\n\n链表中节点的数目范围是 [0, 104]\n-105 <= Node.val <= 105\npos 为 -1 或者链表中的一个 有效索引 。\n\n\n进阶：你能用 O(1)（即，常量）内存解决此问题吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/linked-list-cycle\n\n解法1：\n\n```java\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    //初步想法：存储在list中，判断是否存在环\n    public boolean hasCycle(ListNode head) {\n        if(head == null){\n            return false;\n        }\n        Set<ListNode> set = new HashSet<>();\n        while(head != null){\n            if(set.contains(head)){\n                return true;\n            }\n            set.add(head);\n            head = head.next;\n        }\n        return false;\n    }\n}\n```\n\n时间复杂度O(n)、空间复杂度O（n）\n\n\n\n解法2：\n\n```java\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    //第二次想法：快慢指针\n    public boolean hasCycle(ListNode head) {\n        if(head == null || head.next == null){\n            return false;\n        }\n        ListNode fast = head.next;\n\n        while(head != null && fast != null && head != fast){\n            head = head.next;\n            fast = fast.next == null ? null : fast.next.next;\n        }\n\n        if(fast == null){\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\n","source":"_posts/力扣热题100题-环形链表.md","raw":"---\ntitle: 力扣热题100题-环形链表\ndate: 2023-02-28 22:32:13\ntags:\n  - 算法\n  - 链表\n  - 力扣热题100题\n---\n\n给你一个链表的头节点 head ，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。\n\n如果链表中存在环 ，则返回 true 。 否则，返回 false 。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png)\n\n输入：head = [3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n示例 2：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n输入：head = [1,2], pos = 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。\n示例 3：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n输入：head = [1], pos = -1\n输出：false\n解释：链表中没有环。\n\n\n提示：\n\n链表中节点的数目范围是 [0, 104]\n-105 <= Node.val <= 105\npos 为 -1 或者链表中的一个 有效索引 。\n\n\n进阶：你能用 O(1)（即，常量）内存解决此问题吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/linked-list-cycle\n\n解法1：\n\n```java\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    //初步想法：存储在list中，判断是否存在环\n    public boolean hasCycle(ListNode head) {\n        if(head == null){\n            return false;\n        }\n        Set<ListNode> set = new HashSet<>();\n        while(head != null){\n            if(set.contains(head)){\n                return true;\n            }\n            set.add(head);\n            head = head.next;\n        }\n        return false;\n    }\n}\n```\n\n时间复杂度O(n)、空间复杂度O（n）\n\n\n\n解法2：\n\n```java\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    //第二次想法：快慢指针\n    public boolean hasCycle(ListNode head) {\n        if(head == null || head.next == null){\n            return false;\n        }\n        ListNode fast = head.next;\n\n        while(head != null && fast != null && head != fast){\n            head = head.next;\n            fast = fast.next == null ? null : fast.next.next;\n        }\n\n        if(fast == null){\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\n","slug":"力扣热题100题-环形链表","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202i0028tp4l8usge9g9","content":"<p>给你一个链表的头节点 head ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。<br>示例 2：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1,2], pos &#x3D; 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。<br>示例 3：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1], pos &#x3D; -1<br>输出：false<br>解释：链表中没有环。</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 104]<br>-105 &lt;&#x3D; Node.val &lt;&#x3D; 105<br>pos 为 -1 或者链表中的一个 有效索引 。</p>\n<p>进阶：你能用 O(1)（即，常量）内存解决此问题吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle\">https://leetcode.cn/problems/linked-list-cycle</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//初步想法：存储在list中，判断是否存在环</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度O(n)、空间复杂度O（n）</p>\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//第二次想法：快慢指针</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> head <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个链表的头节点 head ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。<br>示例 2：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1,2], pos &#x3D; 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。<br>示例 3：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1], pos &#x3D; -1<br>输出：false<br>解释：链表中没有环。</p>\n<p>提示：</p>\n<p>链表中节点的数目范围是 [0, 104]<br>-105 &lt;&#x3D; Node.val &lt;&#x3D; 105<br>pos 为 -1 或者链表中的一个 有效索引 。</p>\n<p>进阶：你能用 O(1)（即，常量）内存解决此问题吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle\">https://leetcode.cn/problems/linked-list-cycle</a></p>\n<p>解法1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//初步想法：存储在list中，判断是否存在环</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度O(n)、空间复杂度O（n）</p>\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//第二次想法：快慢指针</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> head <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-环形链表II","date":"2023-04-18T15:31:14.000Z","_content":"\n给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n不允许修改 链表。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)\n\n输入：head = [3,2,0,-4], pos = 1\n输出：返回索引为 1 的链表节点\n解释：链表中有一个环，其尾部连接到第二个节点。\n示例 2：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n输入：head = [1,2], pos = 0\n输出：返回索引为 0 的链表节点\n解释：链表中有一个环，其尾部连接到第一个节点。\n示例 3：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n输入：head = [1], pos = -1\n输出：返回 null\n解释：链表中没有环。\n\n\n提示：\n\n链表中节点的数目范围在范围 [0, 104] 内\n-105 <= Node.val <= 105\npos 的值为 -1 或者链表中的一个有效索引\n\n\n进阶：你是否可以使用 O(1) 空间解决此题？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/linked-list-cycle-ii\n\n\n\n先说题解：\n\n```\nslow * 2 = fast;\nslow = a + b;\nfast = a + b + c + b = a + 2*b + c;\n(a + b)*2 = a + 2*b + c;\na = c;\n```\n\n1. 快针走的是慢针的两倍。\n2. 慢针走过的路，快针走过一遍。\n3. 快针走过的剩余路程，也就是和慢针走过的全部路程相等。(a+b = c+b)\n4. 刨去快针追赶慢针的半圈(b)，剩余路程即为所求入环距离(a=c)\n\n\n\n屠龙之术：\n\n```java\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        \n        //1.使用快慢指针找到慢的那个指针,那么慢的指针肯定跟快的指针相等了。\n        ListNode fast = head;\n        ListNode slow = head;\n        \n        while(true){\n            if(fast == null || fast.next == null){\n                return null;\n            }\n            fast = fast.next.next;\n            slow = slow.next;\n            if(fast == slow){\n                break;\n            }\n        }\n        //\n        fast = head;\n        //2. \n        while(fast != slow){\n            fast = fast.next;\n            slow = slow.next;\n        }\n\n        return slow;\n\n    }\n}\n```\n\n\n\n时间复杂度：O(n)\n\n","source":"_posts/力扣热题100题-环形链表II.md","raw":"---\ntitle: 力扣热题100题-环形链表II\ndate: 2023-04-18 23:31:14\ntags:\n  - 算法\n  - 链表\n  - 力扣热题100题\n---\n\n给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n不允许修改 链表。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)\n\n输入：head = [3,2,0,-4], pos = 1\n输出：返回索引为 1 的链表节点\n解释：链表中有一个环，其尾部连接到第二个节点。\n示例 2：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n输入：head = [1,2], pos = 0\n输出：返回索引为 0 的链表节点\n解释：链表中有一个环，其尾部连接到第一个节点。\n示例 3：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n输入：head = [1], pos = -1\n输出：返回 null\n解释：链表中没有环。\n\n\n提示：\n\n链表中节点的数目范围在范围 [0, 104] 内\n-105 <= Node.val <= 105\npos 的值为 -1 或者链表中的一个有效索引\n\n\n进阶：你是否可以使用 O(1) 空间解决此题？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/linked-list-cycle-ii\n\n\n\n先说题解：\n\n```\nslow * 2 = fast;\nslow = a + b;\nfast = a + b + c + b = a + 2*b + c;\n(a + b)*2 = a + 2*b + c;\na = c;\n```\n\n1. 快针走的是慢针的两倍。\n2. 慢针走过的路，快针走过一遍。\n3. 快针走过的剩余路程，也就是和慢针走过的全部路程相等。(a+b = c+b)\n4. 刨去快针追赶慢针的半圈(b)，剩余路程即为所求入环距离(a=c)\n\n\n\n屠龙之术：\n\n```java\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        \n        //1.使用快慢指针找到慢的那个指针,那么慢的指针肯定跟快的指针相等了。\n        ListNode fast = head;\n        ListNode slow = head;\n        \n        while(true){\n            if(fast == null || fast.next == null){\n                return null;\n            }\n            fast = fast.next.next;\n            slow = slow.next;\n            if(fast == slow){\n                break;\n            }\n        }\n        //\n        fast = head;\n        //2. \n        while(fast != slow){\n            fast = fast.next;\n            slow = slow.next;\n        }\n\n        return slow;\n\n    }\n}\n```\n\n\n\n时间复杂度：O(n)\n\n","slug":"力扣热题100题-环形链表II","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202j002btp4ldy6fawdj","content":"<p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>\n<p>不允许修改 链表。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。<br>示例 2：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1,2], pos &#x3D; 0<br>输出：返回索引为 0 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br>示例 3：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1], pos &#x3D; -1<br>输出：返回 null<br>解释：链表中没有环。</p>\n<p>提示：</p>\n<p>链表中节点的数目范围在范围 [0, 104] 内<br>-105 &lt;&#x3D; Node.val &lt;&#x3D; 105<br>pos 的值为 -1 或者链表中的一个有效索引</p>\n<p>进阶：你是否可以使用 O(1) 空间解决此题？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii\">https://leetcode.cn/problems/linked-list-cycle-ii</a></p>\n<p>先说题解：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slow * 2 &#x3D; fast;\nslow &#x3D; a + b;\nfast &#x3D; a + b + c + b &#x3D; a + 2*b + c;\n(a + b)*2 &#x3D; a + 2*b + c;\na &#x3D; c;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>快针走的是慢针的两倍。</li>\n<li>慢针走过的路，快针走过一遍。</li>\n<li>快针走过的剩余路程，也就是和慢针走过的全部路程相等。(a+b &#x3D; c+b)</li>\n<li>刨去快针追赶慢针的半圈(b)，剩余路程即为所求入环距离(a&#x3D;c)</li>\n</ol>\n<p>屠龙之术：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \n        <span class=\"token comment\">//1.使用快慢指针找到慢的那个指针,那么慢的指针肯定跟快的指针相等了。</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//</span>\n        fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2. </span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：O(n)</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>\n<p>不允许修改 链表。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。<br>示例 2：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1,2], pos &#x3D; 0<br>输出：返回索引为 0 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br>示例 3：</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<p>输入：head &#x3D; [1], pos &#x3D; -1<br>输出：返回 null<br>解释：链表中没有环。</p>\n<p>提示：</p>\n<p>链表中节点的数目范围在范围 [0, 104] 内<br>-105 &lt;&#x3D; Node.val &lt;&#x3D; 105<br>pos 的值为 -1 或者链表中的一个有效索引</p>\n<p>进阶：你是否可以使用 O(1) 空间解决此题？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/linked-list-cycle-ii\">https://leetcode.cn/problems/linked-list-cycle-ii</a></p>\n<p>先说题解：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">slow * 2 &#x3D; fast;\nslow &#x3D; a + b;\nfast &#x3D; a + b + c + b &#x3D; a + 2*b + c;\n(a + b)*2 &#x3D; a + 2*b + c;\na &#x3D; c;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>快针走的是慢针的两倍。</li>\n<li>慢针走过的路，快针走过一遍。</li>\n<li>快针走过的剩余路程，也就是和慢针走过的全部路程相等。(a+b &#x3D; c+b)</li>\n<li>刨去快针追赶慢针的半圈(b)，剩余路程即为所求入环距离(a&#x3D;c)</li>\n</ol>\n<p>屠龙之术：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \n        <span class=\"token comment\">//1.使用快慢指针找到慢的那个指针,那么慢的指针肯定跟快的指针相等了。</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//</span>\n        fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2. </span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>时间复杂度：O(n)</p>\n"},{"title":"力扣热题100题- 移动零","date":"2023-02-09T15:52:00.000Z","_content":"\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。\n\n示例 1:\n\n输入: nums = [0,1,0,3,12]\n输出: [1,3,12,0,0]\n示例 2:\n\n输入: nums = [0]\n输出: [0]\n\n\n提示:\n\n1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1\n\n\n进阶：你能尽量减少完成的操作次数吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/move-zeroes\n\n\n\n想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）\n\n我觉得自己没有想清楚的点在于\n\n1.双指针到底指向的是什么?\n\n```java\nclass Solution {\n    //双指针思路\n    //双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。\n\n    //指针x 是已处理好的尾部，y是待处理的数字的头部\n    //这里简单解释下什么叫做处理？\n    //处理的逻辑是指：将非0数字往前移动\n    public void moveZeroes(int[] nums) {\n        int n = nums.length ,x = 0 ,y = 0;\n\n        //循环结束条件：没有待处理数字即可\n        while(y < n){\n            //如果发现待处理的数字为不等于0\n            if(nums[y] != 0){\n                //交换已处理好的尾部的和待处理数字的头部的值。\n                swap(nums,x,y);\n                //交换完之后，就把已处理的尾部数字+1\n                x++;\n            }\n            //待处理数字头部+1\n            y++;\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n想法2：循环一次\n\n```java\nclass Solution {\n    //思路，设置坐标，x标记非0的结束位置\n    public void moveZeroes(int[] nums) {\n        int x = 0;\n        for(int i = 0; i < nums.length ; i++){\n            if(nums[i] != 0){\n                swap(nums,i,x);\n                x++;\n            }\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n其实不难发现，两者基本一致。\n","source":"_posts/力扣热题100题-移动零.md","raw":"---\ntitle: 力扣热题100题- 移动零\ndate: 2023-02-09 23:52:00\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。\n\n示例 1:\n\n输入: nums = [0,1,0,3,12]\n输出: [1,3,12,0,0]\n示例 2:\n\n输入: nums = [0]\n输出: [0]\n\n\n提示:\n\n1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1\n\n\n进阶：你能尽量减少完成的操作次数吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/move-zeroes\n\n\n\n想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）\n\n我觉得自己没有想清楚的点在于\n\n1.双指针到底指向的是什么?\n\n```java\nclass Solution {\n    //双指针思路\n    //双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。\n\n    //指针x 是已处理好的尾部，y是待处理的数字的头部\n    //这里简单解释下什么叫做处理？\n    //处理的逻辑是指：将非0数字往前移动\n    public void moveZeroes(int[] nums) {\n        int n = nums.length ,x = 0 ,y = 0;\n\n        //循环结束条件：没有待处理数字即可\n        while(y < n){\n            //如果发现待处理的数字为不等于0\n            if(nums[y] != 0){\n                //交换已处理好的尾部的和待处理数字的头部的值。\n                swap(nums,x,y);\n                //交换完之后，就把已处理的尾部数字+1\n                x++;\n            }\n            //待处理数字头部+1\n            y++;\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n想法2：循环一次\n\n```java\nclass Solution {\n    //思路，设置坐标，x标记非0的结束位置\n    public void moveZeroes(int[] nums) {\n        int x = 0;\n        for(int i = 0; i < nums.length ; i++){\n            if(nums[i] != 0){\n                swap(nums,i,x);\n                x++;\n            }\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n其实不难发现，两者基本一致。\n","slug":"力扣热题100题-移动零","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202j002dtp4l18b721yf","content":"<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p>\n<p>示例 1:</p>\n<p>输入: nums &#x3D; [0,1,0,3,12]<br>输出: [1,3,12,0,0]<br>示例 2:</p>\n<p>输入: nums &#x3D; [0]<br>输出: [0]</p>\n<p>提示:</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1</p>\n<p>进阶：你能尽量减少完成的操作次数吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/move-zeroes\">https://leetcode.cn/problems/move-zeroes</a></p>\n<p>想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）</p>\n<p>我觉得自己没有想清楚的点在于</p>\n<p>1.双指针到底指向的是什么?</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//双指针思路</span>\n    <span class=\"token comment\">//双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。</span>\n\n    <span class=\"token comment\">//指针x 是已处理好的尾部，y是待处理的数字的头部</span>\n    <span class=\"token comment\">//这里简单解释下什么叫做处理？</span>\n    <span class=\"token comment\">//处理的逻辑是指：将非0数字往前移动</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">,</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//循环结束条件：没有待处理数字即可</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果发现待处理的数字为不等于0</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//交换已处理好的尾部的和待处理数字的头部的值。</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//交换完之后，就把已处理的尾部数字+1</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//待处理数字头部+1</span>\n            y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>想法2：循环一次</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//思路，设置坐标，x标记非0的结束位置</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>其实不难发现，两者基本一致。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p>\n<p>示例 1:</p>\n<p>输入: nums &#x3D; [0,1,0,3,12]<br>输出: [1,3,12,0,0]<br>示例 2:</p>\n<p>输入: nums &#x3D; [0]<br>输出: [0]</p>\n<p>提示:</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1</p>\n<p>进阶：你能尽量减少完成的操作次数吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/move-zeroes\">https://leetcode.cn/problems/move-zeroes</a></p>\n<p>想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）</p>\n<p>我觉得自己没有想清楚的点在于</p>\n<p>1.双指针到底指向的是什么?</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//双指针思路</span>\n    <span class=\"token comment\">//双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。</span>\n\n    <span class=\"token comment\">//指针x 是已处理好的尾部，y是待处理的数字的头部</span>\n    <span class=\"token comment\">//这里简单解释下什么叫做处理？</span>\n    <span class=\"token comment\">//处理的逻辑是指：将非0数字往前移动</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">,</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//循环结束条件：没有待处理数字即可</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果发现待处理的数字为不等于0</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//交换已处理好的尾部的和待处理数字的头部的值。</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//交换完之后，就把已处理的尾部数字+1</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//待处理数字头部+1</span>\n            y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>想法2：循环一次</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//思路，设置坐标，x标记非0的结束位置</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>其实不难发现，两者基本一致。</p>\n"},{"title":"力扣热题100题-翻转二叉树","date":"2023-02-17T16:12:19.000Z","_content":"\n给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg)\n\n输入：root = [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]\n示例 2：\n\n![img](https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg)\n\n输入：root = [2,1,3]\n输出：[2,3,1]\n示例 3：\n\n输入：root = []\n输出：[]\n\n\n提示：\n\n树中节点数目范围在 [0, 100] 内\n-100 <= Node.val <= 100\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/invert-binary-tree\n\n\n\n思路：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * } \n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        //dayinroot\n        if(root == null){\n            return null ;\n        }\n        TreeNode result = new TreeNode(root.val);\n        qianxu(root,result);\n        return result;\n    }\n    //前序遍历\n    public void qianxu(TreeNode root,TreeNode result) {\n        if(root.left != null){\n            result.right = new TreeNode(root.left.val);\n            qianxu(root.left,result.right);\n        }\n        if(root.right != null){\n            result.left = new TreeNode(root.right.val);\n            qianxu(root.right,result.left);\n        }\n    }\n}\n```\n\n","source":"_posts/力扣热题100题-翻转二叉树.md","raw":"---\ntitle: 力扣热题100题-翻转二叉树\ndate: 2023-02-18 00:12:19\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。\n\n \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg)\n\n输入：root = [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]\n示例 2：\n\n![img](https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg)\n\n输入：root = [2,1,3]\n输出：[2,3,1]\n示例 3：\n\n输入：root = []\n输出：[]\n\n\n提示：\n\n树中节点数目范围在 [0, 100] 内\n-100 <= Node.val <= 100\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/invert-binary-tree\n\n\n\n思路：\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * } \n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        //dayinroot\n        if(root == null){\n            return null ;\n        }\n        TreeNode result = new TreeNode(root.val);\n        qianxu(root,result);\n        return result;\n    }\n    //前序遍历\n    public void qianxu(TreeNode root,TreeNode result) {\n        if(root.left != null){\n            result.right = new TreeNode(root.left.val);\n            qianxu(root.left,result.right);\n        }\n        if(root.right != null){\n            result.left = new TreeNode(root.right.val);\n            qianxu(root.right,result.left);\n        }\n    }\n}\n```\n\n","slug":"力扣热题100题-翻转二叉树","published":1,"updated":"2024-07-20T15:41:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202j002gtp4lbsfmeaus","content":"<p>给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [4,2,7,1,3,6,9]<br>输出：[4,7,2,9,6,3,1]<br>示例 2：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [2,1,3]<br>输出：[2,3,1]<br>示例 3：</p>\n<p>输入：root &#x3D; []<br>输出：[]</p>\n<p>提示：</p>\n<p>树中节点数目范围在 [0, 100] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/invert-binary-tree\">https://leetcode.cn/problems/invert-binary-tree</a></p>\n<p>思路：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125; \n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//dayinroot</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//前序遍历</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span><span class=\"token class-name\">TreeNode</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。</p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [4,2,7,1,3,6,9]<br>输出：[4,7,2,9,6,3,1]<br>示例 2：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg\" alt=\"img\"></p>\n<p>输入：root &#x3D; [2,1,3]<br>输出：[2,3,1]<br>示例 3：</p>\n<p>输入：root &#x3D; []<br>输出：[]</p>\n<p>提示：</p>\n<p>树中节点数目范围在 [0, 100] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/invert-binary-tree\">https://leetcode.cn/problems/invert-binary-tree</a></p>\n<p>思路：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125; \n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//dayinroot</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//前序遍历</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span><span class=\"token class-name\">TreeNode</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">qianxu</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"只出现一次的数字2","date":"2023-03-02T14:01:55.000Z","_content":"\n题目描述：\n\n给你一个整数数组 nums ，除某个元素仅出现一次外，其余每个元素都恰出现三次。请你找出并返回那个只出现了一次的元素。\n\n你必须设计并实现线性时间复杂度的算法且不使用额外空间来解决此问题。\n\n示例 1：\n\n输入：nums = [2,2,3,2]\n\n输出：3\n\n示例 2：\n\n输入：nums = [0,1,0,1,0,1,99]\n\n输出：99\n\n提示：\n\n1 <= nums.length <= 3 * 10^4\n\n-2^31 <= nums[i] <= 2^31 - 1\n\nnums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次。\n\n\n\n这个问题在考虑了好几天之后，还是没有思路：\n\n初始解法：\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n        Map<Integer,Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.length ; i++){\n            map.put(nums[i],map.getOrDefault(nums[i],0)+1);\n        }\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() == 1){\n                return entry.getKey();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n这种解法很好想到，主要是空间复杂度为O(n)\n\n那么空间复杂度为O(1)的算法是怎样的呢？\n\n此处未参考电路的做法（主要是电路的做法没有看明白），使用了遍历统计的方法：\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n//        假如例子是 1 2 6 1 1 2 2 3 3 3，其中存在 3 个 1, 3 个 2, 3 个 3,1 个 6\n//        1:      0 0 1\n//        2:      0 1 0\n//        6:      1 1 0\n//        1:      0 0 1\n//        1:      0 0 1\n//        2:      0 1 0\n//        2:      0 1 0\n//        3:      0 1 1\n//        3:      0 1 1\n//        3:      0 1 1\n//        看最右边的一列 1001100111 有 6 个 1\n//        再往前看一列 0110011111 有 7 个 1\n//        再往前看一列 0010000 有 1 个 1\n//        我们只需要把是 3 的倍数的对应列写 0，不是 3 的倍数的对应列写 1\n//        也就是 1 1 0,也就是 6。\n\n        //下面是数据统计类思路：\n        //由于限制了数据的大小，所以\n        //1.依次找到每个数字的第i位二进制，然后将二进制位数相加，最后得到的结果/3，再来计算最后结果\n        int ans = 0 ;\n        for(int i = 0; i < 32; i++){\n            int count = 0;\n            for(int j =0; j< nums.length; j++){\n                //这里的意思是右移这些位，得到的数字跟1&，如果得到的结果为1，那么说明当前数字的当前二进制位上是1\n                if(((nums[j] >>> i) & 1) == 1){\n                    count++; //得到出现1的个数\n                }\n            }\n            //得到不是3的倍数\n            if(count %3 != 0){\n                //注意这里，不是很好理解，为什么需要将1左移，因为需要将最后的结果输出出来，那么发现第几位不是3的倍数，就需要左移多少位，同时那个位置放置1\n                ans = ans | ( 1 << i);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n此算法没有理解，存靠硬套答案。\n\n\n\n**问题升级：[只出现一次的数字③](https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/)**\n\n","source":"_posts/只出现一次的数字2.md","raw":"---\ntitle: 只出现一次的数字2\ndate: 2023-03-02 22:01:55\ntags:\n  - 算法\n  - 异或与\n---\n\n题目描述：\n\n给你一个整数数组 nums ，除某个元素仅出现一次外，其余每个元素都恰出现三次。请你找出并返回那个只出现了一次的元素。\n\n你必须设计并实现线性时间复杂度的算法且不使用额外空间来解决此问题。\n\n示例 1：\n\n输入：nums = [2,2,3,2]\n\n输出：3\n\n示例 2：\n\n输入：nums = [0,1,0,1,0,1,99]\n\n输出：99\n\n提示：\n\n1 <= nums.length <= 3 * 10^4\n\n-2^31 <= nums[i] <= 2^31 - 1\n\nnums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次。\n\n\n\n这个问题在考虑了好几天之后，还是没有思路：\n\n初始解法：\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n        Map<Integer,Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.length ; i++){\n            map.put(nums[i],map.getOrDefault(nums[i],0)+1);\n        }\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() == 1){\n                return entry.getKey();\n            }\n        }\n        return 0;\n    }\n}\n```\n\n这种解法很好想到，主要是空间复杂度为O(n)\n\n那么空间复杂度为O(1)的算法是怎样的呢？\n\n此处未参考电路的做法（主要是电路的做法没有看明白），使用了遍历统计的方法：\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n//        假如例子是 1 2 6 1 1 2 2 3 3 3，其中存在 3 个 1, 3 个 2, 3 个 3,1 个 6\n//        1:      0 0 1\n//        2:      0 1 0\n//        6:      1 1 0\n//        1:      0 0 1\n//        1:      0 0 1\n//        2:      0 1 0\n//        2:      0 1 0\n//        3:      0 1 1\n//        3:      0 1 1\n//        3:      0 1 1\n//        看最右边的一列 1001100111 有 6 个 1\n//        再往前看一列 0110011111 有 7 个 1\n//        再往前看一列 0010000 有 1 个 1\n//        我们只需要把是 3 的倍数的对应列写 0，不是 3 的倍数的对应列写 1\n//        也就是 1 1 0,也就是 6。\n\n        //下面是数据统计类思路：\n        //由于限制了数据的大小，所以\n        //1.依次找到每个数字的第i位二进制，然后将二进制位数相加，最后得到的结果/3，再来计算最后结果\n        int ans = 0 ;\n        for(int i = 0; i < 32; i++){\n            int count = 0;\n            for(int j =0; j< nums.length; j++){\n                //这里的意思是右移这些位，得到的数字跟1&，如果得到的结果为1，那么说明当前数字的当前二进制位上是1\n                if(((nums[j] >>> i) & 1) == 1){\n                    count++; //得到出现1的个数\n                }\n            }\n            //得到不是3的倍数\n            if(count %3 != 0){\n                //注意这里，不是很好理解，为什么需要将1左移，因为需要将最后的结果输出出来，那么发现第几位不是3的倍数，就需要左移多少位，同时那个位置放置1\n                ans = ans | ( 1 << i);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n此算法没有理解，存靠硬套答案。\n\n\n\n**问题升级：[只出现一次的数字③](https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/)**\n\n","slug":"只出现一次的数字2","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202j002itp4lfs53dcxl","content":"<p>题目描述：</p>\n<p>给你一个整数数组 nums ，除某个元素仅出现一次外，其余每个元素都恰出现三次。请你找出并返回那个只出现了一次的元素。</p>\n<p>你必须设计并实现线性时间复杂度的算法且不使用额外空间来解决此问题。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [2,2,3,2]</p>\n<p>输出：3</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [0,1,0,1,0,1,99]</p>\n<p>输出：99</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4</p>\n<p>-2^31 &lt;&#x3D; nums[i] &lt;&#x3D; 2^31 - 1</p>\n<p>nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次。</p>\n<p>这个问题在考虑了好几天之后，还是没有思路：</p>\n<p>初始解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种解法很好想到，主要是空间复杂度为O(n)</p>\n<p>那么空间复杂度为O(1)的算法是怎样的呢？</p>\n<p>此处未参考电路的做法（主要是电路的做法没有看明白），使用了遍历统计的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        假如例子是 1 2 6 1 1 2 2 3 3 3，其中存在 3 个 1, 3 个 2, 3 个 3,1 个 6</span>\n<span class=\"token comment\">//        1:      0 0 1</span>\n<span class=\"token comment\">//        2:      0 1 0</span>\n<span class=\"token comment\">//        6:      1 1 0</span>\n<span class=\"token comment\">//        1:      0 0 1</span>\n<span class=\"token comment\">//        1:      0 0 1</span>\n<span class=\"token comment\">//        2:      0 1 0</span>\n<span class=\"token comment\">//        2:      0 1 0</span>\n<span class=\"token comment\">//        3:      0 1 1</span>\n<span class=\"token comment\">//        3:      0 1 1</span>\n<span class=\"token comment\">//        3:      0 1 1</span>\n<span class=\"token comment\">//        看最右边的一列 1001100111 有 6 个 1</span>\n<span class=\"token comment\">//        再往前看一列 0110011111 有 7 个 1</span>\n<span class=\"token comment\">//        再往前看一列 0010000 有 1 个 1</span>\n<span class=\"token comment\">//        我们只需要把是 3 的倍数的对应列写 0，不是 3 的倍数的对应列写 1</span>\n<span class=\"token comment\">//        也就是 1 1 0,也就是 6。</span>\n\n        <span class=\"token comment\">//下面是数据统计类思路：</span>\n        <span class=\"token comment\">//由于限制了数据的大小，所以</span>\n        <span class=\"token comment\">//1.依次找到每个数字的第i位二进制，然后将二进制位数相加，最后得到的结果/3，再来计算最后结果</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//这里的意思是右移这些位，得到的数字跟1&amp;，如果得到的结果为1，那么说明当前数字的当前二进制位上是1</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>>></span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//得到出现1的个数</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//得到不是3的倍数</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//注意这里，不是很好理解，为什么需要将1左移，因为需要将最后的结果输出出来，那么发现第几位不是3的倍数，就需要左移多少位，同时那个位置放置1</span>\n                ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此算法没有理解，存靠硬套答案。</p>\n<p><strong>问题升级：<a href=\"https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/\">只出现一次的数字③</a></strong></p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>题目描述：</p>\n<p>给你一个整数数组 nums ，除某个元素仅出现一次外，其余每个元素都恰出现三次。请你找出并返回那个只出现了一次的元素。</p>\n<p>你必须设计并实现线性时间复杂度的算法且不使用额外空间来解决此问题。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [2,2,3,2]</p>\n<p>输出：3</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [0,1,0,1,0,1,99]</p>\n<p>输出：99</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4</p>\n<p>-2^31 &lt;&#x3D; nums[i] &lt;&#x3D; 2^31 - 1</p>\n<p>nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次。</p>\n<p>这个问题在考虑了好几天之后，还是没有思路：</p>\n<p>初始解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种解法很好想到，主要是空间复杂度为O(n)</p>\n<p>那么空间复杂度为O(1)的算法是怎样的呢？</p>\n<p>此处未参考电路的做法（主要是电路的做法没有看明白），使用了遍历统计的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        假如例子是 1 2 6 1 1 2 2 3 3 3，其中存在 3 个 1, 3 个 2, 3 个 3,1 个 6</span>\n<span class=\"token comment\">//        1:      0 0 1</span>\n<span class=\"token comment\">//        2:      0 1 0</span>\n<span class=\"token comment\">//        6:      1 1 0</span>\n<span class=\"token comment\">//        1:      0 0 1</span>\n<span class=\"token comment\">//        1:      0 0 1</span>\n<span class=\"token comment\">//        2:      0 1 0</span>\n<span class=\"token comment\">//        2:      0 1 0</span>\n<span class=\"token comment\">//        3:      0 1 1</span>\n<span class=\"token comment\">//        3:      0 1 1</span>\n<span class=\"token comment\">//        3:      0 1 1</span>\n<span class=\"token comment\">//        看最右边的一列 1001100111 有 6 个 1</span>\n<span class=\"token comment\">//        再往前看一列 0110011111 有 7 个 1</span>\n<span class=\"token comment\">//        再往前看一列 0010000 有 1 个 1</span>\n<span class=\"token comment\">//        我们只需要把是 3 的倍数的对应列写 0，不是 3 的倍数的对应列写 1</span>\n<span class=\"token comment\">//        也就是 1 1 0,也就是 6。</span>\n\n        <span class=\"token comment\">//下面是数据统计类思路：</span>\n        <span class=\"token comment\">//由于限制了数据的大小，所以</span>\n        <span class=\"token comment\">//1.依次找到每个数字的第i位二进制，然后将二进制位数相加，最后得到的结果/3，再来计算最后结果</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//这里的意思是右移这些位，得到的数字跟1&amp;，如果得到的结果为1，那么说明当前数字的当前二进制位上是1</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>>></span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//得到出现1的个数</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//得到不是3的倍数</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//注意这里，不是很好理解，为什么需要将1左移，因为需要将最后的结果输出出来，那么发现第几位不是3的倍数，就需要左移多少位，同时那个位置放置1</span>\n                ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此算法没有理解，存靠硬套答案。</p>\n<p><strong>问题升级：<a href=\"https://fengtingxin.github.io/2023/03/06/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%973/\">只出现一次的数字③</a></strong></p>\n"},{"title":"只出现一次的数字3","date":"2023-03-06T15:32:45.000Z","_content":"\n给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。\n\n你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。\n\n \n\n示例 1：\n\n输入：nums = [1,2,1,3,2,5]\n输出：[3,5]\n解释：[5, 3] 也是有效的答案。\n示例 2：\n\n输入：nums = [-1,0]\n输出：[-1,0]\n示例 3：\n\n输入：nums = [0,1]\n输出：[1,0]\n\n\n提示：\n\n2 <= nums.length <= 3 * 104\n-231 <= nums[i] <= 231 - 1\n除两个只出现一次的整数外，nums 中的其他数字都出现两次\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/single-number-iii\n\n\n\n**基本概念：**\n\n**1 .一个数异或0，还是它本身。**\n**2.一个数异或它本身为0**\n\n先不做题，描述下思路：\n\n1.最初想到的解法为空间复杂度为O(n)，借助Map的方式。已经实现过了多次，就不赘述\n\n2.思考空间复杂度为O（1）的解法：\n\n由于我们之前做过一个数组中存在1个1次的数字，那么我们知道所有数字的异或的结果为：存在1个1次的数字。\n\n那么假设知道此题目的最后两个数字是 a、b，那么结果是a^b\n\n而异或是二进制不同的才会为1。\n\n```java\nclass Solution {\n    public int[] singleNumber(int[] nums) {\n\n        //  记录异或结果\n        int xor = nums[0];\n        for(int i = 1; i < nums.length ; i++){\n            xor = xor ^ nums[i];\n        }\n\n        //假如设这两个数字为a\\b，也就是 a^ b = xor\n        \n        //观察xor的二进制，找到随机一个k位，如果k位的值为1，那么说明a 、b在这个位置的值是不一样的\n        int k = 0;\n\n        for(int i = 1; i < 32;i++){\n            if(((xor >> i) & 1) == 1){\n                k = i;\n                break;\n            }\n        }\n\n        //找到这个k位置之后，说明 a ^ b的k位置肯定是1，那么我们可以知道a ^ b 在k的位置肯定是不同的\n        //那么我们是否可以将num数组中 k 位置 = 1的分为 1组，k位置 不等于1的分为1组，就应该是a 和 b了\n        int[] result = new int[2];\n        for(int num : nums){\n            if(((num >> k) & 1) == 1){\n                result[0] = result[0] ^ num;\n            } else {\n                result[1] = result[1] ^ num;\n            }\n        }\n        return result;\n\n\n    }\n}\n```\n\n时间复杂度为O(n)，空间复杂度O(1)\n\n本题没有想出来，还是通过答案看出来的，失败，看明白答案之后发现并不是特别困难，主要还是有没有这个思路的问题。\n\n加油!\n\n","source":"_posts/只出现一次的数字3.md","raw":"---\ntitle: 只出现一次的数字3\ndate: 2023-03-06 23:32:45\ntags:\n  - 算法\n  - 异或与\n---\n\n给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。\n\n你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。\n\n \n\n示例 1：\n\n输入：nums = [1,2,1,3,2,5]\n输出：[3,5]\n解释：[5, 3] 也是有效的答案。\n示例 2：\n\n输入：nums = [-1,0]\n输出：[-1,0]\n示例 3：\n\n输入：nums = [0,1]\n输出：[1,0]\n\n\n提示：\n\n2 <= nums.length <= 3 * 104\n-231 <= nums[i] <= 231 - 1\n除两个只出现一次的整数外，nums 中的其他数字都出现两次\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/single-number-iii\n\n\n\n**基本概念：**\n\n**1 .一个数异或0，还是它本身。**\n**2.一个数异或它本身为0**\n\n先不做题，描述下思路：\n\n1.最初想到的解法为空间复杂度为O(n)，借助Map的方式。已经实现过了多次，就不赘述\n\n2.思考空间复杂度为O（1）的解法：\n\n由于我们之前做过一个数组中存在1个1次的数字，那么我们知道所有数字的异或的结果为：存在1个1次的数字。\n\n那么假设知道此题目的最后两个数字是 a、b，那么结果是a^b\n\n而异或是二进制不同的才会为1。\n\n```java\nclass Solution {\n    public int[] singleNumber(int[] nums) {\n\n        //  记录异或结果\n        int xor = nums[0];\n        for(int i = 1; i < nums.length ; i++){\n            xor = xor ^ nums[i];\n        }\n\n        //假如设这两个数字为a\\b，也就是 a^ b = xor\n        \n        //观察xor的二进制，找到随机一个k位，如果k位的值为1，那么说明a 、b在这个位置的值是不一样的\n        int k = 0;\n\n        for(int i = 1; i < 32;i++){\n            if(((xor >> i) & 1) == 1){\n                k = i;\n                break;\n            }\n        }\n\n        //找到这个k位置之后，说明 a ^ b的k位置肯定是1，那么我们可以知道a ^ b 在k的位置肯定是不同的\n        //那么我们是否可以将num数组中 k 位置 = 1的分为 1组，k位置 不等于1的分为1组，就应该是a 和 b了\n        int[] result = new int[2];\n        for(int num : nums){\n            if(((num >> k) & 1) == 1){\n                result[0] = result[0] ^ num;\n            } else {\n                result[1] = result[1] ^ num;\n            }\n        }\n        return result;\n\n\n    }\n}\n```\n\n时间复杂度为O(n)，空间复杂度O(1)\n\n本题没有想出来，还是通过答案看出来的，失败，看明白答案之后发现并不是特别困难，主要还是有没有这个思路的问题。\n\n加油!\n\n","slug":"只出现一次的数字3","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202k002ltp4l5xomcsg9","content":"<p>给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。</p>\n<p>你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [1,2,1,3,2,5]<br>输出：[3,5]<br>解释：[5, 3] 也是有效的答案。<br>示例 2：</p>\n<p>输入：nums &#x3D; [-1,0]<br>输出：[-1,0]<br>示例 3：</p>\n<p>输入：nums &#x3D; [0,1]<br>输出：[1,0]</p>\n<p>提示：</p>\n<p>2 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 104<br>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1<br>除两个只出现一次的整数外，nums 中的其他数字都出现两次</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/single-number-iii\">https://leetcode.cn/problems/single-number-iii</a></p>\n<p><strong>基本概念：</strong></p>\n<p><strong>1 .一个数异或0，还是它本身。</strong><br><strong>2.一个数异或它本身为0</strong></p>\n<p>先不做题，描述下思路：</p>\n<p>1.最初想到的解法为空间复杂度为O(n)，借助Map的方式。已经实现过了多次，就不赘述</p>\n<p>2.思考空间复杂度为O（1）的解法：</p>\n<p>由于我们之前做过一个数组中存在1个1次的数字，那么我们知道所有数字的异或的结果为：存在1个1次的数字。</p>\n<p>那么假设知道此题目的最后两个数字是 a、b，那么结果是a^b</p>\n<p>而异或是二进制不同的才会为1。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//  记录异或结果</span>\n        <span class=\"token keyword\">int</span> xor <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            xor <span class=\"token operator\">=</span> xor <span class=\"token operator\">^</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//假如设这两个数字为a\\b，也就是 a^ b = xor</span>\n        \n        <span class=\"token comment\">//观察xor的二进制，找到随机一个k位，如果k位的值为1，那么说明a 、b在这个位置的值是不一样的</span>\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xor <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//找到这个k位置之后，说明 a ^ b的k位置肯定是1，那么我们可以知道a ^ b 在k的位置肯定是不同的</span>\n        <span class=\"token comment\">//那么我们是否可以将num数组中 k 位置 = 1的分为 1组，k位置 不等于1的分为1组，就应该是a 和 b了</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">>></span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为O(n)，空间复杂度O(1)</p>\n<p>本题没有想出来，还是通过答案看出来的，失败，看明白答案之后发现并不是特别困难，主要还是有没有这个思路的问题。</p>\n<p>加油!</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。</p>\n<p>你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [1,2,1,3,2,5]<br>输出：[3,5]<br>解释：[5, 3] 也是有效的答案。<br>示例 2：</p>\n<p>输入：nums &#x3D; [-1,0]<br>输出：[-1,0]<br>示例 3：</p>\n<p>输入：nums &#x3D; [0,1]<br>输出：[1,0]</p>\n<p>提示：</p>\n<p>2 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 104<br>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1<br>除两个只出现一次的整数外，nums 中的其他数字都出现两次</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/single-number-iii\">https://leetcode.cn/problems/single-number-iii</a></p>\n<p><strong>基本概念：</strong></p>\n<p><strong>1 .一个数异或0，还是它本身。</strong><br><strong>2.一个数异或它本身为0</strong></p>\n<p>先不做题，描述下思路：</p>\n<p>1.最初想到的解法为空间复杂度为O(n)，借助Map的方式。已经实现过了多次，就不赘述</p>\n<p>2.思考空间复杂度为O（1）的解法：</p>\n<p>由于我们之前做过一个数组中存在1个1次的数字，那么我们知道所有数字的异或的结果为：存在1个1次的数字。</p>\n<p>那么假设知道此题目的最后两个数字是 a、b，那么结果是a^b</p>\n<p>而异或是二进制不同的才会为1。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//  记录异或结果</span>\n        <span class=\"token keyword\">int</span> xor <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            xor <span class=\"token operator\">=</span> xor <span class=\"token operator\">^</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//假如设这两个数字为a\\b，也就是 a^ b = xor</span>\n        \n        <span class=\"token comment\">//观察xor的二进制，找到随机一个k位，如果k位的值为1，那么说明a 、b在这个位置的值是不一样的</span>\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xor <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//找到这个k位置之后，说明 a ^ b的k位置肯定是1，那么我们可以知道a ^ b 在k的位置肯定是不同的</span>\n        <span class=\"token comment\">//那么我们是否可以将num数组中 k 位置 = 1的分为 1组，k位置 不等于1的分为1组，就应该是a 和 b了</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">>></span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为O(n)，空间复杂度O(1)</p>\n<p>本题没有想出来，还是通过答案看出来的，失败，看明白答案之后发现并不是特别困难，主要还是有没有这个思路的问题。</p>\n<p>加油!</p>\n"},{"title":"复习整体策略","date":"2023-03-29T15:10:32.000Z","_content":"\n面试步骤规划\n\n1. 算法题和知识复习同步进行\n2. 算法题的范畴是什么？\n   1. 链表\n   2. 二叉树\n   3. 数组\n   4. 贪心\n   5. 分治\n   6. 动态规划\n   7. 成环\n   8. 环节点\n   9. 跳楼梯\n   10. 滑动窗口\n3. 知识都包含哪些？\n   1. Java基础\n      1. 集合\n      2. 多线程\n   2. JVM\n   3. 网络\n   4. Spring\n   5. Redis\n   6. Zookeeper\n   7. Dubbo\n   8. MQ\n   9. 分布式锁\n   10. Mysql\n4. 项目经验复习\n\n\n\n时间计划：\n\n3.29- 4.1 完成 链表+二叉树算法题及JVM\n\n4.2 总结复盘\n\n4.2 -4.8 完成 数组+贪心算法题及Java基础\n\n4.9总结及考试\n\n4.9- 4.15 完成100题中等题目及网络+Spring\n\n4.16总结考试\n\n4.17- 4.22 完成100题中等题目 及Redis+zookeper\n\n4.23总结\n\n4.24-4.29 完成100题中等题目 及Dubbo+MQ\n\n4. 30考试\n\n5.1-5.6 完成100题中等题目 及分布式锁+Mysql\n\n开始面试。\n\n项目经验复习\n\n5. 7- 5.10\n\n","source":"_posts/复习整体策略.md","raw":"---\ntitle: 复习整体策略\ndate: 2023-03-29 23:10:32\ntags:\n  - 备战\n---\n\n面试步骤规划\n\n1. 算法题和知识复习同步进行\n2. 算法题的范畴是什么？\n   1. 链表\n   2. 二叉树\n   3. 数组\n   4. 贪心\n   5. 分治\n   6. 动态规划\n   7. 成环\n   8. 环节点\n   9. 跳楼梯\n   10. 滑动窗口\n3. 知识都包含哪些？\n   1. Java基础\n      1. 集合\n      2. 多线程\n   2. JVM\n   3. 网络\n   4. Spring\n   5. Redis\n   6. Zookeeper\n   7. Dubbo\n   8. MQ\n   9. 分布式锁\n   10. Mysql\n4. 项目经验复习\n\n\n\n时间计划：\n\n3.29- 4.1 完成 链表+二叉树算法题及JVM\n\n4.2 总结复盘\n\n4.2 -4.8 完成 数组+贪心算法题及Java基础\n\n4.9总结及考试\n\n4.9- 4.15 完成100题中等题目及网络+Spring\n\n4.16总结考试\n\n4.17- 4.22 完成100题中等题目 及Redis+zookeper\n\n4.23总结\n\n4.24-4.29 完成100题中等题目 及Dubbo+MQ\n\n4. 30考试\n\n5.1-5.6 完成100题中等题目 及分布式锁+Mysql\n\n开始面试。\n\n项目经验复习\n\n5. 7- 5.10\n\n","slug":"复习整体策略","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202k002ntp4lhh4fhblm","content":"<p>面试步骤规划</p>\n<ol>\n<li>算法题和知识复习同步进行</li>\n<li>算法题的范畴是什么？<ol>\n<li>链表</li>\n<li>二叉树</li>\n<li>数组</li>\n<li>贪心</li>\n<li>分治</li>\n<li>动态规划</li>\n<li>成环</li>\n<li>环节点</li>\n<li>跳楼梯</li>\n<li>滑动窗口</li>\n</ol>\n</li>\n<li>知识都包含哪些？<ol>\n<li>Java基础<ol>\n<li>集合</li>\n<li>多线程</li>\n</ol>\n</li>\n<li>JVM</li>\n<li>网络</li>\n<li>Spring</li>\n<li>Redis</li>\n<li>Zookeeper</li>\n<li>Dubbo</li>\n<li>MQ</li>\n<li>分布式锁</li>\n<li>Mysql</li>\n</ol>\n</li>\n<li>项目经验复习</li>\n</ol>\n<p>时间计划：</p>\n<p>3.29- 4.1 完成 链表+二叉树算法题及JVM</p>\n<p>4.2 总结复盘</p>\n<p>4.2 -4.8 完成 数组+贪心算法题及Java基础</p>\n<p>4.9总结及考试</p>\n<p>4.9- 4.15 完成100题中等题目及网络+Spring</p>\n<p>4.16总结考试</p>\n<p>4.17- 4.22 完成100题中等题目 及Redis+zookeper</p>\n<p>4.23总结</p>\n<p>4.24-4.29 完成100题中等题目 及Dubbo+MQ</p>\n<ol start=\"4\">\n<li>30考试</li>\n</ol>\n<p>5.1-5.6 完成100题中等题目 及分布式锁+Mysql</p>\n<p>开始面试。</p>\n<p>项目经验复习</p>\n<ol start=\"5\">\n<li>7- 5.10</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>面试步骤规划</p>\n<ol>\n<li>算法题和知识复习同步进行</li>\n<li>算法题的范畴是什么？<ol>\n<li>链表</li>\n<li>二叉树</li>\n<li>数组</li>\n<li>贪心</li>\n<li>分治</li>\n<li>动态规划</li>\n<li>成环</li>\n<li>环节点</li>\n<li>跳楼梯</li>\n<li>滑动窗口</li>\n</ol>\n</li>\n<li>知识都包含哪些？<ol>\n<li>Java基础<ol>\n<li>集合</li>\n<li>多线程</li>\n</ol>\n</li>\n<li>JVM</li>\n<li>网络</li>\n<li>Spring</li>\n<li>Redis</li>\n<li>Zookeeper</li>\n<li>Dubbo</li>\n<li>MQ</li>\n<li>分布式锁</li>\n<li>Mysql</li>\n</ol>\n</li>\n<li>项目经验复习</li>\n</ol>\n<p>时间计划：</p>\n<p>3.29- 4.1 完成 链表+二叉树算法题及JVM</p>\n<p>4.2 总结复盘</p>\n<p>4.2 -4.8 完成 数组+贪心算法题及Java基础</p>\n<p>4.9总结及考试</p>\n<p>4.9- 4.15 完成100题中等题目及网络+Spring</p>\n<p>4.16总结考试</p>\n<p>4.17- 4.22 完成100题中等题目 及Redis+zookeper</p>\n<p>4.23总结</p>\n<p>4.24-4.29 完成100题中等题目 及Dubbo+MQ</p>\n<ol start=\"4\">\n<li>30考试</li>\n</ol>\n<p>5.1-5.6 完成100题中等题目 及分布式锁+Mysql</p>\n<p>开始面试。</p>\n<p>项目经验复习</p>\n<ol start=\"5\">\n<li>7- 5.10</li>\n</ol>\n"},{"title":"复杂度分析","date":"2022-06-16T15:42:17.000Z","_content":"\n事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。\n\n为什么还需要对算法本身进行时间和复杂度分析呢？\n\n1. 测试结果非常依赖测试环境\n2. 测试结果受数据规模的影响很大\n\n因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。\n\n## 时间复杂度\n\n大O时间复杂度表示法（简称时间复杂度）：T(n)= O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。\n\n例子：假设一行代码执行一次需要1个unit_time。\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个代码的需要的时间为：T(n)= （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。\n\n小方法：\n\n1. 只关注循环执行次数最多的一段代码\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\n\n![img](https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70)\n\n| 排序法     | 最差时间分析 | 平均时间复杂度 | 稳定度 | 空间复杂度    |\n| ---------- | ------------ | -------------- | ------ | ------------- |\n| 冒泡排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 快速排序   | O(n2)        | O(n*log2n)     | 不稳定 | O(log2n)~O(n) |\n| 选择排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 二叉树排序 | O(n2)        | O(n*log2n)     | 不一顶 | O(n)          |\n| 插入排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 堆排序     | O(n*log2n)   | O(n*log2n)     | 不稳定 | O(1)          |\n| 希尔排序   | O            | O              | 不稳定 | O(1)          |\n\n\n\n简单理解下：什么情况下是O(logn)\n\n```java\ni=1;\n while (i <= n)  {\n   i = i * 2;\n }\n```\n\n\n\n## 空间复杂度分析\n\n简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。\n\n**需要看代码申请了多大的占用空间**，比如：\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个空间复杂度是O(1)\n\n我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。\n\n\n\n## 时间复杂度分析进阶\n\n### 最好、最坏情况时间复杂度\n\n```java\npublic int find(int[] nums,int x) {\n    int n = nums.length;\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)\n\n### 平均时间复杂度\n\n大多数时间，使用一个复杂度就可以了。\n\n平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。\n\n### 均摊时间复杂度\n\n```\n/**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **/\n // array表示一个长度为n的数组\n // 代码中的array.length就等于n\n int[] array = new int[n];\n int count = 0;\n \n // 会有程序不断调用 insert() 方法\n void insert(int val) {\n    if (count == array.length) {\n       int sum = 0;\n       for (int i = 0; i < array.length; ++i) {\n          sum = sum + array[i];\n       }\n       array[0] = sum;\n       count = 1;\n    }\n\n    array[count] = val;\n    ++count;\n }\n\n```\n\n继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。\n","source":"_posts/复杂度分析.md","raw":"---\ntitle: 复杂度分析\ndate: 2022-06-16 23:42:17\ntags:\n  - 复杂度分析\n  - 算法\n---\n\n事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。\n\n为什么还需要对算法本身进行时间和复杂度分析呢？\n\n1. 测试结果非常依赖测试环境\n2. 测试结果受数据规模的影响很大\n\n因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。\n\n## 时间复杂度\n\n大O时间复杂度表示法（简称时间复杂度）：T(n)= O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。\n\n例子：假设一行代码执行一次需要1个unit_time。\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个代码的需要的时间为：T(n)= （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。\n\n小方法：\n\n1. 只关注循环执行次数最多的一段代码\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\n\n![img](https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70)\n\n| 排序法     | 最差时间分析 | 平均时间复杂度 | 稳定度 | 空间复杂度    |\n| ---------- | ------------ | -------------- | ------ | ------------- |\n| 冒泡排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 快速排序   | O(n2)        | O(n*log2n)     | 不稳定 | O(log2n)~O(n) |\n| 选择排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 二叉树排序 | O(n2)        | O(n*log2n)     | 不一顶 | O(n)          |\n| 插入排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 堆排序     | O(n*log2n)   | O(n*log2n)     | 不稳定 | O(1)          |\n| 希尔排序   | O            | O              | 不稳定 | O(1)          |\n\n\n\n简单理解下：什么情况下是O(logn)\n\n```java\ni=1;\n while (i <= n)  {\n   i = i * 2;\n }\n```\n\n\n\n## 空间复杂度分析\n\n简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。\n\n**需要看代码申请了多大的占用空间**，比如：\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个空间复杂度是O(1)\n\n我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。\n\n\n\n## 时间复杂度分析进阶\n\n### 最好、最坏情况时间复杂度\n\n```java\npublic int find(int[] nums,int x) {\n    int n = nums.length;\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)\n\n### 平均时间复杂度\n\n大多数时间，使用一个复杂度就可以了。\n\n平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。\n\n### 均摊时间复杂度\n\n```\n/**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **/\n // array表示一个长度为n的数组\n // 代码中的array.length就等于n\n int[] array = new int[n];\n int count = 0;\n \n // 会有程序不断调用 insert() 方法\n void insert(int val) {\n    if (count == array.length) {\n       int sum = 0;\n       for (int i = 0; i < array.length; ++i) {\n          sum = sum + array[i];\n       }\n       array[0] = sum;\n       count = 1;\n    }\n\n    array[count] = val;\n    ++count;\n }\n\n```\n\n继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。\n","slug":"复杂度分析","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202k002qtp4lg5iy2aoj","content":"<p>事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。</p>\n<p>为什么还需要对算法本身进行时间和复杂度分析呢？</p>\n<ol>\n<li>测试结果非常依赖测试环境</li>\n<li>测试结果受数据规模的影响很大</li>\n</ol>\n<p>因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>大O时间复杂度表示法（简称时间复杂度）：T(n)&#x3D; O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。</p>\n<p>例子：假设一行代码执行一次需要1个unit_time。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个代码的需要的时间为：T(n)&#x3D; （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。</p>\n<p>小方法：</p>\n<ol>\n<li>只关注循环执行次数最多的一段代码</li>\n<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>排序法</th>\n<th>最差时间分析</th>\n<th>平均时间复杂度</th>\n<th>稳定度</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(log2n)~O(n)</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>二叉树排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不一顶</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(n*log2n)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O</td>\n<td>O</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n</tbody></table>\n<p>简单理解下：什么情况下是O(logn)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n   i <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。</p>\n<p><strong>需要看代码申请了多大的占用空间</strong>，比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个空间复杂度是O(1)</p>\n<p>我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。</p>\n<h2 id=\"时间复杂度分析进阶\"><a href=\"#时间复杂度分析进阶\" class=\"headerlink\" title=\"时间复杂度分析进阶\"></a>时间复杂度分析进阶</h2><h3 id=\"最好、最坏情况时间复杂度\"><a href=\"#最好、最坏情况时间复杂度\" class=\"headerlink\" title=\"最好、最坏情况时间复杂度\"></a>最好、最坏情况时间复杂度</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)</p>\n<h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3><p>大多数时间，使用一个复杂度就可以了。</p>\n<p>平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。</p>\n<h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **&#x2F;\n &#x2F;&#x2F; array表示一个长度为n的数组\n &#x2F;&#x2F; 代码中的array.length就等于n\n int[] array &#x3D; new int[n];\n int count &#x3D; 0;\n \n &#x2F;&#x2F; 会有程序不断调用 insert() 方法\n void insert(int val) &#123;\n    if (count &#x3D;&#x3D; array.length) &#123;\n       int sum &#x3D; 0;\n       for (int i &#x3D; 0; i &lt; array.length; ++i) &#123;\n          sum &#x3D; sum + array[i];\n       &#125;\n       array[0] &#x3D; sum;\n       count &#x3D; 1;\n    &#125;\n\n    array[count] &#x3D; val;\n    ++count;\n &#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。</p>\n<p>为什么还需要对算法本身进行时间和复杂度分析呢？</p>\n<ol>\n<li>测试结果非常依赖测试环境</li>\n<li>测试结果受数据规模的影响很大</li>\n</ol>\n<p>因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>大O时间复杂度表示法（简称时间复杂度）：T(n)&#x3D; O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。</p>\n<p>例子：假设一行代码执行一次需要1个unit_time。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个代码的需要的时间为：T(n)&#x3D; （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。</p>\n<p>小方法：</p>\n<ol>\n<li>只关注循环执行次数最多的一段代码</li>\n<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>排序法</th>\n<th>最差时间分析</th>\n<th>平均时间复杂度</th>\n<th>稳定度</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(log2n)~O(n)</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>二叉树排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不一顶</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(n*log2n)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O</td>\n<td>O</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n</tbody></table>\n<p>简单理解下：什么情况下是O(logn)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n   i <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。</p>\n<p><strong>需要看代码申请了多大的占用空间</strong>，比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个空间复杂度是O(1)</p>\n<p>我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。</p>\n<h2 id=\"时间复杂度分析进阶\"><a href=\"#时间复杂度分析进阶\" class=\"headerlink\" title=\"时间复杂度分析进阶\"></a>时间复杂度分析进阶</h2><h3 id=\"最好、最坏情况时间复杂度\"><a href=\"#最好、最坏情况时间复杂度\" class=\"headerlink\" title=\"最好、最坏情况时间复杂度\"></a>最好、最坏情况时间复杂度</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)</p>\n<h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3><p>大多数时间，使用一个复杂度就可以了。</p>\n<p>平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。</p>\n<h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **&#x2F;\n &#x2F;&#x2F; array表示一个长度为n的数组\n &#x2F;&#x2F; 代码中的array.length就等于n\n int[] array &#x3D; new int[n];\n int count &#x3D; 0;\n \n &#x2F;&#x2F; 会有程序不断调用 insert() 方法\n void insert(int val) &#123;\n    if (count &#x3D;&#x3D; array.length) &#123;\n       int sum &#x3D; 0;\n       for (int i &#x3D; 0; i &lt; array.length; ++i) &#123;\n          sum &#x3D; sum + array[i];\n       &#125;\n       array[0] &#x3D; sum;\n       count &#x3D; 1;\n    &#125;\n\n    array[count] &#x3D; val;\n    ++count;\n &#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。</p>\n"},{"title":"多数元素 II","date":"2023-02-23T14:47:12.000Z","_content":"\n给定一个大小为 n 的整数数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。\n\n \n\n示例 1：\n\n输入：nums = [3,2,3]\n输出：[3]\n示例 2：\n\n输入：nums = [1]\n输出：[1]\n示例 3：\n\n输入：nums = [1,2]\n输出：[1,2]\n\n\n提示：\n\n1 <= nums.length <= 5 * 104\n-109 <= nums[i] <= 109\n\n\n进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1)的算法解决此问题。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/majority-element-ii\n\n\n\n解法1：使用额外的空间：\n\n```java\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        //解题直接先写map形式：利用空间复杂度解决问题，同时锻炼对map的记忆。\n        Map<Integer,Integer> map = new HashMap<>();\n        for(int i = 0; i< nums.length;i++){\n            map.put(nums[i],map.getOrDefault(nums[i],0)+1);\n        }\n        int needNum = nums.length / 3;\n        //得到map的结果之后那就是找到出现频率最多的其中两个值了\n        List<Integer> result = new ArrayList<>();\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() > needNum){\n                result.add(entry.getKey());\n            }\n        }\n        return result;\n    }\n}\n```\n\n\n\n解法2：\n\n非人哉。！！！\n\n```java\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n\n        //分为两种情况：\n        if(nums.length <3){\n            if(nums.length == 2){\n                if(nums[0] != nums[1]){\n                    return Arrays.asList(nums[0],nums[1]);\n                }\n            }\n            return Arrays.asList(nums[0]);\n        }\n        //\n        Integer flagA = null; // A 山头\n        Integer flagB = null; // B 山头\n        Integer countX = 0; //A山头人数\n        Integer countY = 0; //B山头人数\n\n        int i = 0;\n        //获取山头的数据\n        for(;i< nums.length; i++){\n            if(flagA != null && flagB != null){\n                break;\n            }\n            if(flagA == null){\n                flagA = Integer.valueOf(nums[i]);\n                countX++;\n            } else if(flagA == nums[i]){\n                countX++;\n            } else if(flagB == null){\n                flagB = Integer.valueOf(nums[i]);\n                countY++;\n            }\n        }\n\n        //假设有两个山头，100人要抢这两个山头,那么肯定有<=2个 队伍的人数>=34人。\n        //那么按照拼杀原则的话，最后赢得肯定是这两个队伍的人\n        for(; i< nums.length;i++){\n            if(flagA == nums[i]){\n                countX++;\n            } if(countX == 0 && (nums[i] != flagB)){\n                flagA = nums[i];\n                countX = 1;\n            }\n            if(flagB == nums[i]){\n                countY++;\n            } if(countY == 0 && (nums[i] != flagA)){\n                flagB = nums[i];\n                countY = 1;\n            }\n            //由于这里会拿非山头的两次攻打山头，会造成山头的人员多死，所以此处标记下。\n            if(nums[i] != flagB && nums[i] != flagA){\n                countX--;\n                countY--;\n            }\n        }\n\n        //上面循环最终得出的数据为人数最多的<=2只队伍。\n        \n        int count1 = 0;\n        int count2 = 0;\n        for( int j = 0; j< nums.length;j++){\n            if(flagA != null && nums[j] == flagA){\n                count1++;\n            }\n            if(flagB != null && nums[j] == flagB){\n                count2++;\n            }\n        }\n        int needNum = nums.length/3;\n        List<Integer> result = new ArrayList<>();\n        if(count1 > needNum){\n            result.add(flagA);\n        }\n        if(count2 > needNum){\n            result.add(flagB);\n        }\n        return result;\n    }\n}\n```\n\n","source":"_posts/多数元素-II.md","raw":"---\ntitle: 多数元素 II\ndate: 2023-02-23 22:47:12\ntags:\n  - 算法\n---\n\n给定一个大小为 n 的整数数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。\n\n \n\n示例 1：\n\n输入：nums = [3,2,3]\n输出：[3]\n示例 2：\n\n输入：nums = [1]\n输出：[1]\n示例 3：\n\n输入：nums = [1,2]\n输出：[1,2]\n\n\n提示：\n\n1 <= nums.length <= 5 * 104\n-109 <= nums[i] <= 109\n\n\n进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1)的算法解决此问题。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/majority-element-ii\n\n\n\n解法1：使用额外的空间：\n\n```java\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        //解题直接先写map形式：利用空间复杂度解决问题，同时锻炼对map的记忆。\n        Map<Integer,Integer> map = new HashMap<>();\n        for(int i = 0; i< nums.length;i++){\n            map.put(nums[i],map.getOrDefault(nums[i],0)+1);\n        }\n        int needNum = nums.length / 3;\n        //得到map的结果之后那就是找到出现频率最多的其中两个值了\n        List<Integer> result = new ArrayList<>();\n        for(Map.Entry<Integer,Integer> entry: map.entrySet()){\n            if(entry.getValue() > needNum){\n                result.add(entry.getKey());\n            }\n        }\n        return result;\n    }\n}\n```\n\n\n\n解法2：\n\n非人哉。！！！\n\n```java\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n\n        //分为两种情况：\n        if(nums.length <3){\n            if(nums.length == 2){\n                if(nums[0] != nums[1]){\n                    return Arrays.asList(nums[0],nums[1]);\n                }\n            }\n            return Arrays.asList(nums[0]);\n        }\n        //\n        Integer flagA = null; // A 山头\n        Integer flagB = null; // B 山头\n        Integer countX = 0; //A山头人数\n        Integer countY = 0; //B山头人数\n\n        int i = 0;\n        //获取山头的数据\n        for(;i< nums.length; i++){\n            if(flagA != null && flagB != null){\n                break;\n            }\n            if(flagA == null){\n                flagA = Integer.valueOf(nums[i]);\n                countX++;\n            } else if(flagA == nums[i]){\n                countX++;\n            } else if(flagB == null){\n                flagB = Integer.valueOf(nums[i]);\n                countY++;\n            }\n        }\n\n        //假设有两个山头，100人要抢这两个山头,那么肯定有<=2个 队伍的人数>=34人。\n        //那么按照拼杀原则的话，最后赢得肯定是这两个队伍的人\n        for(; i< nums.length;i++){\n            if(flagA == nums[i]){\n                countX++;\n            } if(countX == 0 && (nums[i] != flagB)){\n                flagA = nums[i];\n                countX = 1;\n            }\n            if(flagB == nums[i]){\n                countY++;\n            } if(countY == 0 && (nums[i] != flagA)){\n                flagB = nums[i];\n                countY = 1;\n            }\n            //由于这里会拿非山头的两次攻打山头，会造成山头的人员多死，所以此处标记下。\n            if(nums[i] != flagB && nums[i] != flagA){\n                countX--;\n                countY--;\n            }\n        }\n\n        //上面循环最终得出的数据为人数最多的<=2只队伍。\n        \n        int count1 = 0;\n        int count2 = 0;\n        for( int j = 0; j< nums.length;j++){\n            if(flagA != null && nums[j] == flagA){\n                count1++;\n            }\n            if(flagB != null && nums[j] == flagB){\n                count2++;\n            }\n        }\n        int needNum = nums.length/3;\n        List<Integer> result = new ArrayList<>();\n        if(count1 > needNum){\n            result.add(flagA);\n        }\n        if(count2 > needNum){\n            result.add(flagB);\n        }\n        return result;\n    }\n}\n```\n\n","slug":"多数元素-II","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202k002stp4laz138r67","content":"<p>给定一个大小为 n 的整数数组，找出其中所有出现超过 ⌊ n&#x2F;3 ⌋ 次的元素。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,2,3]<br>输出：[3]<br>示例 2：</p>\n<p>输入：nums &#x3D; [1]<br>输出：[1]<br>示例 3：</p>\n<p>输入：nums &#x3D; [1,2]<br>输出：[1,2]</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</p>\n<p>进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1)的算法解决此问题。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/majority-element-ii\">https://leetcode.cn/problems/majority-element-ii</a></p>\n<p>解法1：使用额外的空间：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//解题直接先写map形式：利用空间复杂度解决问题，同时锻炼对map的记忆。</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> needNum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到map的结果之后那就是找到出现频率最多的其中两个值了</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> needNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解法2：</p>\n<p>非人哉。！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//分为两种情况：</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token class-name\">Integer</span> flagA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A 山头</span>\n        <span class=\"token class-name\">Integer</span> flagB <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B 山头</span>\n        <span class=\"token class-name\">Integer</span> countX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//A山头人数</span>\n        <span class=\"token class-name\">Integer</span> countY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//B山头人数</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取山头的数据</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> flagB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagA <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                countX<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countX<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagB <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagB <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                countY<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//假设有两个山头，100人要抢这两个山头,那么肯定有&lt;=2个 队伍的人数>=34人。</span>\n        <span class=\"token comment\">//那么按照拼杀原则的话，最后赢得肯定是这两个队伍的人</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countX<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>countX <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagA <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                countX <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagB <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countY<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>countY <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagB <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                countY <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//由于这里会拿非山头的两次攻打山头，会造成山头的人员多死，所以此处标记下。</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagB <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countX<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                countY<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//上面循环最终得出的数据为人数最多的&lt;=2只队伍。</span>\n        \n        <span class=\"token keyword\">int</span> count1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> flagB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> needNum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count1 <span class=\"token operator\">></span> needNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count2 <span class=\"token operator\">></span> needNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>flagB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个大小为 n 的整数数组，找出其中所有出现超过 ⌊ n&#x2F;3 ⌋ 次的元素。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,2,3]<br>输出：[3]<br>示例 2：</p>\n<p>输入：nums &#x3D; [1]<br>输出：[1]<br>示例 3：</p>\n<p>输入：nums &#x3D; [1,2]<br>输出：[1,2]</p>\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</p>\n<p>进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1)的算法解决此问题。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/majority-element-ii\">https://leetcode.cn/problems/majority-element-ii</a></p>\n<p>解法1：使用额外的空间：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//解题直接先写map形式：利用空间复杂度解决问题，同时锻炼对map的记忆。</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> needNum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到map的结果之后那就是找到出现频率最多的其中两个值了</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> needNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>解法2：</p>\n<p>非人哉。！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//分为两种情况：</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token class-name\">Integer</span> flagA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A 山头</span>\n        <span class=\"token class-name\">Integer</span> flagB <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B 山头</span>\n        <span class=\"token class-name\">Integer</span> countX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//A山头人数</span>\n        <span class=\"token class-name\">Integer</span> countY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//B山头人数</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取山头的数据</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> flagB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagA <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                countX<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countX<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagB <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagB <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                countY<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//假设有两个山头，100人要抢这两个山头,那么肯定有&lt;=2个 队伍的人数>=34人。</span>\n        <span class=\"token comment\">//那么按照拼杀原则的话，最后赢得肯定是这两个队伍的人</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countX<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>countX <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagA <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                countX <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagB <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countY<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>countY <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                flagB <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                countY <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//由于这里会拿非山头的两次攻打山头，会造成山头的人员多死，所以此处标记下。</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagB <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                countX<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                countY<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//上面循环最终得出的数据为人数最多的&lt;=2只队伍。</span>\n        \n        <span class=\"token keyword\">int</span> count1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flagB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> flagB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> needNum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count1 <span class=\"token operator\">></span> needNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>flagA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count2 <span class=\"token operator\">></span> needNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>flagB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"常用linux命令","date":"2022-06-10T06:40:11.000Z","_content":"\n排查当前有哪些进程在使用某个端口\n![img.png](/img/img.png)\n\n``` shell\nlsof -i:4000\n```\n![img_1.png](/img/img_1.png)\n``` shell\nkill -9 4000\n```\n\n\n","source":"_posts/常用linux命令.md","raw":"---\ntitle: 常用linux命令\ndate: 2022-06-10 14:40:11\ntags: linux\n---\n\n排查当前有哪些进程在使用某个端口\n![img.png](/img/img.png)\n\n``` shell\nlsof -i:4000\n```\n![img_1.png](/img/img_1.png)\n``` shell\nkill -9 4000\n```\n\n\n","slug":"常用linux命令","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202l002vtp4l35kcbk29","content":"<p>排查当前有哪些进程在使用某个端口<br><img src=\"/img/img.png\" alt=\"img.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">lsof</span> -i:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/img_1.png\" alt=\"img_1.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -9 <span class=\"token number\">4000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>排查当前有哪些进程在使用某个端口<br><img src=\"/img/img.png\" alt=\"img.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">lsof</span> -i:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/img_1.png\" alt=\"img_1.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -9 <span class=\"token number\">4000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n"},{"title":"最小覆盖子串","date":"2023-03-27T14:43:21.000Z","_content":"\n给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 \"\" 。\n\n \n\n注意：\n\n对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。\n如果 s 中存在这样的子串，我们保证它是唯一的答案。\n\n\n示例 1：\n\n输入：s = \"ADOBECODEBANC\", t = \"ABC\"\n输出：\"BANC\"\n解释：最小覆盖子串 \"BANC\" 包含来自字符串 t 的 'A'、'B' 和 'C'。\n示例 2：\n\n输入：s = \"a\", t = \"a\"\n输出：\"a\"\n解释：整个字符串 s 是最小覆盖子串。\n示例 3:\n\n输入: s = \"a\", t = \"aa\"\n输出: \"\"\n解释: t 中两个字符 'a' 均应包含在 s 的子串中，\n因此没有符合条件的子字符串，返回空字符串。\n\n\n提示：\n\nm == s.length\nn == t.length\n1 <= m, n <= 105\ns 和 t 由英文字母组成\n\n\n进阶：你能设计一个在 o(m+n) 时间内解决此问题的算法吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/minimum-window-substring\n","source":"_posts/最小覆盖子串.md","raw":"---\ntitle: 最小覆盖子串\ndate: 2023-03-27 22:43:21\ntags:\n  - 算法\n  - 滑动窗口\n---\n\n给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 \"\" 。\n\n \n\n注意：\n\n对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。\n如果 s 中存在这样的子串，我们保证它是唯一的答案。\n\n\n示例 1：\n\n输入：s = \"ADOBECODEBANC\", t = \"ABC\"\n输出：\"BANC\"\n解释：最小覆盖子串 \"BANC\" 包含来自字符串 t 的 'A'、'B' 和 'C'。\n示例 2：\n\n输入：s = \"a\", t = \"a\"\n输出：\"a\"\n解释：整个字符串 s 是最小覆盖子串。\n示例 3:\n\n输入: s = \"a\", t = \"aa\"\n输出: \"\"\n解释: t 中两个字符 'a' 均应包含在 s 的子串中，\n因此没有符合条件的子字符串，返回空字符串。\n\n\n提示：\n\nm == s.length\nn == t.length\n1 <= m, n <= 105\ns 和 t 由英文字母组成\n\n\n进阶：你能设计一个在 o(m+n) 时间内解决此问题的算法吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/minimum-window-substring\n","slug":"最小覆盖子串","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202l002xtp4l87gn7ye5","content":"<p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p>\n<p>注意：</p>\n<p>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>如果 s 中存在这样的子串，我们保证它是唯一的答案。</p>\n<p>示例 1：</p>\n<p>输入：s &#x3D; “ADOBECODEBANC”, t &#x3D; “ABC”<br>输出：”BANC”<br>解释：最小覆盖子串 “BANC” 包含来自字符串 t 的 ‘A’、’B’ 和 ‘C’。<br>示例 2：</p>\n<p>输入：s &#x3D; “a”, t &#x3D; “a”<br>输出：”a”<br>解释：整个字符串 s 是最小覆盖子串。<br>示例 3:</p>\n<p>输入: s &#x3D; “a”, t &#x3D; “aa”<br>输出: “”<br>解释: t 中两个字符 ‘a’ 均应包含在 s 的子串中，<br>因此没有符合条件的子字符串，返回空字符串。</p>\n<p>提示：</p>\n<p>m &#x3D;&#x3D; s.length<br>n &#x3D;&#x3D; t.length<br>1 &lt;&#x3D; m, n &lt;&#x3D; 105<br>s 和 t 由英文字母组成</p>\n<p>进阶：你能设计一个在 o(m+n) 时间内解决此问题的算法吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/minimum-window-substring\">https://leetcode.cn/problems/minimum-window-substring</a></p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p>\n<p>注意：</p>\n<p>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>如果 s 中存在这样的子串，我们保证它是唯一的答案。</p>\n<p>示例 1：</p>\n<p>输入：s &#x3D; “ADOBECODEBANC”, t &#x3D; “ABC”<br>输出：”BANC”<br>解释：最小覆盖子串 “BANC” 包含来自字符串 t 的 ‘A’、’B’ 和 ‘C’。<br>示例 2：</p>\n<p>输入：s &#x3D; “a”, t &#x3D; “a”<br>输出：”a”<br>解释：整个字符串 s 是最小覆盖子串。<br>示例 3:</p>\n<p>输入: s &#x3D; “a”, t &#x3D; “aa”<br>输出: “”<br>解释: t 中两个字符 ‘a’ 均应包含在 s 的子串中，<br>因此没有符合条件的子字符串，返回空字符串。</p>\n<p>提示：</p>\n<p>m &#x3D;&#x3D; s.length<br>n &#x3D;&#x3D; t.length<br>1 &lt;&#x3D; m, n &lt;&#x3D; 105<br>s 和 t 由英文字母组成</p>\n<p>进阶：你能设计一个在 o(m+n) 时间内解决此问题的算法吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/minimum-window-substring\">https://leetcode.cn/problems/minimum-window-substring</a></p>\n"},{"title":"滑动窗口模版","date":"2023-03-27T15:07:07.000Z","_content":"\n\n\n本篇文章着重解答什么算法题应该使用滑动窗口来解答，还有滑动窗口的难点在哪里？\n\n<img src=\"https://pic.leetcode-cn.com/8d7be984b81c96f0438c6ef3343fcf219e39482d7cdae8f2de9d06fa23fb88c5.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n\n\n```java\n//模板\n/* 滑动窗口算法框架 */\nvoid slidingWindow(string s, string t) {\n    Map<Character, Integer> need = new HashMap<>();\n    Map<Character, Integer> window = new HashMap<>();\n    for (char c : t.toCharArray()) \n        need.put(c,need.getOrDefault(c,0)+1);\n\tint left = 0; // 双指针的左指针\n  int right = 0;// 双指针的右指针\n\tint valid = 0;  // \n\twhile (right < s.size()) {\n    \t// c 是将移入窗口的字符\n   \t \tchar c = s.charAt(right);\n    \t// 右移窗口\n    \tright++;\n    \t// 进行窗口内数据的一系列更新\n    \t...\n\n    \t/*** debug 输出的位置 ***/\n    \tSystem.out.println(\"window: [\"+left+\",\"+ right+\")\");\n    \t/********************/\n    \n    \t// 判断左侧窗口是否要收缩\n    \twhile (window needs shrink) {\n        \t// d 是将移出窗口的字符\n        \tchar d = s[left];\n        \t// 左移窗口\n        \tleft++;\n        \t// 进行窗口内数据的一系列更新\n        \t...\n    \t}\n\t}\n}\n```\n\n来自于：https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wo-xie-liao-yi-shou-shi-ba-suo-you-hua-dong-chua-2/\n\n","source":"_posts/滑动窗口模版.md","raw":"---\ntitle: 滑动窗口模版\ndate: 2023-03-27 23:07:07\ntags:\n  - 滑动窗口\n  - 算法\n---\n\n\n\n本篇文章着重解答什么算法题应该使用滑动窗口来解答，还有滑动窗口的难点在哪里？\n\n<img src=\"https://pic.leetcode-cn.com/8d7be984b81c96f0438c6ef3343fcf219e39482d7cdae8f2de9d06fa23fb88c5.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n\n\n```java\n//模板\n/* 滑动窗口算法框架 */\nvoid slidingWindow(string s, string t) {\n    Map<Character, Integer> need = new HashMap<>();\n    Map<Character, Integer> window = new HashMap<>();\n    for (char c : t.toCharArray()) \n        need.put(c,need.getOrDefault(c,0)+1);\n\tint left = 0; // 双指针的左指针\n  int right = 0;// 双指针的右指针\n\tint valid = 0;  // \n\twhile (right < s.size()) {\n    \t// c 是将移入窗口的字符\n   \t \tchar c = s.charAt(right);\n    \t// 右移窗口\n    \tright++;\n    \t// 进行窗口内数据的一系列更新\n    \t...\n\n    \t/*** debug 输出的位置 ***/\n    \tSystem.out.println(\"window: [\"+left+\",\"+ right+\")\");\n    \t/********************/\n    \n    \t// 判断左侧窗口是否要收缩\n    \twhile (window needs shrink) {\n        \t// d 是将移出窗口的字符\n        \tchar d = s[left];\n        \t// 左移窗口\n        \tleft++;\n        \t// 进行窗口内数据的一系列更新\n        \t...\n    \t}\n\t}\n}\n```\n\n来自于：https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wo-xie-liao-yi-shou-shi-ba-suo-you-hua-dong-chua-2/\n\n","slug":"滑动窗口模版","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202l0030tp4l80y35pkg","content":"<p>本篇文章着重解答什么算法题应该使用滑动窗口来解答，还有滑动窗口的难点在哪里？</p>\n<img src=\"https://pic.leetcode-cn.com/8d7be984b81c96f0438c6ef3343fcf219e39482d7cdae8f2de9d06fa23fb88c5.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//模板</span>\n<span class=\"token comment\">/* 滑动窗口算法框架 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">slidingWindow</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> need <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n        need<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>need<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 双指针的左指针</span>\n  <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 双指针的右指针</span>\n\t<span class=\"token keyword\">int</span> valid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// </span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">// c 是将移入窗口的字符</span>\n   \t \t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">// 右移窗口</span>\n    \tright<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">// 进行窗口内数据的一系列更新</span>\n    \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    \t<span class=\"token comment\">/*** debug 输出的位置 ***/</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"window: [\"</span><span class=\"token operator\">+</span>left<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span> right<span class=\"token operator\">+</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">/********************/</span>\n    \n    \t<span class=\"token comment\">// 判断左侧窗口是否要收缩</span>\n    \t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>window needs shrink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token comment\">// d 是将移出窗口的字符</span>\n        \t<span class=\"token keyword\">char</span> d <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token comment\">// 左移窗口</span>\n        \tleft<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token comment\">// 进行窗口内数据的一系列更新</span>\n        \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>来自于：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wo-xie-liao-yi-shou-shi-ba-suo-you-hua-dong-chua-2/\">https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wo-xie-liao-yi-shou-shi-ba-suo-you-hua-dong-chua-2/</a></p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>本篇文章着重解答什么算法题应该使用滑动窗口来解答，还有滑动窗口的难点在哪里？</p>\n<img src=\"https://pic.leetcode-cn.com/8d7be984b81c96f0438c6ef3343fcf219e39482d7cdae8f2de9d06fa23fb88c5.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//模板</span>\n<span class=\"token comment\">/* 滑动窗口算法框架 */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">slidingWindow</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> need <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n        need<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>need<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 双指针的左指针</span>\n  <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 双指针的右指针</span>\n\t<span class=\"token keyword\">int</span> valid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// </span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">// c 是将移入窗口的字符</span>\n   \t \t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">// 右移窗口</span>\n    \tright<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">// 进行窗口内数据的一系列更新</span>\n    \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    \t<span class=\"token comment\">/*** debug 输出的位置 ***/</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"window: [\"</span><span class=\"token operator\">+</span>left<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span> right<span class=\"token operator\">+</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">/********************/</span>\n    \n    \t<span class=\"token comment\">// 判断左侧窗口是否要收缩</span>\n    \t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>window needs shrink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token comment\">// d 是将移出窗口的字符</span>\n        \t<span class=\"token keyword\">char</span> d <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token comment\">// 左移窗口</span>\n        \tleft<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token comment\">// 进行窗口内数据的一系列更新</span>\n        \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>来自于：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wo-xie-liao-yi-shou-shi-ba-suo-you-hua-dong-chua-2/\">https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wo-xie-liao-yi-shou-shi-ba-suo-you-hua-dong-chua-2/</a></p>\n"},{"title":"1456. 定长子串中元音的最大数目","date":"2024-07-18T14:38:49.000Z","_content":"\n给你字符串 `s` 和整数 `k` 。\n\n请返回字符串 `s` 中长度为 `k` 的单个子字符串中可能包含的最大元音字母数。\n\n英文中的 **元音字母** 为（`a`, `e`, `i`, `o`, `u`）。\n\n\n\n**示例 1：**\n\n```\n输入：s = \"abciiidef\", k = 3\n输出：3\n解释：子字符串 \"iii\" 包含 3 个元音字母。\n```\n\n**示例 2：**\n\n```\n输入：s = \"aeiou\", k = 2\n输出：2\n解释：任意长度为 2 的子字符串都包含 2 个元音字母。\n```\n\n**示例 3：**\n\n```\n输入：s = \"leetcode\", k = 3\n输出：2\n解释：\"lee\"、\"eet\" 和 \"ode\" 都包含 2 个元音字母。\n```\n\n**示例 4：**\n\n```\n输入：s = \"rhythms\", k = 4\n输出：0\n解释：字符串 s 中不含任何元音字母。\n```\n\n**示例 5：**\n\n```\n输入：s = \"tryhard\", k = 4\n输出：1\n```\n\n**提示：**\n\n- `1 <= s.length <= 10^5`\n- `s` 由小写英文字母组成\n- `1 <= k <= s.length`\n\n\n\n暴力破解：\n\n```java\nclass Solution {\n    private List<Character> charList = Arrays.asList('a', 'e', 'i', 'o', 'u');\n    public int maxVowels(String s, int k) {\n        char[] charArray = s.toCharArray();\n        int max = 0;\n        for(int i =0 ; i < charArray.length; i++){\n            if(charList.contains(charArray[i])){\n                //依次向后循环\n                int temp = 0;\n                for(int j = i; j< charArray.length && j < i+k; j++){\n                    //\n                    if(charList.contains(charArray[j])){\n                        temp++;\n                    }\n                }\n                max = Math.max(temp,max);\n            }\n        }\n        return max;\n    }\n}\n```\n\n不出意外，结果超时了，时间复杂度在最坏情况下接近O(n^2)\n\n思考：\n\n由于算法中使用了两层循环，所以在遇到大数据量时，会出现超时的问题。\n\n那么在算法中是否有重复做功呢？\n\n有。即在第二层循环中进行了多次判断。那么怎么减少多次判断的次数呢？\n\n有个想法：举例说明：\n\nleetcode，l不是，则到下一个，e是，则计数加一 等于1，下一个，e是，计数加一 等于2，下一个，t不是，计数减一。\n\n```java\nclass Solution {\n    private List<Character> charList = Arrays.asList('a', 'e', 'i', 'o', 'u');\n    public int maxVowels(String s, int k) {\n        char[] charArray = s.toCharArray();\n        int max = 0;\n        //计算前k个对应的结果\n        for(int i =0 ; i < k; i++){\n            if(charList.contains(charArray[i])){\n                max++;\n            }\n        }\n\n        int result = max;\n\n        for(int i = k ; i < charArray.length; i++){\n            //每向后挪一步，都要关注这一步的值是啥，以及之开头一步的值是啥\n            //如果后挪一步是，则加一\n            //若是前面移除的值是，则减1\n            boolean next = charList.contains(charArray[i]);\n            boolean start = charList.contains(charArray[i-k]);\n            if(next){\n                max++;\n            }\n            if(start){\n                max--;\n            }\n            // System.out.println(\"current is \"+ charArray[i] + \"; max = \"+ max);\n            result = Math.max(result,max);\n        }\n        return result;\n    }\n}\n```\n\n\n\n","source":"_posts/algorithm/1456. 定长子串中元音的最大数目.md","raw":"---\ntitle: 1456. 定长子串中元音的最大数目\ndate: 2024-07-18 22:38:49\ncategories:\n  - 算法\ntags:\n  - 算法\n  - 定长滑动窗口专题\n---\n\n给你字符串 `s` 和整数 `k` 。\n\n请返回字符串 `s` 中长度为 `k` 的单个子字符串中可能包含的最大元音字母数。\n\n英文中的 **元音字母** 为（`a`, `e`, `i`, `o`, `u`）。\n\n\n\n**示例 1：**\n\n```\n输入：s = \"abciiidef\", k = 3\n输出：3\n解释：子字符串 \"iii\" 包含 3 个元音字母。\n```\n\n**示例 2：**\n\n```\n输入：s = \"aeiou\", k = 2\n输出：2\n解释：任意长度为 2 的子字符串都包含 2 个元音字母。\n```\n\n**示例 3：**\n\n```\n输入：s = \"leetcode\", k = 3\n输出：2\n解释：\"lee\"、\"eet\" 和 \"ode\" 都包含 2 个元音字母。\n```\n\n**示例 4：**\n\n```\n输入：s = \"rhythms\", k = 4\n输出：0\n解释：字符串 s 中不含任何元音字母。\n```\n\n**示例 5：**\n\n```\n输入：s = \"tryhard\", k = 4\n输出：1\n```\n\n**提示：**\n\n- `1 <= s.length <= 10^5`\n- `s` 由小写英文字母组成\n- `1 <= k <= s.length`\n\n\n\n暴力破解：\n\n```java\nclass Solution {\n    private List<Character> charList = Arrays.asList('a', 'e', 'i', 'o', 'u');\n    public int maxVowels(String s, int k) {\n        char[] charArray = s.toCharArray();\n        int max = 0;\n        for(int i =0 ; i < charArray.length; i++){\n            if(charList.contains(charArray[i])){\n                //依次向后循环\n                int temp = 0;\n                for(int j = i; j< charArray.length && j < i+k; j++){\n                    //\n                    if(charList.contains(charArray[j])){\n                        temp++;\n                    }\n                }\n                max = Math.max(temp,max);\n            }\n        }\n        return max;\n    }\n}\n```\n\n不出意外，结果超时了，时间复杂度在最坏情况下接近O(n^2)\n\n思考：\n\n由于算法中使用了两层循环，所以在遇到大数据量时，会出现超时的问题。\n\n那么在算法中是否有重复做功呢？\n\n有。即在第二层循环中进行了多次判断。那么怎么减少多次判断的次数呢？\n\n有个想法：举例说明：\n\nleetcode，l不是，则到下一个，e是，则计数加一 等于1，下一个，e是，计数加一 等于2，下一个，t不是，计数减一。\n\n```java\nclass Solution {\n    private List<Character> charList = Arrays.asList('a', 'e', 'i', 'o', 'u');\n    public int maxVowels(String s, int k) {\n        char[] charArray = s.toCharArray();\n        int max = 0;\n        //计算前k个对应的结果\n        for(int i =0 ; i < k; i++){\n            if(charList.contains(charArray[i])){\n                max++;\n            }\n        }\n\n        int result = max;\n\n        for(int i = k ; i < charArray.length; i++){\n            //每向后挪一步，都要关注这一步的值是啥，以及之开头一步的值是啥\n            //如果后挪一步是，则加一\n            //若是前面移除的值是，则减1\n            boolean next = charList.contains(charArray[i]);\n            boolean start = charList.contains(charArray[i-k]);\n            if(next){\n                max++;\n            }\n            if(start){\n                max--;\n            }\n            // System.out.println(\"current is \"+ charArray[i] + \"; max = \"+ max);\n            result = Math.max(result,max);\n        }\n        return result;\n    }\n}\n```\n\n\n\n","slug":"algorithm/1456. 定长子串中元音的最大数目","published":1,"updated":"2024-07-20T15:41:42.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202m0032tp4lc71na5sk","content":"<p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p>\n<p>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p>\n<p>英文中的 <strong>元音字母</strong> 为（<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>）。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;abciiidef&quot;, k &#x3D; 3\n输出：3\n解释：子字符串 &quot;iii&quot; 包含 3 个元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;aeiou&quot;, k &#x3D; 2\n输出：2\n解释：任意长度为 2 的子字符串都包含 2 个元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;leetcode&quot;, k &#x3D; 3\n输出：2\n解释：&quot;lee&quot;、&quot;eet&quot; 和 &quot;ode&quot; 都包含 2 个元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;rhythms&quot;, k &#x3D; 4\n输出：0\n解释：字符串 s 中不含任何元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 5：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;tryhard&quot;, k &#x3D; 4\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 10^5</code></li>\n<li><code>s</code> 由小写英文字母组成</li>\n<li><code>1 &lt;= k &lt;= s.length</code></li>\n</ul>\n<p>暴力破解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> charList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> charArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//依次向后循环</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> charArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token operator\">+</span>k<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        temp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不出意外，结果超时了，时间复杂度在最坏情况下接近O(n^2)</p>\n<p>思考：</p>\n<p>由于算法中使用了两层循环，所以在遇到大数据量时，会出现超时的问题。</p>\n<p>那么在算法中是否有重复做功呢？</p>\n<p>有。即在第二层循环中进行了多次判断。那么怎么减少多次判断的次数呢？</p>\n<p>有个想法：举例说明：</p>\n<p>leetcode，l不是，则到下一个，e是，则计数加一 等于1，下一个，e是，计数加一 等于2，下一个，t不是，计数减一。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> charList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//计算前k个对应的结果</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> charArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//每向后挪一步，都要关注这一步的值是啥，以及之开头一步的值是啥</span>\n            <span class=\"token comment\">//如果后挪一步是，则加一</span>\n            <span class=\"token comment\">//若是前面移除的值是，则减1</span>\n            <span class=\"token keyword\">boolean</span> next <span class=\"token operator\">=</span> charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> start <span class=\"token operator\">=</span> charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// System.out.println(\"current is \"+ charArray[i] + \"; max = \"+ max);</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p>\n<p>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p>\n<p>英文中的 <strong>元音字母</strong> 为（<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>）。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;abciiidef&quot;, k &#x3D; 3\n输出：3\n解释：子字符串 &quot;iii&quot; 包含 3 个元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;aeiou&quot;, k &#x3D; 2\n输出：2\n解释：任意长度为 2 的子字符串都包含 2 个元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;leetcode&quot;, k &#x3D; 3\n输出：2\n解释：&quot;lee&quot;、&quot;eet&quot; 和 &quot;ode&quot; 都包含 2 个元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;rhythms&quot;, k &#x3D; 4\n输出：0\n解释：字符串 s 中不含任何元音字母。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 5：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;tryhard&quot;, k &#x3D; 4\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 10^5</code></li>\n<li><code>s</code> 由小写英文字母组成</li>\n<li><code>1 &lt;= k &lt;= s.length</code></li>\n</ul>\n<p>暴力破解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> charList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> charArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//依次向后循环</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> charArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token operator\">+</span>k<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        temp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不出意外，结果超时了，时间复杂度在最坏情况下接近O(n^2)</p>\n<p>思考：</p>\n<p>由于算法中使用了两层循环，所以在遇到大数据量时，会出现超时的问题。</p>\n<p>那么在算法中是否有重复做功呢？</p>\n<p>有。即在第二层循环中进行了多次判断。那么怎么减少多次判断的次数呢？</p>\n<p>有个想法：举例说明：</p>\n<p>leetcode，l不是，则到下一个，e是，则计数加一 等于1，下一个，e是，计数加一 等于2，下一个，t不是，计数减一。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> charList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//计算前k个对应的结果</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> charArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//每向后挪一步，都要关注这一步的值是啥，以及之开头一步的值是啥</span>\n            <span class=\"token comment\">//如果后挪一步是，则加一</span>\n            <span class=\"token comment\">//若是前面移除的值是，则减1</span>\n            <span class=\"token keyword\">boolean</span> next <span class=\"token operator\">=</span> charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> start <span class=\"token operator\">=</span> charList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                max<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// System.out.println(\"current is \"+ charArray[i] + \"; max = \"+ max);</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"COLA架构","date":"2022-09-24T13:12:24.000Z","_content":"\n<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\ncola架构\n\n\n\n","source":"_posts/架构知识.md","raw":"---\ntitle: COLA架构\ndate: 2022-09-24 21:12:24\ntags:\n  - 架构\n---\n\n<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\ncola架构\n\n\n\n","slug":"架构知识","published":1,"updated":"2024-07-20T15:41:42.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202m0035tp4lemdaeva1","content":"<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>cola架构</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>cola架构</p>\n"},{"title":"1343.大小为K且平均值大于等于阈值的子数组数目","date":"2024-07-29T15:07:26.000Z","_content":"\n给你一个整数数组 `arr` 和两个整数 `k` 和 `threshold` 。\n\n请你返回长度为 `k` 且平均值大于等于 `threshold` 的子数组数目。\n\n \n\n**示例 1：**\n\n```\n输入：arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n输出：3\n解释：子数组 [2,5,5],[5,5,5] 和 [5,5,8] 的平均值分别为 4，5 和 6 。其他长度为 3 的子数组的平均值都小于 4 （threshold 的值)。\n```\n\n**示例 2：**\n\n```\n输入：arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n输出：6\n解释：前 6 个长度为 3 的子数组平均值都大于 5 。注意平均值不是整数。\n```\n\n \n\n**提示：**\n\n- `1 <= arr.length <= 10^5`\n- `1 <= arr[i] <= 10^4`\n- `1 <= k <= arr.length`\n- `0 <= threshold <= 10^4`\n\n\n\n```java\nclass Solution {\n    public int numOfSubarrays(int[] arr, int k, int threshold) {\n        int sum = 0;\n        int length = arr.length;\n        for(int i = 0; i < k; i++){\n            sum += arr[i];\n        }\n        int result = 0;\n        if(sum/k >= threshold){\n            result++;\n        }\n\n        for(int i = k; i< length ; i++){\n            sum = sum - arr[i-k] + arr[i];\n            if(sum/k >= threshold){\n                result++;\n            }\n        }\n        return result;\n    }\n}\n```\n\n","source":"_posts/algorithm/大小为K且平均值大于等于阈值的子数组数目.md","raw":"---\ntitle: 1343.大小为K且平均值大于等于阈值的子数组数目\ndate: 2024-07-29 23:07:26\ncategories:\n  - 算法\ntags:\n  - 算法\n  - 定长滑动窗口专题\n---\n\n给你一个整数数组 `arr` 和两个整数 `k` 和 `threshold` 。\n\n请你返回长度为 `k` 且平均值大于等于 `threshold` 的子数组数目。\n\n \n\n**示例 1：**\n\n```\n输入：arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n输出：3\n解释：子数组 [2,5,5],[5,5,5] 和 [5,5,8] 的平均值分别为 4，5 和 6 。其他长度为 3 的子数组的平均值都小于 4 （threshold 的值)。\n```\n\n**示例 2：**\n\n```\n输入：arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n输出：6\n解释：前 6 个长度为 3 的子数组平均值都大于 5 。注意平均值不是整数。\n```\n\n \n\n**提示：**\n\n- `1 <= arr.length <= 10^5`\n- `1 <= arr[i] <= 10^4`\n- `1 <= k <= arr.length`\n- `0 <= threshold <= 10^4`\n\n\n\n```java\nclass Solution {\n    public int numOfSubarrays(int[] arr, int k, int threshold) {\n        int sum = 0;\n        int length = arr.length;\n        for(int i = 0; i < k; i++){\n            sum += arr[i];\n        }\n        int result = 0;\n        if(sum/k >= threshold){\n            result++;\n        }\n\n        for(int i = k; i< length ; i++){\n            sum = sum - arr[i-k] + arr[i];\n            if(sum/k >= threshold){\n                result++;\n            }\n        }\n        return result;\n    }\n}\n```\n\n","slug":"algorithm/大小为K且平均值大于等于阈值的子数组数目","published":1,"updated":"2024-07-29T15:09:11.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202m0037tp4ldql10dnc","content":"<p>给你一个整数数组 <code>arr</code> 和两个整数 <code>k</code> 和 <code>threshold</code> 。</p>\n<p>请你返回长度为 <code>k</code> 且平均值大于等于 <code>threshold</code> 的子数组数目。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr &#x3D; [2,2,2,2,5,5,5,8], k &#x3D; 3, threshold &#x3D; 4\n输出：3\n解释：子数组 [2,5,5],[5,5,5] 和 [5,5,8] 的平均值分别为 4，5 和 6 。其他长度为 3 的子数组的平均值都小于 4 （threshold 的值)。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr &#x3D; [11,13,17,23,29,31,7,5,2,3], k &#x3D; 3, threshold &#x3D; 5\n输出：6\n解释：前 6 个长度为 3 的子数组平均值都大于 5 。注意平均值不是整数。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>\n<li><code>1 &lt;= arr[i] &lt;= 10^4</code></li>\n<li><code>1 &lt;= k &lt;= arr.length</code></li>\n<li><code>0 &lt;= threshold &lt;= 10^4</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numOfSubarrays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">/</span>k <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">/</span>k <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个整数数组 <code>arr</code> 和两个整数 <code>k</code> 和 <code>threshold</code> 。</p>\n<p>请你返回长度为 <code>k</code> 且平均值大于等于 <code>threshold</code> 的子数组数目。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr &#x3D; [2,2,2,2,5,5,5,8], k &#x3D; 3, threshold &#x3D; 4\n输出：3\n解释：子数组 [2,5,5],[5,5,5] 和 [5,5,8] 的平均值分别为 4，5 和 6 。其他长度为 3 的子数组的平均值都小于 4 （threshold 的值)。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr &#x3D; [11,13,17,23,29,31,7,5,2,3], k &#x3D; 3, threshold &#x3D; 5\n输出：6\n解释：前 6 个长度为 3 的子数组平均值都大于 5 。注意平均值不是整数。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>\n<li><code>1 &lt;= arr[i] &lt;= 10^4</code></li>\n<li><code>1 &lt;= k &lt;= arr.length</code></li>\n<li><code>0 &lt;= threshold &lt;= 10^4</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numOfSubarrays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">/</span>k <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">/</span>k <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"643.子数组最大平均数I","date":"2024-07-29T14:30:49.000Z","_content":"\n给你一个由 `n` 个元素组成的整数数组 `nums` 和一个整数 `k` 。\n\n请你找出平均数最大且 **长度为 `k`** 的连续子数组，并输出该最大平均数。\n\n任何误差小于 `10-5` 的答案都将被视为正确答案。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [1,12,-5,-6,50,3], k = 4\n输出：12.75\n解释：最大平均数 (12-5-6+50)/4 = 51/4 = 12.75\n```\n\n**示例 2：**\n\n```\n输入：nums = [5], k = 1\n输出：5.00000\n```\n\n \n\n**提示：**\n\n- `n == nums.length`\n- `1 <= k <= n <= 10^5`\n- `-10^4 <= nums[i] <= 10^4`\n\n```java\nclass Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        int sum = 0;\n        for(int i = 0; i< k; i++){\n            sum += nums[i];\n        }\n        int resultSum = sum ;\n        //得到前k个数的总和\n        \n        //然后依次向后循环.\n\n        int length = nums.length;\n        for(int i = k; i< length;i++){\n            sum = sum - nums[i-k] + nums[i];\n            resultSum = Math.max(sum,resultSum);\n        }\n\n        return 1.0 * resultSum / k;\n    }\n}\n```\n\n","source":"_posts/algorithm/子数组最大平均数I.md","raw":"---\ntitle: 643.子数组最大平均数I\ndate: 2024-07-29 22:30:49\ncategories:\n  - 算法\ntags:\n  - 算法\n  - 定长滑动窗口专题\n---\n\n给你一个由 `n` 个元素组成的整数数组 `nums` 和一个整数 `k` 。\n\n请你找出平均数最大且 **长度为 `k`** 的连续子数组，并输出该最大平均数。\n\n任何误差小于 `10-5` 的答案都将被视为正确答案。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [1,12,-5,-6,50,3], k = 4\n输出：12.75\n解释：最大平均数 (12-5-6+50)/4 = 51/4 = 12.75\n```\n\n**示例 2：**\n\n```\n输入：nums = [5], k = 1\n输出：5.00000\n```\n\n \n\n**提示：**\n\n- `n == nums.length`\n- `1 <= k <= n <= 10^5`\n- `-10^4 <= nums[i] <= 10^4`\n\n```java\nclass Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        int sum = 0;\n        for(int i = 0; i< k; i++){\n            sum += nums[i];\n        }\n        int resultSum = sum ;\n        //得到前k个数的总和\n        \n        //然后依次向后循环.\n\n        int length = nums.length;\n        for(int i = k; i< length;i++){\n            sum = sum - nums[i-k] + nums[i];\n            resultSum = Math.max(sum,resultSum);\n        }\n\n        return 1.0 * resultSum / k;\n    }\n}\n```\n\n","slug":"algorithm/子数组最大平均数I","published":1,"updated":"2024-07-29T14:48:58.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202n003atp4l3mb2hj0e","content":"<p>给你一个由 <code>n</code> 个元素组成的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p>\n<p>请你找出平均数最大且 <strong>长度为 <code>k</code></strong> 的连续子数组，并输出该最大平均数。</p>\n<p>任何误差小于 <code>10-5</code> 的答案都将被视为正确答案。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1,12,-5,-6,50,3], k &#x3D; 4\n输出：12.75\n解释：最大平均数 (12-5-6+50)&#x2F;4 &#x3D; 51&#x2F;4 &#x3D; 12.75<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [5], k &#x3D; 1\n输出：5.00000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == nums.length</code></li>\n<li><code>1 &lt;= k &lt;= n &lt;= 10^5</code></li>\n<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">findMaxAverage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> resultSum <span class=\"token operator\">=</span> sum <span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到前k个数的总和</span>\n        \n        <span class=\"token comment\">//然后依次向后循环.</span>\n\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            resultSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span>resultSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">*</span> resultSum <span class=\"token operator\">/</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个由 <code>n</code> 个元素组成的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p>\n<p>请你找出平均数最大且 <strong>长度为 <code>k</code></strong> 的连续子数组，并输出该最大平均数。</p>\n<p>任何误差小于 <code>10-5</code> 的答案都将被视为正确答案。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1,12,-5,-6,50,3], k &#x3D; 4\n输出：12.75\n解释：最大平均数 (12-5-6+50)&#x2F;4 &#x3D; 51&#x2F;4 &#x3D; 12.75<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [5], k &#x3D; 1\n输出：5.00000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == nums.length</code></li>\n<li><code>1 &lt;= k &lt;= n &lt;= 10^5</code></li>\n<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">findMaxAverage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> resultSum <span class=\"token operator\">=</span> sum <span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//得到前k个数的总和</span>\n        \n        <span class=\"token comment\">//然后依次向后循环.</span>\n\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            resultSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span>resultSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">*</span> resultSum <span class=\"token operator\">/</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"1984. 学生分数的最小差值","date":"2024-07-29T14:23:53.000Z","_content":"\n给你一个 **下标从 0 开始** 的整数数组 `nums` ，其中 `nums[i]` 表示第 `i` 名学生的分数。另给你一个整数 `k` 。\n\n从数组中选出任意 `k` 名学生的分数，使这 `k` 个分数间 **最高分** 和 **最低分** 的 **差值** 达到 **最小化** 。\n\n返回可能的 **最小差值** 。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [90], k = 1\n输出：0\n解释：选出 1 名学生的分数，仅有 1 种方法：\n- [90] 最高分和最低分之间的差值是 90 - 90 = 0\n可能的最小差值是 0\n```\n\n**示例 2：**\n\n```\n输入：nums = [9,4,1,7], k = 2\n输出：2\n解释：选出 2 名学生的分数，有 6 种方法：\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 4 = 5\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 1 = 8\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 7 = 2\n- [9,4,1,7] 最高分和最低分之间的差值是 4 - 1 = 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 4 = 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 1 = 6\n可能的最小差值是 2\n```\n\n \n\n**提示：**\n\n- `1 <= k <= nums.length <= 1000`\n- `0 <= nums[i] <= 105`\n\n```java\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        //排序\n        Arrays.sort(nums);\n\n        //\n        int length = nums.length;\n        int result = Integer.MAX_VALUE;\n        for(int i= 0 ; i < length; i++){\n            if(i+k-1 >=length){\n                break;\n            }\n            result = Math.min(nums[i+k-1] - nums[i],result);\n        }\n\n        return result;\n\n    }\n}\n```\n\n","source":"_posts/algorithm/学生分数的最小差值.md","raw":"---\ntitle: 1984. 学生分数的最小差值\ndate: 2024-07-29 22:23:53\ncategories:\n  - 算法\ntags:\n  - 算法\n  - 定长滑动窗口专题\n---\n\n给你一个 **下标从 0 开始** 的整数数组 `nums` ，其中 `nums[i]` 表示第 `i` 名学生的分数。另给你一个整数 `k` 。\n\n从数组中选出任意 `k` 名学生的分数，使这 `k` 个分数间 **最高分** 和 **最低分** 的 **差值** 达到 **最小化** 。\n\n返回可能的 **最小差值** 。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [90], k = 1\n输出：0\n解释：选出 1 名学生的分数，仅有 1 种方法：\n- [90] 最高分和最低分之间的差值是 90 - 90 = 0\n可能的最小差值是 0\n```\n\n**示例 2：**\n\n```\n输入：nums = [9,4,1,7], k = 2\n输出：2\n解释：选出 2 名学生的分数，有 6 种方法：\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 4 = 5\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 1 = 8\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 7 = 2\n- [9,4,1,7] 最高分和最低分之间的差值是 4 - 1 = 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 4 = 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 1 = 6\n可能的最小差值是 2\n```\n\n \n\n**提示：**\n\n- `1 <= k <= nums.length <= 1000`\n- `0 <= nums[i] <= 105`\n\n```java\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        //排序\n        Arrays.sort(nums);\n\n        //\n        int length = nums.length;\n        int result = Integer.MAX_VALUE;\n        for(int i= 0 ; i < length; i++){\n            if(i+k-1 >=length){\n                break;\n            }\n            result = Math.min(nums[i+k-1] - nums[i],result);\n        }\n\n        return result;\n\n    }\n}\n```\n\n","slug":"algorithm/学生分数的最小差值","published":1,"updated":"2024-07-29T14:30:13.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202n003dtp4l24210tfl","content":"<p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 表示第 <code>i</code> 名学生的分数。另给你一个整数 <code>k</code> 。</p>\n<p>从数组中选出任意 <code>k</code> 名学生的分数，使这 <code>k</code> 个分数间 <strong>最高分</strong> 和 <strong>最低分</strong> 的 <strong>差值</strong> 达到 <strong>最小化</strong> 。</p>\n<p>返回可能的 <strong>最小差值</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [90], k &#x3D; 1\n输出：0\n解释：选出 1 名学生的分数，仅有 1 种方法：\n- [90] 最高分和最低分之间的差值是 90 - 90 &#x3D; 0\n可能的最小差值是 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [9,4,1,7], k &#x3D; 2\n输出：2\n解释：选出 2 名学生的分数，有 6 种方法：\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 4 &#x3D; 5\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 1 &#x3D; 8\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 7 &#x3D; 2\n- [9,4,1,7] 最高分和最低分之间的差值是 4 - 1 &#x3D; 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 4 &#x3D; 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 1 &#x3D; 6\n可能的最小差值是 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= k &lt;= nums.length &lt;= 1000</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minimumDifference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 表示第 <code>i</code> 名学生的分数。另给你一个整数 <code>k</code> 。</p>\n<p>从数组中选出任意 <code>k</code> 名学生的分数，使这 <code>k</code> 个分数间 <strong>最高分</strong> 和 <strong>最低分</strong> 的 <strong>差值</strong> 达到 <strong>最小化</strong> 。</p>\n<p>返回可能的 <strong>最小差值</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [90], k &#x3D; 1\n输出：0\n解释：选出 1 名学生的分数，仅有 1 种方法：\n- [90] 最高分和最低分之间的差值是 90 - 90 &#x3D; 0\n可能的最小差值是 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [9,4,1,7], k &#x3D; 2\n输出：2\n解释：选出 2 名学生的分数，有 6 种方法：\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 4 &#x3D; 5\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 1 &#x3D; 8\n- [9,4,1,7] 最高分和最低分之间的差值是 9 - 7 &#x3D; 2\n- [9,4,1,7] 最高分和最低分之间的差值是 4 - 1 &#x3D; 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 4 &#x3D; 3\n- [9,4,1,7] 最高分和最低分之间的差值是 7 - 1 &#x3D; 6\n可能的最小差值是 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= k &lt;= nums.length &lt;= 1000</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minimumDifference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">>=</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"2269. 找到一个数字的 K 美丽值","date":"2024-07-20T07:36:03.000Z","_content":"\n一个整数 `num` 的 **k** 美丽值定义为 `num` 中符合以下条件的 **子字符串** 数目：\n\n- 子字符串长度为 `k` 。\n- 子字符串能整除 `num` 。\n\n给你整数 `num` 和 `k` ，请你返回 `num` 的 k 美丽值。\n\n注意：\n\n- 允许有 **前缀** **0** 。\n- `0` 不能整除任何值。\n\n一个 **子字符串** 是一个字符串里的连续一段字符序列。\n\n \n\n**示例 1：**\n\n```\n输入：num = 240, k = 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- \"240\" 中的 \"24\" ：24 能整除 240 。\n- \"240\" 中的 \"40\" ：40 能整除 240 。\n所以，k 美丽值为 2 。\n```\n\n**示例 2：**\n\n```\n输入：num = 430043, k = 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- \"430043\" 中的 \"43\" ：43 能整除 430043 。\n- \"430043\" 中的 \"30\" ：30 不能整除 430043 。\n- \"430043\" 中的 \"00\" ：0 不能整除 430043 。\n- \"430043\" 中的 \"04\" ：4 不能整除 430043 。\n- \"430043\" 中的 \"43\" ：43 能整除 430043 。\n所以，k 美丽值为 2 。\n```\n\n \n\n**提示：**\n\n- `1 <= num <= 109`\n- `1 <= k <= num.length` （将 `num` 视为字符串）\n\n解法1：暴力破解：\n\n```java\nclass Solution {\n    public int divisorSubstrings(int num, int k) {\n        char[] array = String.valueOf(num).toCharArray();\n        int result = 0;\n        for (int i = 0; i < array.length; i++) {\n            if (i + k <= array.length) {\n                // 判断是否可以整除\n                int kSub = getShortK(array, i, i + k - 1);\n                System.out.println(\"kSub = \" + kSub);\n                if (kSub != 0 && num % kSub == 0) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    }\n\n    private int getShortK(char[] array, int start, int end) {\n        StringBuilder builder = new StringBuilder();\n        for (int i = start; i <= end; i++) {\n            builder.append(array[i]);\n        }\n        return Integer.valueOf(builder.toString());\n    }\n}\n```\n\n\n\n其他人：\n\n```java\nclass Solution {\n    public int divisorSubstrings(int num, int k) {\n        String value = String.valueOf(num);\n        \n        int left = 0; //左侧索引\n\n        int right = k-1; //右侧索引\n\n        int temp = 0; // 被整除的值\n\n        int result = 0; // 美丽值结果\n\n        while(right < value.length()){\n            for(int i = left;i< right+1; i++){\n                int t = value.charAt(i) - '0';\n                temp += t * Math.pow(10,right-i);\n            }\n            if(temp != 0 && num % temp == 0){\n                result++;\n            }\n            //被整除的值归0\n            temp = 0;\n            //指针同时移动\n            right++;\n            left++;\n        }\n        return result;\n    }\n\n    \n}\n```\n\n","source":"_posts/algorithm/找到一个数字的 K 美丽值.md","raw":"---\ntitle: 2269. 找到一个数字的 K 美丽值\ndate: 2024-07-20 15:36:03\ncategories:\n  - 算法\ntags:\n  - 算法\n  - 定长滑动窗口专题\n---\n\n一个整数 `num` 的 **k** 美丽值定义为 `num` 中符合以下条件的 **子字符串** 数目：\n\n- 子字符串长度为 `k` 。\n- 子字符串能整除 `num` 。\n\n给你整数 `num` 和 `k` ，请你返回 `num` 的 k 美丽值。\n\n注意：\n\n- 允许有 **前缀** **0** 。\n- `0` 不能整除任何值。\n\n一个 **子字符串** 是一个字符串里的连续一段字符序列。\n\n \n\n**示例 1：**\n\n```\n输入：num = 240, k = 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- \"240\" 中的 \"24\" ：24 能整除 240 。\n- \"240\" 中的 \"40\" ：40 能整除 240 。\n所以，k 美丽值为 2 。\n```\n\n**示例 2：**\n\n```\n输入：num = 430043, k = 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- \"430043\" 中的 \"43\" ：43 能整除 430043 。\n- \"430043\" 中的 \"30\" ：30 不能整除 430043 。\n- \"430043\" 中的 \"00\" ：0 不能整除 430043 。\n- \"430043\" 中的 \"04\" ：4 不能整除 430043 。\n- \"430043\" 中的 \"43\" ：43 能整除 430043 。\n所以，k 美丽值为 2 。\n```\n\n \n\n**提示：**\n\n- `1 <= num <= 109`\n- `1 <= k <= num.length` （将 `num` 视为字符串）\n\n解法1：暴力破解：\n\n```java\nclass Solution {\n    public int divisorSubstrings(int num, int k) {\n        char[] array = String.valueOf(num).toCharArray();\n        int result = 0;\n        for (int i = 0; i < array.length; i++) {\n            if (i + k <= array.length) {\n                // 判断是否可以整除\n                int kSub = getShortK(array, i, i + k - 1);\n                System.out.println(\"kSub = \" + kSub);\n                if (kSub != 0 && num % kSub == 0) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    }\n\n    private int getShortK(char[] array, int start, int end) {\n        StringBuilder builder = new StringBuilder();\n        for (int i = start; i <= end; i++) {\n            builder.append(array[i]);\n        }\n        return Integer.valueOf(builder.toString());\n    }\n}\n```\n\n\n\n其他人：\n\n```java\nclass Solution {\n    public int divisorSubstrings(int num, int k) {\n        String value = String.valueOf(num);\n        \n        int left = 0; //左侧索引\n\n        int right = k-1; //右侧索引\n\n        int temp = 0; // 被整除的值\n\n        int result = 0; // 美丽值结果\n\n        while(right < value.length()){\n            for(int i = left;i< right+1; i++){\n                int t = value.charAt(i) - '0';\n                temp += t * Math.pow(10,right-i);\n            }\n            if(temp != 0 && num % temp == 0){\n                result++;\n            }\n            //被整除的值归0\n            temp = 0;\n            //指针同时移动\n            right++;\n            left++;\n        }\n        return result;\n    }\n\n    \n}\n```\n\n","slug":"algorithm/找到一个数字的 K 美丽值","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202n003gtp4l4l946ds9","content":"<p>一个整数 <code>num</code> 的 <strong>k</strong> 美丽值定义为 <code>num</code> 中符合以下条件的 <strong>子字符串</strong> 数目：</p>\n<ul>\n<li>子字符串长度为 <code>k</code> 。</li>\n<li>子字符串能整除 <code>num</code> 。</li>\n</ul>\n<p>给你整数 <code>num</code> 和 <code>k</code> ，请你返回 <code>num</code> 的 k 美丽值。</p>\n<p>注意：</p>\n<ul>\n<li>允许有 <strong>前缀</strong> <strong>0</strong> 。</li>\n<li><code>0</code> 不能整除任何值。</li>\n</ul>\n<p>一个 <strong>子字符串</strong> 是一个字符串里的连续一段字符序列。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：num &#x3D; 240, k &#x3D; 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- &quot;240&quot; 中的 &quot;24&quot; ：24 能整除 240 。\n- &quot;240&quot; 中的 &quot;40&quot; ：40 能整除 240 。\n所以，k 美丽值为 2 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：num &#x3D; 430043, k &#x3D; 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- &quot;430043&quot; 中的 &quot;43&quot; ：43 能整除 430043 。\n- &quot;430043&quot; 中的 &quot;30&quot; ：30 不能整除 430043 。\n- &quot;430043&quot; 中的 &quot;00&quot; ：0 不能整除 430043 。\n- &quot;430043&quot; 中的 &quot;04&quot; ：4 不能整除 430043 。\n- &quot;430043&quot; 中的 &quot;43&quot; ：43 能整除 430043 。\n所以，k 美丽值为 2 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= num &lt;= 109</code></li>\n<li><code>1 &lt;= k &lt;= num.length</code> （将 <code>num</code> 视为字符串）</li>\n</ul>\n<p>解法1：暴力破解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divisorSubstrings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> k <span class=\"token operator\">&lt;=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 判断是否可以整除</span>\n                <span class=\"token keyword\">int</span> kSub <span class=\"token operator\">=</span> <span class=\"token function\">getShortK</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kSub = \"</span> <span class=\"token operator\">+</span> kSub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kSub <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">%</span> kSub <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getShortK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>其他人：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divisorSubstrings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左侧索引</span>\n\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右侧索引</span>\n\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 被整除的值</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 美丽值结果</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n                temp <span class=\"token operator\">+=</span> t <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>right<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">%</span> temp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//被整除的值归0</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//指针同时移动</span>\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>一个整数 <code>num</code> 的 <strong>k</strong> 美丽值定义为 <code>num</code> 中符合以下条件的 <strong>子字符串</strong> 数目：</p>\n<ul>\n<li>子字符串长度为 <code>k</code> 。</li>\n<li>子字符串能整除 <code>num</code> 。</li>\n</ul>\n<p>给你整数 <code>num</code> 和 <code>k</code> ，请你返回 <code>num</code> 的 k 美丽值。</p>\n<p>注意：</p>\n<ul>\n<li>允许有 <strong>前缀</strong> <strong>0</strong> 。</li>\n<li><code>0</code> 不能整除任何值。</li>\n</ul>\n<p>一个 <strong>子字符串</strong> 是一个字符串里的连续一段字符序列。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：num &#x3D; 240, k &#x3D; 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- &quot;240&quot; 中的 &quot;24&quot; ：24 能整除 240 。\n- &quot;240&quot; 中的 &quot;40&quot; ：40 能整除 240 。\n所以，k 美丽值为 2 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：num &#x3D; 430043, k &#x3D; 2\n输出：2\n解释：以下是 num 里长度为 k 的子字符串：\n- &quot;430043&quot; 中的 &quot;43&quot; ：43 能整除 430043 。\n- &quot;430043&quot; 中的 &quot;30&quot; ：30 不能整除 430043 。\n- &quot;430043&quot; 中的 &quot;00&quot; ：0 不能整除 430043 。\n- &quot;430043&quot; 中的 &quot;04&quot; ：4 不能整除 430043 。\n- &quot;430043&quot; 中的 &quot;43&quot; ：43 能整除 430043 。\n所以，k 美丽值为 2 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= num &lt;= 109</code></li>\n<li><code>1 &lt;= k &lt;= num.length</code> （将 <code>num</code> 视为字符串）</li>\n</ul>\n<p>解法1：暴力破解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divisorSubstrings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> k <span class=\"token operator\">&lt;=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 判断是否可以整除</span>\n                <span class=\"token keyword\">int</span> kSub <span class=\"token operator\">=</span> <span class=\"token function\">getShortK</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kSub = \"</span> <span class=\"token operator\">+</span> kSub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kSub <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">%</span> kSub <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getShortK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>其他人：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divisorSubstrings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左侧索引</span>\n\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右侧索引</span>\n\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 被整除的值</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 美丽值结果</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n                temp <span class=\"token operator\">+=</span> t <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>right<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">%</span> temp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//被整除的值归0</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//指针同时移动</span>\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"基础架构：一条SQL查询语句是如何执行的","date":"2024-07-15T15:49:49.000Z","_content":"\n![1](img/mysql45/1.png)\n\n一个sql查询语句\n","source":"_posts/mysql45/基础架构：一条SQL查询语句是如何执行的.md","raw":"---\ntitle: 基础架构：一条SQL查询语句是如何执行的\ndate: 2024-07-15 23:49:49\ncategories:\n  - Mysql\ntags:\n  - MqSQL实战45讲\n  - 待完善\n---\n\n![1](img/mysql45/1.png)\n\n一个sql查询语句\n","slug":"mysql45/基础架构：一条SQL查询语句是如何执行的","published":1,"updated":"2024-07-20T15:41:42.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clz76202o003jtp4l99t5e5yh","content":"<p><img src=\"/img/mysql45/1.png\" alt=\"1\"></p>\n<p>一个sql查询语句</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"/img/mysql45/1.png\" alt=\"1\"></p>\n<p>一个sql查询语句</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clz76202c000wtp4lcazog9fc","category_id":"clz76202d0010tp4lem9e9ib1","_id":"clz76202f001atp4l9qi2adbb"},{"post_id":"clz76202m0032tp4lc71na5sk","category_id":"clz76202d0010tp4lem9e9ib1","_id":"clz76202n003btp4l4c057mf5"},{"post_id":"clz76202m0037tp4ldql10dnc","category_id":"clz76202d0010tp4lem9e9ib1","_id":"clz76202n003htp4ldaoe4wwy"},{"post_id":"clz76202n003atp4l3mb2hj0e","category_id":"clz76202d0010tp4lem9e9ib1","_id":"clz76202o003ktp4l0ma58zz2"},{"post_id":"clz76202n003dtp4l24210tfl","category_id":"clz76202d0010tp4lem9e9ib1","_id":"clz76202o003ntp4ldm5r0tj1"},{"post_id":"clz76202n003gtp4l4l946ds9","category_id":"clz76202d0010tp4lem9e9ib1","_id":"clz76202p003qtp4l92je6a9m"},{"post_id":"clz76202o003jtp4l99t5e5yh","category_id":"clz76202p003ptp4l3e3ddbmr","_id":"clz76202p003xtp4l9fdz7bzq"}],"PostTag":[{"post_id":"clz7620210001tp4l7hrb2jzk","tag_id":"clz7620240004tp4l2ouccv3f","_id":"clz762026000ctp4l110desxm"},{"post_id":"clz7620230003tp4l0h30aati","tag_id":"clz762026000btp4l38wt72oc","_id":"clz762029000ltp4l0pxn019k"},{"post_id":"clz7620230003tp4l0h30aati","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202a000ntp4l4pv1bfcs"},{"post_id":"clz762029000ktp4lhlqv21gn","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202a000qtp4l8w8fgd60"},{"post_id":"clz762029000ktp4lhlqv21gn","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202b000stp4l1g576uzi"},{"post_id":"clz762029000ktp4lhlqv21gn","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202c000vtp4l411r29zj"},{"post_id":"clz7620250006tp4l6kkc1z3i","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202d000xtp4l76q6g7fg"},{"post_id":"clz7620250008tp4l7q5v4kua","tag_id":"clz76202a000otp4lg0guaqxp","_id":"clz76202e0015tp4lgq6w0sc6"},{"post_id":"clz7620250008tp4l7q5v4kua","tag_id":"clz76202b000ttp4lhcgo3gxu","_id":"clz76202e0017tp4l18bs2opa"},{"post_id":"clz7620250008tp4l7q5v4kua","tag_id":"clz76202d000ztp4l4jsnfkj0","_id":"clz76202f001btp4lf4hb12rd"},{"post_id":"clz762026000atp4l2cmob9vl","tag_id":"clz76202e0013tp4lgzyu89eb","_id":"clz76202f001dtp4l7cfb1q5o"},{"post_id":"clz762026000etp4lg1r52f5p","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202f001gtp4l0nm1952g"},{"post_id":"clz762026000etp4lg1r52f5p","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202g001itp4l7nbo66x8"},{"post_id":"clz76202f001ctp4l5wts0s1b","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202g001ltp4lhtjnbmq7"},{"post_id":"clz76202f001ctp4l5wts0s1b","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202g001ntp4l8red1j6a"},{"post_id":"clz76202f001ftp4l63kydrmy","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202g001qtp4la8rk4v4c"},{"post_id":"clz76202f001ftp4l63kydrmy","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202h001stp4ld2hr747o"},{"post_id":"clz76202f001htp4lg3fce86a","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202h001vtp4l26g30ajx"},{"post_id":"clz76202f001htp4lg3fce86a","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202h001xtp4lgy8k1zku"},{"post_id":"clz76202f001htp4lg3fce86a","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202i0020tp4lcpqf01cn"},{"post_id":"clz762027000ftp4l94n77run","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202i0022tp4lbbhthj0d"},{"post_id":"clz762027000ftp4l94n77run","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202i0025tp4l3yom9sr9"},{"post_id":"clz76202g001jtp4lap0zafqx","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202i0027tp4l5mub7064"},{"post_id":"clz76202g001jtp4lap0zafqx","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202j002atp4ldimwhi1x"},{"post_id":"clz76202g001jtp4lap0zafqx","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202j002ctp4lgkexa1qs"},{"post_id":"clz762027000htp4l2ux7c59u","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202j002ftp4l9s2n07ig"},{"post_id":"clz762027000htp4l2ux7c59u","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202j002htp4l3cg5d1au"},{"post_id":"clz76202g001otp4lczlscvu1","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202k002jtp4l5ekgagjh"},{"post_id":"clz76202g001otp4lczlscvu1","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202k002mtp4l10ethg8b"},{"post_id":"clz76202g001otp4lczlscvu1","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202k002otp4leult9lid"},{"post_id":"clz76202g001rtp4l4frxantf","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202k002rtp4l8r4bgojq"},{"post_id":"clz76202g001rtp4l4frxantf","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202l002ttp4lcdiogq96"},{"post_id":"clz762028000itp4l9umj8lt2","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202l002wtp4l1lxl6u16"},{"post_id":"clz762028000itp4l9umj8lt2","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202l002ytp4lb1qu02nk"},{"post_id":"clz762028000itp4l9umj8lt2","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202l0031tp4l5o63fxmj"},{"post_id":"clz762029000mtp4lg2e81s1m","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202m0033tp4l6f5n76tv"},{"post_id":"clz762029000mtp4lg2e81s1m","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202m0036tp4l0r1nbvxl"},{"post_id":"clz762029000mtp4lg2e81s1m","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202n0038tp4lanrp3ndf"},{"post_id":"clz76202h001ytp4lb94s62g7","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202n003ctp4l33yw579n"},{"post_id":"clz76202h001ytp4lb94s62g7","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202n003etp4lgpw7gy11"},{"post_id":"clz76202a000ptp4lamjpft8e","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202o003itp4lfzsj9jkt"},{"post_id":"clz76202a000ptp4lamjpft8e","tag_id":"clz76202i001ztp4l8nb4hgxu","_id":"clz76202o003ltp4lge9rhauz"},{"post_id":"clz76202a000ptp4lamjpft8e","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202p003otp4l878d5vj9"},{"post_id":"clz76202i0026tp4l4uak08v4","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202p003rtp4l9nj332ng"},{"post_id":"clz76202i0026tp4l4uak08v4","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202p003ttp4lelhn5ogs"},{"post_id":"clz76202a000rtp4l29hmgrn3","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202p003utp4le7m57bx9"},{"post_id":"clz76202a000rtp4l29hmgrn3","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202p003wtp4la5ll9xve"},{"post_id":"clz76202a000rtp4l29hmgrn3","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202p003ytp4lakh1edlc"},{"post_id":"clz76202i0028tp4l8usge9g9","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202p0040tp4l0kv10f3j"},{"post_id":"clz76202i0028tp4l8usge9g9","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202p0041tp4ldx9lgfbg"},{"post_id":"clz76202i0028tp4l8usge9g9","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202p0042tp4l0uxxbmo2"},{"post_id":"clz76202j002btp4ldy6fawdj","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202p0044tp4ldapv7ycs"},{"post_id":"clz76202j002btp4ldy6fawdj","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202p0045tp4lgcyb4gbi"},{"post_id":"clz76202j002btp4ldy6fawdj","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202p0047tp4ldb48865k"},{"post_id":"clz76202b000utp4lch86cz3g","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202p0048tp4lcukf4g9b"},{"post_id":"clz76202b000utp4lch86cz3g","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202p004atp4l57ohcrky"},{"post_id":"clz76202b000utp4lch86cz3g","tag_id":"clz76202j0029tp4l3as40d6b","_id":"clz76202p004btp4l1qpgb8e8"},{"post_id":"clz76202j002dtp4l18b721yf","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202p004dtp4lfpyb7mfb"},{"post_id":"clz76202j002dtp4l18b721yf","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202p004etp4l6e935dl0"},{"post_id":"clz76202j002gtp4lbsfmeaus","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202q004gtp4lh0px8rws"},{"post_id":"clz76202j002gtp4lbsfmeaus","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202q004htp4l1hff8235"},{"post_id":"clz76202j002gtp4lbsfmeaus","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202q004jtp4l276s5yml"},{"post_id":"clz76202c000wtp4lcazog9fc","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202q004ktp4lfkebecm9"},{"post_id":"clz76202c000wtp4lcazog9fc","tag_id":"clz76202j002etp4ld6dm3w3f","_id":"clz76202q004mtp4l6lu89e7w"},{"post_id":"clz76202c000wtp4lcazog9fc","tag_id":"clz76202i001ztp4l8nb4hgxu","_id":"clz76202q004ntp4l38redjyu"},{"post_id":"clz76202d000ytp4l43ancyjc","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202q004otp4lcqne461p"},{"post_id":"clz76202d000ytp4l43ancyjc","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202q004qtp4ld0bi8l2t"},{"post_id":"clz76202d000ytp4l43ancyjc","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202q004rtp4la3ftesw2"},{"post_id":"clz76202k002stp4laz138r67","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202q004ttp4lg87k8bew"},{"post_id":"clz76202d0011tp4lcsd734dm","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202q004utp4l579q95ge"},{"post_id":"clz76202d0011tp4lcsd734dm","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202q004wtp4l5p2x8r6x"},{"post_id":"clz76202d0011tp4lcsd734dm","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202q004xtp4l1x8odm8u"},{"post_id":"clz76202e0012tp4l8tog7tje","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202q004ztp4ler26fkdo"},{"post_id":"clz76202e0012tp4l8tog7tje","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202q0050tp4l7pt33qzf"},{"post_id":"clz76202e0012tp4l8tog7tje","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202q0052tp4lhvgd29q7"},{"post_id":"clz76202e0014tp4l9k3z6ftp","tag_id":"clz76202e0018tp4l1bzd649y","_id":"clz76202q0053tp4lh92u34m7"},{"post_id":"clz76202e0014tp4l9k3z6ftp","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202q0055tp4lc4eoh3pc"},{"post_id":"clz76202e0014tp4l9k3z6ftp","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202r0056tp4l7lom6m9r"},{"post_id":"clz76202e0016tp4l4vc37t7y","tag_id":"clz76202f001etp4l4gh05ijs","_id":"clz76202r0058tp4lfuu13z25"},{"post_id":"clz76202e0016tp4l4vc37t7y","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202r0059tp4lbxuffbqk"},{"post_id":"clz76202e0016tp4l4vc37t7y","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202r005btp4l916k2qk9"},{"post_id":"clz76202f0019tp4lcnushhlz","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202r005ctp4l7qrt5exs"},{"post_id":"clz76202f0019tp4lcnushhlz","tag_id":"clz76202i001ztp4l8nb4hgxu","_id":"clz76202r005etp4lgycp47m8"},{"post_id":"clz76202f0019tp4lcnushhlz","tag_id":"clz76202o003mtp4lenm71gj9","_id":"clz76202s005ftp4l4tsu2mdo"},{"post_id":"clz76202f0019tp4lcnushhlz","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202s005gtp4l4c9pdoea"},{"post_id":"clz76202g001mtp4l7fl5actk","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s005itp4l4xy03saa"},{"post_id":"clz76202g001mtp4l7fl5actk","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202s005jtp4l2hh02ycv"},{"post_id":"clz76202g001mtp4l7fl5actk","tag_id":"clz76202p003stp4l01izhx0a","_id":"clz76202s005ktp4l4wra6j5q"},{"post_id":"clz76202h001ttp4l0zzfeh51","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s005ltp4ldn5w3vif"},{"post_id":"clz76202h001ttp4l0zzfeh51","tag_id":"clz76202p003vtp4lbp6m5r3g","_id":"clz76202s005mtp4lfpm6h6nu"},{"post_id":"clz76202h001ttp4l0zzfeh51","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202s005ntp4ldxyfe9sq"},{"post_id":"clz76202h001wtp4l4de42kn6","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s005otp4latpq38lp"},{"post_id":"clz76202h001wtp4l4de42kn6","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202s005ptp4lh8g80c7c"},{"post_id":"clz76202h001wtp4l4de42kn6","tag_id":"clz76202p003ztp4l9cheddhm","_id":"clz76202s005qtp4lhd1xb2q5"},{"post_id":"clz76202i0021tp4lharx0es9","tag_id":"clz76202p0043tp4lalr9eawz","_id":"clz76202s005rtp4lddy1bm16"},{"post_id":"clz76202i0021tp4lharx0es9","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s005stp4l2z99gyv1"},{"post_id":"clz76202i0021tp4lharx0es9","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202s005ttp4l0614ai0s"},{"post_id":"clz76202i0023tp4lh7t0589v","tag_id":"clz76202p0043tp4lalr9eawz","_id":"clz76202s005utp4l00jn69du"},{"post_id":"clz76202i0023tp4lh7t0589v","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s005vtp4le7be4dhb"},{"post_id":"clz76202i0023tp4lh7t0589v","tag_id":"clz762027000gtp4l09gxfu7y","_id":"clz76202s005wtp4l4oi52ehv"},{"post_id":"clz76202j002itp4lfs53dcxl","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s005xtp4l9vu75n7k"},{"post_id":"clz76202j002itp4lfs53dcxl","tag_id":"clz76202o003mtp4lenm71gj9","_id":"clz76202s005ytp4l3owy8032"},{"post_id":"clz76202k002ltp4l5xomcsg9","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s005ztp4l1omhb4n1"},{"post_id":"clz76202k002ltp4l5xomcsg9","tag_id":"clz76202o003mtp4lenm71gj9","_id":"clz76202s0060tp4la3ldcdtr"},{"post_id":"clz76202k002ntp4lhh4fhblm","tag_id":"clz76202p004ftp4ldno42l5f","_id":"clz76202s0061tp4lcw0q9i6l"},{"post_id":"clz76202k002qtp4lg5iy2aoj","tag_id":"clz76202q004itp4lcbed7qzy","_id":"clz76202s0062tp4lfhxadd4u"},{"post_id":"clz76202k002qtp4lg5iy2aoj","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s0063tp4l01hnehcr"},{"post_id":"clz76202l002vtp4l35kcbk29","tag_id":"clz76202q004ltp4l78ts2ml9","_id":"clz76202s0064tp4lb0nagevc"},{"post_id":"clz76202l002xtp4l87gn7ye5","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s0065tp4lhhl17xsp"},{"post_id":"clz76202l002xtp4l87gn7ye5","tag_id":"clz76202q004ptp4l1zb4hv3l","_id":"clz76202s0066tp4l3zulg4ul"},{"post_id":"clz76202l0030tp4l80y35pkg","tag_id":"clz76202q004ptp4l1zb4hv3l","_id":"clz76202s0067tp4l3axihl5n"},{"post_id":"clz76202l0030tp4l80y35pkg","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s0068tp4l13024pcy"},{"post_id":"clz76202m0032tp4lc71na5sk","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s0069tp4lar0j3o2j"},{"post_id":"clz76202m0032tp4lc71na5sk","tag_id":"clz76202q004vtp4le9jlg8mv","_id":"clz76202s006atp4lbul3b4pb"},{"post_id":"clz76202m0035tp4lemdaeva1","tag_id":"clz76202q004ytp4lgcfogxey","_id":"clz76202s006btp4l6nh7aby1"},{"post_id":"clz76202m0037tp4ldql10dnc","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s006ctp4ldev3g996"},{"post_id":"clz76202m0037tp4ldql10dnc","tag_id":"clz76202q004vtp4le9jlg8mv","_id":"clz76202s006dtp4lhkdha6v4"},{"post_id":"clz76202n003atp4l3mb2hj0e","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s006etp4lcsvk95vs"},{"post_id":"clz76202n003atp4l3mb2hj0e","tag_id":"clz76202q004vtp4le9jlg8mv","_id":"clz76202s006ftp4l556u5j9u"},{"post_id":"clz76202n003dtp4l24210tfl","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s006gtp4l6wtk5nfm"},{"post_id":"clz76202n003dtp4l24210tfl","tag_id":"clz76202q004vtp4le9jlg8mv","_id":"clz76202s006htp4l70kv9nwq"},{"post_id":"clz76202n003gtp4l4l946ds9","tag_id":"clz762026000btp4l38wt72oc","_id":"clz76202s006itp4l9dyect2n"},{"post_id":"clz76202n003gtp4l4l946ds9","tag_id":"clz76202q004vtp4le9jlg8mv","_id":"clz76202s006jtp4l4mmj0fnv"},{"post_id":"clz76202o003jtp4l99t5e5yh","tag_id":"clz76202r005dtp4l4d8yepjs","_id":"clz76202s006ktp4l5apuflbp"},{"post_id":"clz76202o003jtp4l99t5e5yh","tag_id":"clz76202s005htp4lasxq9y23","_id":"clz76202s006ltp4lhr5hcdon"}],"Tag":[{"name":"出行","_id":"clz7620240004tp4l2ouccv3f"},{"name":"算法","_id":"clz762026000btp4l38wt72oc"},{"name":"力扣热题100题","_id":"clz762027000gtp4l09gxfu7y"},{"name":"JVM","_id":"clz76202a000otp4lg0guaqxp"},{"name":"java","_id":"clz76202b000ttp4lhcgo3gxu"},{"name":"集合","_id":"clz76202d000ztp4l4jsnfkj0"},{"name":"MYSQL","_id":"clz76202e0013tp4lgzyu89eb"},{"name":"二叉树","_id":"clz76202e0018tp4l1bzd649y"},{"name":"链表","_id":"clz76202f001etp4l4gh05ijs"},{"name":"数组","_id":"clz76202i001ztp4l8nb4hgxu"},{"name":"动态规划","_id":"clz76202j0029tp4l3as40d6b"},{"name":"哈希表","_id":"clz76202j002etp4ld6dm3w3f"},{"name":"异或与","_id":"clz76202o003mtp4lenm71gj9"},{"name":"哈希","_id":"clz76202p003stp4l01izhx0a"},{"name":"滑动窗口算法","_id":"clz76202p003vtp4lbp6m5r3g"},{"name":"待回顾","_id":"clz76202p003ztp4l9cheddhm"},{"name":"二进制","_id":"clz76202p0043tp4lalr9eawz"},{"name":"备战","_id":"clz76202p004ftp4ldno42l5f"},{"name":"复杂度分析","_id":"clz76202q004itp4lcbed7qzy"},{"name":"linux","_id":"clz76202q004ltp4l78ts2ml9"},{"name":"滑动窗口","_id":"clz76202q004ptp4l1zb4hv3l"},{"name":"定长滑动窗口专题","_id":"clz76202q004vtp4le9jlg8mv"},{"name":"架构","_id":"clz76202q004ytp4lgcfogxey"},{"name":"MqSQL实战45讲","_id":"clz76202r005dtp4l4d8yepjs"},{"name":"待完善","_id":"clz76202s005htp4lasxq9y23"}]}}