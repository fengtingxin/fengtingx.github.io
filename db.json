{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/img/img.png","path":"img/img.png","modified":1,"renderable":0},{"_id":"source/img/img_1.png","path":"img/img_1.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"61e1d3e20b37743a509d1310ab406b9707802591","modified":1675957585154},{"_id":"source/404/index.md","hash":"28ec4cfd1cbdb46f6bd57d30d185199d9d5ce2b5","modified":1675957585154},{"_id":"source/about/index.md","hash":"beb5fd2a3b48c519880d1eb8615e2c7411c82b33","modified":1675957585158},{"_id":"source/_posts/力扣刷题列表.md","hash":"17852eaf4f4fa1876286136d9048a8036006c84b","modified":1676381870720},{"_id":"source/_posts/617-合并二叉树.md","hash":"1db3dc8cffb7912a2e0a4f9a0ea6b32eb0b046de","modified":1675957585154},{"_id":"source/_posts/MySQL数据类型.md","hash":"d6b129140553c579a966693a49e5368dfa318589","modified":1675957585154},{"_id":"source/_posts/二叉树的基本知识.md","hash":"aa81937cb3d6d5c3f8277dc42d12559af35ac66c","modified":1675957585155},{"_id":"source/_posts/力扣热题100题-两数之和.md","hash":"e3adead2d222f849985b396f5c6bfe11924cc099","modified":1675957585155},{"_id":"source/_posts/力扣热题100题-二叉树的直径.md","hash":"ebba10e8d7d03ae2ae782f4f6262f2a8db32b663","modified":1675957585156},{"_id":"source/_posts/力扣热题100题-找到所有数组中消失的数字.md","hash":"b3466e710904201f7331d2c034cb549a419d259f","modified":1675957585156},{"_id":"source/_posts/力扣热题100题-最大子数组和.md","hash":"b2d0e444e7b4cd24796c938f27e2ef39a645eeb9","modified":1675957585156},{"_id":"source/_posts/力扣热题100题-比特位计数.md","hash":"e85e6dedb1c8566515da556a26655bb4c07a8dc3","modified":1675957585156},{"_id":"source/_posts/力扣热题100题-合并两个有序链表.md","hash":"a6c32353e9f7e9d8913cb2fa0510b2eddbd7a528","modified":1675957585156},{"_id":"source/_posts/力扣热题100题-有效的括号.md","hash":"5e8ca908b3d5198075834172d55ddd051a59a686","modified":1675957585156},{"_id":"source/_posts/力扣热题100题-汉明距离.md","hash":"688b0e66809f4a0f53c1e0ada7e1cc75112dc069","modified":1675957585157},{"_id":"source/_posts/力扣热题100题-移动零.md","hash":"188412d5a71da28db065c8d3546a1a5c7ef8954d","modified":1676472823205},{"_id":"source/_posts/力扣热题100题-爬楼梯.md","hash":"6ff669220534fd12002e9ac22860b3a19ed1db08","modified":1675957585157},{"_id":"source/_posts/复杂度分析.md","hash":"d6493f8437575f2a2cd98796c5090068e28267d5","modified":1675957585157},{"_id":"source/_data/friends.json","hash":"fce5abe04ec0c6000141313cd687cf8c210a934a","modified":1675957585154},{"_id":"source/_posts/常用linux命令.md","hash":"041ca878555edf313cdac8c77d7db455ddc0a55d","modified":1675957585157},{"_id":"source/categories/index.md","hash":"cadaf3e4648daf7facaf4fd85a9b578479258c90","modified":1675957585158},{"_id":"source/_posts/架构知识.md","hash":"1fcc256fe6fae694dbd8187a5b5a37a5a73c685f","modified":1675957585157},{"_id":"source/contact/index.md","hash":"80571e2313dd2a8d2bbd942a0a252c5339a93bf4","modified":1675957585158},{"_id":"source/friends/index.md","hash":"a7404832b58a5fdda809ea9219ddf159500e8b3c","modified":1675957585158},{"_id":"source/img/img.png","hash":"46ac5f3fbcd3b79a09f3ee038ff5e3554bee3c26","modified":1675957585158},{"_id":"source/tags/index.md","hash":"6674724882c57eb82f4593979457b83748a431cc","modified":1675957585158},{"_id":"source/img/img_1.png","hash":"81fc212f998c199c79f1e1275e64a273a7b05c1a","modified":1675957585158},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1675957585158},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"45d95b12690fdf4aabe5c471ef9f84109bdaf7bd","modified":1675957585159},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1675957585158},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1675957585158},{"_id":"themes/hexo-theme-matery/README.md","hash":"d64f79581eaf7b2ce8205209de8b01311db41832","modified":1675957585159},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1675957585163},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"ef3556d7fff08d825c8568b340710c452e884325","modified":1675957585159},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"c1a4f1ae1cd515e305031091be53b0f6087852f3","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"1ec09c3f99f3254fcf101c570f397f6720b7155b","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"8e70ef228d017b007cabce66e6bc39487037b94e","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"aae2bac175b0dc44717e1e7d27123ecf9a27b832","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"eb2f510fcb4201c2198326adc897c448d2ae8980","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1675957585164},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"922b32d758d5cdf8fbed9e67a197be0075706d3c","modified":1675957585164},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1675957585159},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1675957585164},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"50fd98a37f4b84bef7d8252737be892d233b0fd4","modified":1675957585165},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"5b75b057c8d445fc9457cc7255b6e288cf8bd4da","modified":1675957585159},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1675957585159},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1675957585164},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1675957585159},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"4765267aafe2871a2fdaeccd1598890219bd7d71","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"4fcfa5a9ac32382453be9c97e448c60463ec66d3","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"bf8caf85f3f03167f2cf431f4b04195f83de8d05","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"1984987a97b6e096860572e14a139d5dc1c54979","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1675957585160},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"c1e1800c3af752fca1eb4ed7a76f672b448b5ffa","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"d32b8533e88782d9dc12992a1189c7d7e4489825","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"ff8b299df312416ae03d6969b44bdc1394a68717","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1675957585161},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"976270ee3cdb6c2416ac28ead1bd5e0f6f8f7ece","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1675957585162},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1675957585163},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1675957585163},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1675957585165},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"f37ae96fe2995cd351631e4b46d956e53418674d","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1675957585165},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1675957585166},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1675957585165},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1675957585166},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1675957585166},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1675957585166},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1675957585201},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1675957585204},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1675957585210},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"7b06fe5dc7b9223df9fae0c20fc31d754eea670c","modified":1675957585213},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1675957585204},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1675957585204},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1675957585204},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1675957585204},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1675957585205},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1675957585206},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1675957585207},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1675957585207},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1675957585208},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1675957585208},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1675957585209},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1675957585208},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1675957585209},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1675957585209},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1675957585210},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1675957585167},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1675957585167},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1675957585210},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1675957585213},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1675957585214},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1675957585167},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1675957585167},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1675957585166},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1675957585167},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1675957585175},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1675957585172},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1675957585177},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1675957585175},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1675957585189},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1675957585193},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1675957585193},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1675957585193},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1675957585193},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1675957585193},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1675957585194},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1675957585194},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1675957585193},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1675957585196},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1675957585194},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1675957585194},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1675957585197},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1675957585199},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1675957585197},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1675957585199},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1675957585194},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1675957585169},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1675957585169},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1675957585171},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1675957585196},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1675957585196},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1675957585197},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1675957585179},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1675957585196},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1675957585197},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1675957585197},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1675957585197},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1675957585201},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1675957585203},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1675957585205},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1675957585202},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1675957585206},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1675957585205},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1675957585207},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1675957585206},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1675957585206},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1675957585207},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1675957585207},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1675957585208},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1675957585209},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1675957585210},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1675957585210},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1675957585175},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1675957585177},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1675957585178},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1675957585168},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1675957585167},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1675957585169},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1675957585170},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1675957585166},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1675957585205},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1675957585202},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1675957585204},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1675957585204},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1675957585212},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1675957585172},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1675957585180},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1675957585180},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1675957585201},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1675957585199},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1675957585169},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1675957585200},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1675957585203},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1675957585213},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1675957585170},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1675957585199},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1675957585212},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1675957585196},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1675957585175},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1675957585177},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1675957585193},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1675957585189},{"_id":"public/404/index.html","hash":"4fb3911098a957abd8ae5197ee8dd6d61e722cbe","modified":1676472864224},{"_id":"public/categories/index.html","hash":"91e63c5bae5eb6cea822c7612cdee283917b308a","modified":1676472864224},{"_id":"public/contact/index.html","hash":"7e535e6b461d15e6e66ae9a584333699b9d6ae00","modified":1676472864224},{"_id":"public/about/index.html","hash":"ce72cdd4186e34a2d25cea9ddd4704cc25897c92","modified":1676472864224},{"_id":"public/friends/index.html","hash":"cf48469153d8c7608cbb9b3aa3fedbec853f988b","modified":1676472864224},{"_id":"public/tags/index.html","hash":"fbbab5ba64192fad404943c0ca4e766e1c55e454","modified":1676472864224},{"_id":"public/2023/02/09/力扣热题100题-移动零/index.html","hash":"2dfbe77dc2bf5845de38ae36e6ff61d349439602","modified":1676472864224},{"_id":"public/2023/01/31/力扣热题100题-找到所有数组中消失的数字/index.html","hash":"3c4478237c566f59b2b9d9db99a59f188f1a379e","modified":1676472864224},{"_id":"public/2023/01/30/力扣热题100题-汉明距离/index.html","hash":"1f5825eaaf014945f7575098d128ce788a782b2c","modified":1676472864224},{"_id":"public/2023/01/28/617-合并二叉树/index.html","hash":"0a1e08b687f6b32a53ad64b9ad33bb4604181458","modified":1676472864224},{"_id":"public/2023/01/28/力扣刷题列表/index.html","hash":"cebc67cd1867ca116a9392e06282227f9fe88ad4","modified":1676472864224},{"_id":"public/2023/01/05/力扣热题100题-比特位计数/index.html","hash":"ffbb6f2a74950ca8ac02fae71e27bb51fe9a8cf7","modified":1676472864224},{"_id":"public/2022/11/14/MySQL数据类型/index.html","hash":"1cf4e39c81f80b14d4accaefe46122cc882cea8e","modified":1676472864224},{"_id":"public/2022/09/24/架构知识/index.html","hash":"3cf0678e5670a1e718b1e1f774456f4dd8774944","modified":1676472864224},{"_id":"public/2022/06/23/力扣热题100题-爬楼梯/index.html","hash":"87646b3cb5aa6554b977abd225f913e267fa3a6c","modified":1676472864224},{"_id":"public/2022/06/18/力扣热题100题-最大子数组和/index.html","hash":"542eca8c698ec3694e99d11dccf3631b178eb478","modified":1676472864224},{"_id":"public/2022/06/18/力扣热题100题-合并两个有序链表/index.html","hash":"c296f09d51d50a0c9d3c868678d0f14579d76868","modified":1676472864224},{"_id":"public/2022/06/18/力扣热题100题-有效的括号/index.html","hash":"4d70c31784aa9eba17c4c2a6a9ee85dabe91d684","modified":1676472864224},{"_id":"public/2022/06/16/复杂度分析/index.html","hash":"d26f8e5c88d6998808084355cee0b29126979c91","modified":1676472864224},{"_id":"public/2022/06/16/力扣热题100题-两数之和/index.html","hash":"4fce4c48c5dde45786aca48486409cafb279f7f8","modified":1676472864224},{"_id":"public/2022/06/12/二叉树的基本知识/index.html","hash":"9dbe6dc4f783b8ea155e3267ad2a31ddd24d83f5","modified":1676472864224},{"_id":"public/2022/06/12/力扣热题100题-二叉树的直径/index.html","hash":"79357c44533b5750877d6e9751912fc59e700f67","modified":1676472864224},{"_id":"public/2022/06/10/常用linux命令/index.html","hash":"3663e4301cb0fcb88453c76cab1a97ee7fc49390","modified":1676472864224},{"_id":"public/archives/index.html","hash":"3dc6e1137559c181f9845e77f76410137155f562","modified":1676472864224},{"_id":"public/archives/page/2/index.html","hash":"2055395a3764e41a917eb44b11fe54ab824516fd","modified":1676472864224},{"_id":"public/archives/2022/index.html","hash":"14d5a887e6ff6d9d3d12a9d96ac9cb7bc3f6f215","modified":1676472864224},{"_id":"public/archives/2022/page/2/index.html","hash":"d06c93606f3722bfe9f325fe7bb0190e9163ea2e","modified":1676472864224},{"_id":"public/archives/2022/06/index.html","hash":"9d0a618dd5bd5e81f62b9f16a716e217ce8855cb","modified":1676472864224},{"_id":"public/archives/2022/09/index.html","hash":"cd8edb73aaaa1c09d0f626fa7fa14d7ca53d9480","modified":1676472864224},{"_id":"public/archives/2022/11/index.html","hash":"1daf6f1986ddc680deef2ec93acbab11a025e6f7","modified":1676472864224},{"_id":"public/archives/2023/index.html","hash":"5ae92d95921c8b2e82f147e0537694e5bd899250","modified":1676472864224},{"_id":"public/archives/2023/01/index.html","hash":"849b6cc2608a25cf674ba2a8082bf3862ce5f00b","modified":1676472864224},{"_id":"public/archives/2023/02/index.html","hash":"0bb0cf4590be3b575be31114a0781c553bd8f14f","modified":1676472864224},{"_id":"public/index.html","hash":"cd9e60222e73021116fa18aad00ab96b9d9ffd6e","modified":1676472864224},{"_id":"public/page/2/index.html","hash":"5e31adc316326c2119a0428f833bd5b28405a8e6","modified":1676472864224},{"_id":"public/tags/算法/index.html","hash":"ddf6262a541b94d898d8fde3a1e53b331c6f5b8e","modified":1676472864224},{"_id":"public/tags/算法/page/2/index.html","hash":"0c05061935c1e2b0f1819047cbcf2474bb6867f8","modified":1676472864224},{"_id":"public/tags/力扣热题100题/page/2/index.html","hash":"760aa8c6e757702687741e4636204203600e9c38","modified":1676472864224},{"_id":"public/tags/力扣热题100题/index.html","hash":"27b0626dc422aff6f1bf59f11d57eaa7033d2842","modified":1676472864224},{"_id":"public/tags/MYSQL/index.html","hash":"b593e32fd2278cc0211238a937cb8e47136222ea","modified":1676472864224},{"_id":"public/tags/二叉树/index.html","hash":"e477d033cfb73cbbaccd2eb0faee98d4e1baae8c","modified":1676472864224},{"_id":"public/tags/数组/index.html","hash":"59ed949ab5f2664fa5830e5c18988a30d8a39504","modified":1676472864224},{"_id":"public/tags/待回顾/index.html","hash":"59d1d652aaaae9ad7b16dcd611177d0c95ab5174","modified":1676472864224},{"_id":"public/tags/二进制/index.html","hash":"bbc59141542172a2a77d0661f9d04f8f51428c16","modified":1676472864224},{"_id":"public/tags/复杂度分析/index.html","hash":"e3dd09d4184c34eeee8b4c7938aeccf8b3327093","modified":1676472864224},{"_id":"public/tags/架构/index.html","hash":"4c80e6481f658e0ac663e77da42684f6a26a15b3","modified":1676472864224},{"_id":"public/tags/linux/index.html","hash":"caf8b5b605622a28f4eef6cdc51f52b9ffabc32f","modified":1676472864224},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1676472864224},{"_id":"public/img/img_1.png","hash":"81fc212f998c199c79f1e1275e64a273a7b05c1a","modified":1676472864224},{"_id":"public/img/img.png","hash":"46ac5f3fbcd3b79a09f3ee038ff5e3554bee3c26","modified":1676472864224},{"_id":"public/favicon.png","hash":"50fd98a37f4b84bef7d8252737be892d233b0fd4","modified":1676472864224},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1676472864224},{"_id":"public/medias/logo.png","hash":"7b06fe5dc7b9223df9fae0c20fc31d754eea670c","modified":1676472864224},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1676472864224},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1676472864224},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1676472864224},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1676472864224},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1676472864224},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1676472864224},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1676472864224},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1676472864224},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1676472864224},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1676472864224},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1676472864224},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1676472864224},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1676472864224},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1676472864224},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1676472864224},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1676472864224},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1676472864224},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1676472864224},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1676472864224},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1676472864224},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1676472864224},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1676472864224},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1676472864224},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1676472864224},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1676472864224},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1676472864224},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1676472864224},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1676472864224},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1676472864224},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1676472864224},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1676472864224},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1676472864224},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1676472864224},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1676472864224},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1676472864224},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1676472864224},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1676472864224},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1676472864224},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1676472864224},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1676472864224},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1676472864224},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1676472864224},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1676472864224},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1676472864224},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1676472864224},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1676472864224},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1676472864224},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1676472864224},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1676472864224},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1676472864224},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1676472864224},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1676472864224},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1676472864224},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1676472864224},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1676472864224},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1676472864224},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1676472864224},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1676472864224},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1676472864224},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1676472864224},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1676472864224},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1676472864224},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1676472864224},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1676472864224},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1676472864224},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1676472864224},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1676472864224},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1676472864224},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1676472864224},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1676472864224},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1676472864224},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1676472864224},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1676472864224},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1676472864224},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1676472864224},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1676472864224},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1676472864224},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1676472864224},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1676472864224},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1676472864224},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1676472864224},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1676472864224},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1676472864224},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1676472864224},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1676472864224},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1676472864224},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1676472864224},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1676472864224},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1676472864224},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1676472864224},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1676472864224},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1676472864224},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1676472864224},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1676472864224},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1676472864224},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1676472864224},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1676472864224},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1676472864224},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1676472864224},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1676472864224},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1676472864224},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1676472864224},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1676472864224},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1676472864224},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1676472864224},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1676472864224},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1676472864224},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1676472864224},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1676472864224},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1676472864224},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1676472864224},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1676472864224},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1676472864224},{"_id":"public/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1676472864224},{"_id":"public/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1676472864224},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1676472864224},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1676472864224},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1676472864224},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1676472864224},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1676472864224},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1676472864224},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1676472864224},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1676472864224},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1676472864224},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1676472864224},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1676472864224},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1676472864224},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1676472864224},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1676472864224},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1676472864224}],"Category":[],"Data":[{"_id":"friends","data":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"about","date":"2022-06-10T03:11:10.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-06-10 11:11:10\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2023-02-09T15:46:25.158Z","path":"about/index.html","comments":1,"_id":"cle5snozt0000s66vhdftf0tu","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"404","date":"2022-06-10T03:16:50.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-06-10 11:16:50\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2023-02-09T15:46:25.154Z","path":"404/index.html","comments":1,"_id":"cle5snozw0002s66vfux1bvtj","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2022-06-10T03:14:29.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-06-10 11:14:29\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2023-02-09T15:46:25.158Z","path":"contact/index.html","comments":1,"_id":"cle5snozy0005s66verf5a6kx","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2022-06-10T03:15:32.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-06-10 11:15:32\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2023-02-09T15:46:25.158Z","path":"friends/index.html","comments":1,"_id":"cle5snozy0007s66vanst4di7","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2022-06-10T03:11:10.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-06-10 11:11:10\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-02-09T15:46:25.158Z","path":"categories/index.html","comments":1,"_id":"cle5snozz0009s66v1sjx2s70","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2022-06-10T03:11:10.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-06-10 11:11:10\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2023-02-09T15:46:25.158Z","path":"tags/index.html","comments":1,"_id":"cle5snp00000cs66v69ow0134","content":"","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"力扣刷题列表","date":"2023-01-28T14:35:53.000Z","_content":"\n| 状态 | 题目                                                         | 简述                |\n| ---- | ------------------------------------------------------------ | ------------------- |\n| done | [617. 合并二叉树](https://leetcode.cn/problems/merge-two-binary-trees/) | 二叉树的深度遍历    |\n| done | [二叉树直径](https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/) | 二叉树的深度遍历    |\n| done | [汉明距离](https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/) | 异或运算            |\n| done | [找到所有数组中消失的数字](https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/) | 数组操作            |\n| done | [比特位计数](https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/) | 二进制(牢记n&(n-1)) |\n|      |                                                              | 指针                |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n\n","source":"_posts/力扣刷题列表.md","raw":"---\ntitle: 力扣刷题列表\ndate: 2023-01-28 22:35:53\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n| 状态 | 题目                                                         | 简述                |\n| ---- | ------------------------------------------------------------ | ------------------- |\n| done | [617. 合并二叉树](https://leetcode.cn/problems/merge-two-binary-trees/) | 二叉树的深度遍历    |\n| done | [二叉树直径](https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/) | 二叉树的深度遍历    |\n| done | [汉明距离](https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/) | 异或运算            |\n| done | [找到所有数组中消失的数字](https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/) | 数组操作            |\n| done | [比特位计数](https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/) | 二进制(牢记n&(n-1)) |\n|      |                                                              | 指针                |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n|      |                                                              |                     |\n\n","slug":"力扣刷题列表","published":1,"updated":"2023-02-14T13:37:50.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snozv0001s66vb2x51713","content":"<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>题目</th>\n<th>简述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>done</td>\n<td><a href=\"https://leetcode.cn/problems/merge-two-binary-trees/\">617. 合并二叉树</a></td>\n<td>二叉树的深度遍历</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/\">二叉树直径</a></td>\n<td>二叉树的深度遍历</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/\">汉明距离</a></td>\n<td>异或运算</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/\">找到所有数组中消失的数字</a></td>\n<td>数组操作</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/\">比特位计数</a></td>\n<td>二进制(牢记n&amp;(n-1))</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>指针</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>题目</th>\n<th>简述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>done</td>\n<td><a href=\"https://leetcode.cn/problems/merge-two-binary-trees/\">617. 合并二叉树</a></td>\n<td>二叉树的深度遍历</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2022/06/12/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/\">二叉树直径</a></td>\n<td>二叉树的深度遍历</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/30/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/\">汉明距离</a></td>\n<td>异或运算</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/31/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/\">找到所有数组中消失的数字</a></td>\n<td>数组操作</td>\n</tr>\n<tr>\n<td>done</td>\n<td><a href=\"https://fengtingxin.github.io/2023/01/05/%E5%8A%9B%E6%89%A3%E7%83%AD%E9%A2%98100%E9%A2%98-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/\">比特位计数</a></td>\n<td>二进制(牢记n&amp;(n-1))</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>指针</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"力扣热题100题-合并二叉树","date":"2023-01-28T14:57:59.000Z","_content":"\n给你两棵二叉树： root1 和 root2 。\n\n想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。\n\n返回合并后的二叉树。\n\n注意: 合并过程必须从两个树的根节点开始。\n\n示例 1：\n\n![image-20230128225905397](/Users/tangwenru/Library/Application Support/typora-user-images/image-20230128225905397.png)输入：root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n输出：[3,4,5,5,4,null,7]\n示例 2：\n\n输入：root1 = [1], root2 = [1,2]\n输出：[2,2]\n\n\n提示：\n\n两棵树中的节点数目在范围 [0, 2000] 内\n-104 <= Node.val <= 104\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/merge-two-binary-trees\n\n\n\n思路：\n\n同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if(root1 == null){\n            return root2;\n        }\n        if(root2 == null){\n            return root1;\n        }\n        root1.val += root2.val;\n        root1.left = mergeTrees(root1.left,root2.left);\n        root1.right = mergeTrees(root1.right,root2.right);\n        return root1;\n    }\n}\n```\n\n时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数\n\n空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。\n\n\n\n","source":"_posts/617-合并二叉树.md","raw":"---\ntitle: 力扣热题100题-合并二叉树\ndate: 2023-01-28 22:57:59\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给你两棵二叉树： root1 和 root2 。\n\n想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。\n\n返回合并后的二叉树。\n\n注意: 合并过程必须从两个树的根节点开始。\n\n示例 1：\n\n![image-20230128225905397](/Users/tangwenru/Library/Application Support/typora-user-images/image-20230128225905397.png)输入：root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n输出：[3,4,5,5,4,null,7]\n示例 2：\n\n输入：root1 = [1], root2 = [1,2]\n输出：[2,2]\n\n\n提示：\n\n两棵树中的节点数目在范围 [0, 2000] 内\n-104 <= Node.val <= 104\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/merge-two-binary-trees\n\n\n\n思路：\n\n同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if(root1 == null){\n            return root2;\n        }\n        if(root2 == null){\n            return root1;\n        }\n        root1.val += root2.val;\n        root1.left = mergeTrees(root1.left,root2.left);\n        root1.right = mergeTrees(root1.right,root2.right);\n        return root1;\n    }\n}\n```\n\n时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数\n\n空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。\n\n\n\n","slug":"617-合并二叉树","published":1,"updated":"2023-02-09T15:46:25.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snozw0003s66v2beahrbp","content":"<p>给你两棵二叉树： root1 和 root2 。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p>注意: 合并过程必须从两个树的根节点开始。</p>\n<p>示例 1：</p>\n<p>![image-20230128225905397](&#x2F;Users&#x2F;tangwenru&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230128225905397.png)输入：root1 &#x3D; [1,3,2,5], root2 &#x3D; [2,1,3,null,4,null,7]<br>输出：[3,4,5,5,4,null,7]<br>示例 2：</p>\n<p>输入：root1 &#x3D; [1], root2 &#x3D; [1,2]<br>输出：[2,2]</p>\n<p>提示：</p>\n<p>两棵树中的节点数目在范围 [0, 2000] 内<br>-104 &lt;&#x3D; Node.val &lt;&#x3D; 104</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/merge-two-binary-trees\">https://leetcode.cn/problems/merge-two-binary-trees</a></p>\n<p>思路：</p>\n<p>同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        root1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数</p>\n<p>空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你两棵二叉树： root1 和 root2 。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p>注意: 合并过程必须从两个树的根节点开始。</p>\n<p>示例 1：</p>\n<p>![image-20230128225905397](&#x2F;Users&#x2F;tangwenru&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230128225905397.png)输入：root1 &#x3D; [1,3,2,5], root2 &#x3D; [2,1,3,null,4,null,7]<br>输出：[3,4,5,5,4,null,7]<br>示例 2：</p>\n<p>输入：root1 &#x3D; [1], root2 &#x3D; [1,2]<br>输出：[2,2]</p>\n<p>提示：</p>\n<p>两棵树中的节点数目在范围 [0, 2000] 内<br>-104 &lt;&#x3D; Node.val &lt;&#x3D; 104</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/merge-two-binary-trees\">https://leetcode.cn/problems/merge-two-binary-trees</a></p>\n<p>思路：</p>\n<p>同时遍历两个二叉树A、B，构建新的二叉树C，可使用方式为将B中节点的数据增加到A中，最后输出结果为A</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        root1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度为：O(min(m,n)) 最小的二叉树的节点个数</p>\n<p>空间复杂度为：O(min(m,n))  最小的二叉树的节点个数代表着递归的层数。</p>\n"},{"title":"MySQL数据类型","date":"2022-11-13T16:04:43.000Z","_content":"\n**选择优化的数据类型**\n\n- 更小的通常更好\n\n  一般情况下，应该尽量使用可以正确存储数据的最小数据类型。\n\n- 简单更好\n\n  例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。\n\n- 尽量避免NULL\n\n  通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。\n\n  但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。\n\n  当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。\n\ndatetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。\n\n###### 整数类型\n\ntinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1\n\n","source":"_posts/MySQL数据类型.md","raw":"---\ntitle: MySQL数据类型\ndate: 2022-11-14 00:04:43\ntags:\n  - MYSQL\n---\n\n**选择优化的数据类型**\n\n- 更小的通常更好\n\n  一般情况下，应该尽量使用可以正确存储数据的最小数据类型。\n\n- 简单更好\n\n  例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。\n\n- 尽量避免NULL\n\n  通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。\n\n  但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。\n\n  当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。\n\ndatetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。\n\n###### 整数类型\n\ntinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1\n\n","slug":"MySQL数据类型","published":1,"updated":"2023-02-09T15:46:25.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snozy0006s66v4hjahg5s","content":"<p><strong>选择优化的数据类型</strong></p>\n<ul>\n<li><p>更小的通常更好</p>\n<p>一般情况下，应该尽量使用可以正确存储数据的最小数据类型。</p>\n</li>\n<li><p>简单更好</p>\n<p>例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。</p>\n</li>\n<li><p>尽量避免NULL</p>\n<p>通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。</p>\n<p>但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。</p>\n<p>当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。</p>\n</li>\n</ul>\n<p>datetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。</p>\n<h6 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h6><p>tinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><strong>选择优化的数据类型</strong></p>\n<ul>\n<li><p>更小的通常更好</p>\n<p>一般情况下，应该尽量使用可以正确存储数据的最小数据类型。</p>\n</li>\n<li><p>简单更好</p>\n<p>例如：应该用MySQL内建的类型（date、datetime、time）而不是字符串来存储日期和时间；应该用整型存储IP地址。</p>\n</li>\n<li><p>尽量避免NULL</p>\n<p>通常情况下最好指定列为NOT NULL，除非真的要存储NULL值。</p>\n<p>但是：如果计划在列上建立索引，就应该尽量避免设计为可为NULL的列。</p>\n<p>当然也有例外：InnoDB使用单独的位（bit）存储NULL值，对于稀疏数据（很多值为NULL只有少量行的列为非NULL）有很好的效率。</p>\n</li>\n</ul>\n<p>datetime 和timestamp可以存储相同类型的数据，然而timestamp存储空间是datetime的一半，并且有自动更新的能力；但timestamp允许的时间范围要小得多。</p>\n<h6 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h6><p>tinyint、smallint、mediumint、int、bigint。分别使用8、16、32、64、位存储空间，值的范围从-2^(N-1)^ 到2^(N-1)^-1</p>\n"},{"title":"二叉树的基本知识","date":"2022-06-12T07:37:23.000Z","_content":"\n\n\n\n\n## 二叉树的四种遍历方式\n\n不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）\n\n基本概念不再赘述。**复杂度：**设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。\n\n二叉树数据结构\n\n```java\nclass TreeNode {\n        int val;\n        TreeNode left;\n        TreeNode right;\n        TreeNode() {}\n        TreeNode(int val) { this.val = val; }\n        TreeNode(int val, TreeNode left, TreeNode right) {\n            this.val = val;\n            this.left = left;\n            this.right = right;\n        }\n    }\n```\n\n\n\n```\n      1\n     / \\\n    2   5\n   / \\     \n  3   4   \n```\n\n### 前序遍历\n\n遍历顺序：根节点-> 左节点-> 右节点\n\n代码实现：\n\n```java\n/**\n     * 前序遍历  根 -> 左 -> 右\n     */\n    public void preOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        System.out.print(tree.val);\n        preOrder(tree.left);\n        preOrder(tree.right);\n    }\n```\n\n非递归方式\n\n```java\n//java 中使用 Deque， Stack已经弃用。\n    //Deque 的使用用法：push、pop。\n    public void perOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        stack.push(root);\n        while(!stack.isEmpty()){\n            TreeNode treeNode = stack.pop();\n            result.append(treeNode.val);\n            if (treeNode.right != null){\n                stack.push(treeNode.right);\n            }\n            if (treeNode.left != null){\n                stack.push(treeNode.left);\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 中序遍历\n\n遍历顺序：左节点-> 根节点-> 右节点\n\n代码实现\n\n```java\n/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */\npublic void midOrder(TreeNode tree){\n    if (tree == null){\n        return;\n    }\n    midOrder(tree.left);\n    System.out.print(tree.val);\n    midOrder(tree.right);\n}\n```\n\n```java\n/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */\n    public void minOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        while(root != null || !stack.isEmpty()){\n\n            //此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。\n            while (root != null){\n                stack.push(root);\n                root = root.left;\n            }\n            //调出栈\n            root = stack.pop();\n            result.append(root.val);\n            root = root.right;\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 后序遍历\n\n遍历顺序：左节点-> 右节点-> 根节点\n\n```java\n/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */\n    public void postOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        postOrder(tree.left);\n        postOrder(tree.right);\n        System.out.print(tree.val);\n    }\n```\n\n```java\n/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */\n    public void postOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        TreeNode pre = null; //记录前置节点\n        while(root != null || !stack.isEmpty()){\n            //把所有的左子树节点都放入栈中\n            while(root != null){\n                stack.push(root);\n                root = root.left;\n            }\n\n            //找到当前节点\n            root = stack.pop();\n            //如果当前节点的右节点为空\n            //这里为什么会有对pre的判断，是为了避免重复处理。\n            //拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。\n            if (root.right == null || pre == root.right){\n                result.append(root.val);\n                //设置前置节点\n                pre = root;\n                //置为空的目的是处理栈中堆积的父节点。\n                root = null;\n            } else{\n                //右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。\n                stack.push(root);\n                //把当前节点的右节点作为root进行处理。\n                root = root.right;\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 层级遍历\n\n```java\n/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */\npublic List<StringBuilder> result = new ArrayList<>();\n\npublic void levelOrder(TreeNode root, int level) {\n    if (root == null) {\n        return;\n    }\n    //当数组大小等于层级时，初始化该层级需要的存储空间\n    if (result.size() == level) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(root.val);\n        result.add(level, stringBuilder);\n    } else {\n        result.get(level).append(root.val);\n    }\n    levelOrder(root.left, level + 1);\n    levelOrder(root.right, level + 1);\n}\n```\n\n```java\n/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */\npublic void levelOrderIter(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    StringBuilder result = new StringBuilder();\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        TreeNode current = queue.poll();\n        result.append(current.val);\n        if (current.left != null){\n            queue.add(current.left);\n        }\n        if (current.right != null){\n            queue.add(current.right);\n        }\n    }\n    System.out.println(result.toString());\n}\n```\n\n\n\n额外：\n\n```java\n/**\n * 获取二叉树的最大深度\n */\npublic int getMaxDepth(TreeNode root){\n    if (root == null){\n        return 0;\n    }\n    return Math.max(getMaxDepth(root.left)+1,getMaxDepth(root.right)+1);\n}\n```\n\n\n\n```java\n/**\n     * 打印每个二叉树的层级 按层打印\n     */\n    public void levelOrderIterByLevel(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        StringBuilder result = new StringBuilder();\n        // 当前行打印的最右节点\n        TreeNode last = root;\n        // 下一行打印的最右节点\n        TreeNode nextLast = null;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while(!queue.isEmpty()){\n            TreeNode current = queue.poll();\n            result.append(current.val);\n            if (current.left != null){\n                queue.add(current.left);\n                nextLast = current.left; //如果当前节点的left非空，则认为下一层的next是当前节点的left\n            }\n            if (current.right != null){\n                queue.add(current.right);\n                nextLast = current.right; //同理\n            }\n            //若是发现当前层的最后一个节点同当前节点相同，则打印\n            if (last == current){\n                result.append(\"\\\\n\");\n                //将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环\n                last = nextLast; //\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n","source":"_posts/二叉树的基本知识.md","raw":"---\ntitle: 二叉树的基本知识\ndate: 2022-06-12 15:37:23\ntags:\n  - 二叉树\n  - 算法\n---\n\n\n\n\n\n## 二叉树的四种遍历方式\n\n不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）\n\n基本概念不再赘述。**复杂度：**设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。\n\n二叉树数据结构\n\n```java\nclass TreeNode {\n        int val;\n        TreeNode left;\n        TreeNode right;\n        TreeNode() {}\n        TreeNode(int val) { this.val = val; }\n        TreeNode(int val, TreeNode left, TreeNode right) {\n            this.val = val;\n            this.left = left;\n            this.right = right;\n        }\n    }\n```\n\n\n\n```\n      1\n     / \\\n    2   5\n   / \\     \n  3   4   \n```\n\n### 前序遍历\n\n遍历顺序：根节点-> 左节点-> 右节点\n\n代码实现：\n\n```java\n/**\n     * 前序遍历  根 -> 左 -> 右\n     */\n    public void preOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        System.out.print(tree.val);\n        preOrder(tree.left);\n        preOrder(tree.right);\n    }\n```\n\n非递归方式\n\n```java\n//java 中使用 Deque， Stack已经弃用。\n    //Deque 的使用用法：push、pop。\n    public void perOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        stack.push(root);\n        while(!stack.isEmpty()){\n            TreeNode treeNode = stack.pop();\n            result.append(treeNode.val);\n            if (treeNode.right != null){\n                stack.push(treeNode.right);\n            }\n            if (treeNode.left != null){\n                stack.push(treeNode.left);\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 中序遍历\n\n遍历顺序：左节点-> 根节点-> 右节点\n\n代码实现\n\n```java\n/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */\npublic void midOrder(TreeNode tree){\n    if (tree == null){\n        return;\n    }\n    midOrder(tree.left);\n    System.out.print(tree.val);\n    midOrder(tree.right);\n}\n```\n\n```java\n/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */\n    public void minOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        while(root != null || !stack.isEmpty()){\n\n            //此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。\n            while (root != null){\n                stack.push(root);\n                root = root.left;\n            }\n            //调出栈\n            root = stack.pop();\n            result.append(root.val);\n            root = root.right;\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 后序遍历\n\n遍历顺序：左节点-> 右节点-> 根节点\n\n```java\n/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */\n    public void postOrder(TreeNode tree){\n        if (tree == null){\n            return;\n        }\n        postOrder(tree.left);\n        postOrder(tree.right);\n        System.out.print(tree.val);\n    }\n```\n\n```java\n/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */\n    public void postOrderIter(TreeNode root){\n        if (root == null){\n            return;\n        }\n        Deque<TreeNode> stack = new ArrayDeque<>();\n        StringBuilder result = new StringBuilder();\n        TreeNode pre = null; //记录前置节点\n        while(root != null || !stack.isEmpty()){\n            //把所有的左子树节点都放入栈中\n            while(root != null){\n                stack.push(root);\n                root = root.left;\n            }\n\n            //找到当前节点\n            root = stack.pop();\n            //如果当前节点的右节点为空\n            //这里为什么会有对pre的判断，是为了避免重复处理。\n            //拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。\n            if (root.right == null || pre == root.right){\n                result.append(root.val);\n                //设置前置节点\n                pre = root;\n                //置为空的目的是处理栈中堆积的父节点。\n                root = null;\n            } else{\n                //右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。\n                stack.push(root);\n                //把当前节点的右节点作为root进行处理。\n                root = root.right;\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n### 层级遍历\n\n```java\n/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */\npublic List<StringBuilder> result = new ArrayList<>();\n\npublic void levelOrder(TreeNode root, int level) {\n    if (root == null) {\n        return;\n    }\n    //当数组大小等于层级时，初始化该层级需要的存储空间\n    if (result.size() == level) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(root.val);\n        result.add(level, stringBuilder);\n    } else {\n        result.get(level).append(root.val);\n    }\n    levelOrder(root.left, level + 1);\n    levelOrder(root.right, level + 1);\n}\n```\n\n```java\n/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */\npublic void levelOrderIter(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    StringBuilder result = new StringBuilder();\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        TreeNode current = queue.poll();\n        result.append(current.val);\n        if (current.left != null){\n            queue.add(current.left);\n        }\n        if (current.right != null){\n            queue.add(current.right);\n        }\n    }\n    System.out.println(result.toString());\n}\n```\n\n\n\n额外：\n\n```java\n/**\n * 获取二叉树的最大深度\n */\npublic int getMaxDepth(TreeNode root){\n    if (root == null){\n        return 0;\n    }\n    return Math.max(getMaxDepth(root.left)+1,getMaxDepth(root.right)+1);\n}\n```\n\n\n\n```java\n/**\n     * 打印每个二叉树的层级 按层打印\n     */\n    public void levelOrderIterByLevel(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        StringBuilder result = new StringBuilder();\n        // 当前行打印的最右节点\n        TreeNode last = root;\n        // 下一行打印的最右节点\n        TreeNode nextLast = null;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while(!queue.isEmpty()){\n            TreeNode current = queue.poll();\n            result.append(current.val);\n            if (current.left != null){\n                queue.add(current.left);\n                nextLast = current.left; //如果当前节点的left非空，则认为下一层的next是当前节点的left\n            }\n            if (current.right != null){\n                queue.add(current.right);\n                nextLast = current.right; //同理\n            }\n            //若是发现当前层的最后一个节点同当前节点相同，则打印\n            if (last == current){\n                result.append(\"\\\\n\");\n                //将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环\n                last = nextLast; //\n            }\n        }\n        System.out.println(result.toString());\n    }\n```\n\n","slug":"二叉树的基本知识","published":1,"updated":"2023-02-09T15:46:25.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snozz0008s66v934igzui","content":"<h2 id=\"二叉树的四种遍历方式\"><a href=\"#二叉树的四种遍历方式\" class=\"headerlink\" title=\"二叉树的四种遍历方式\"></a>二叉树的四种遍历方式</h2><p>不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）</p>\n<p>基本概念不再赘述。<strong>复杂度：</strong>设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。</p>\n<p>二叉树数据结构</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   5\n &#x2F; \\     \n3   4   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>遍历顺序：根节点-&gt; 左节点-&gt; 右节点</p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 前序遍历  根 -> 左 -> 右\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>非递归方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//java 中使用 Deque， Stack已经弃用。</span>\n    <span class=\"token comment\">//Deque 的使用用法：push、pop。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">perOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> treeNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>遍历顺序：左节点-&gt; 根节点-&gt; 右节点</p>\n<p>代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//调出栈</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><p>遍历顺序：左节点-&gt; 右节点-&gt; 根节点</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录前置节点</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//把所有的左子树节点都放入栈中</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">//找到当前节点</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果当前节点的右节点为空</span>\n            <span class=\"token comment\">//这里为什么会有对pre的判断，是为了避免重复处理。</span>\n            <span class=\"token comment\">//拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> pre <span class=\"token operator\">==</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//设置前置节点</span>\n                pre <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//置为空的目的是处理栈中堆积的父节点。</span>\n                root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//把当前节点的右节点作为root进行处理。</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"层级遍历\"><a href=\"#层级遍历\" class=\"headerlink\" title=\"层级遍历\"></a>层级遍历</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//当数组大小等于层级时，初始化该层级需要的存储空间</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>额外：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 获取二叉树的最大深度\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 打印每个二叉树的层级 按层打印\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIterByLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 当前行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> last <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 下一行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> nextLast <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">//如果当前节点的left非空，则认为下一层的next是当前节点的left</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//同理</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//若是发现当前层的最后一个节点同当前节点相同，则打印</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环</span>\n                last <span class=\"token operator\">=</span> nextLast<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"二叉树的四种遍历方式\"><a href=\"#二叉树的四种遍历方式\" class=\"headerlink\" title=\"二叉树的四种遍历方式\"></a>二叉树的四种遍历方式</h2><p>不要较真，其实也可以分为两种：广度优先（层级）和深度优先（前序、中序、后序）</p>\n<p>基本概念不再赘述。<strong>复杂度：</strong>设二叉树中元素数目为n。这四种遍历算法的空间复杂性均为O (n)，时间复杂性为O(n)。</p>\n<p>二叉树数据结构</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   5\n &#x2F; \\     \n3   4   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>遍历顺序：根节点-&gt; 左节点-&gt; 右节点</p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 前序遍历  根 -> 左 -> 右\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>非递归方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//java 中使用 Deque， Stack已经弃用。</span>\n    <span class=\"token comment\">//Deque 的使用用法：push、pop。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">perOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> treeNode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>遍历顺序：左节点-&gt; 根节点-&gt; 右节点</p>\n<p>代码实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 中序遍历  左 -> 根 -> 右\n * 结果：32415\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">midOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式中序遍历  左 -> 根 -> 右\n     * 这个比较难，重点关注一下。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token comment\">//此处的目的是放入将根节点放入，然后将根节点的左节点压在根节点上面。</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//调出栈</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><p>遍历顺序：左节点-&gt; 右节点-&gt; 根节点</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 后序遍历  左 -> 右 -> 根\n     * 结果：34251\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 迭代式后序遍历\n     * 后序遍历更复杂！！！！\n     * 先遍历左节点 -> 右节点 -> 根节点\n     *      1\n     *      / \\\n     *     2   5\n     *    / \\\n     *   3   4\n     *      / \\\n     *     7   8\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//记录前置节点</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//把所有的左子树节点都放入栈中</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">//找到当前节点</span>\n            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//如果当前节点的右节点为空</span>\n            <span class=\"token comment\">//这里为什么会有对pre的判断，是为了避免重复处理。</span>\n            <span class=\"token comment\">//拿例子：当8已经处理完了之后，应该处理4节点，当时发现4也是有右子树的，但是8已经处理过了，通过pre达标，那么8也不用处理。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> pre <span class=\"token operator\">==</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//设置前置节点</span>\n                pre <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//置为空的目的是处理栈中堆积的父节点。</span>\n                root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//右节点非空,说明当前节点这个时候不能够处理,就把当前节点再放回去。</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//把当前节点的右节点作为root进行处理。</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"层级遍历\"><a href=\"#层级遍历\" class=\"headerlink\" title=\"层级遍历\"></a>层级遍历</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 层级遍历\n * 递归的方式\n * 递归需要存储每个的层级 对应的数据都有什么，借助额外的数据结构\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//当数组大小等于层级时，初始化该层级需要的存储空间</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 迭代式层级遍历\n * 借助额外的数据结构：队列，特性：先进先出\n * queue 的基本用法：add(offer)，remove(poll)\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>额外：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 获取二叉树的最大深度\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">getMaxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 打印每个二叉树的层级 按层打印\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">levelOrderIterByLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 当前行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> last <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 下一行打印的最右节点</span>\n        <span class=\"token class-name\">TreeNode</span> nextLast <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">//如果当前节点的left非空，则认为下一层的next是当前节点的left</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                nextLast <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">//同理</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//若是发现当前层的最后一个节点同当前节点相同，则打印</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//将下一层的最后一个节点赋值到当前层的最后一个节点用于下一次循环</span>\n                last <span class=\"token operator\">=</span> nextLast<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-两数之和","date":"2022-06-16T15:15:58.000Z","_content":"\n给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。 \n\n示例 1：\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n示例 2：\n\n```\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n```\n\n示例 3：\n\n```\n输入：nums = [3,3], target = 6\n输出：[0,1]\n```\n\n\n提示：\n\n- 2 <= nums.length <= 104\n- -109 <= nums[i] <= 109\n- -109 <= target <= 109\n- 只会存在一个有效答案\n\n进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？\n来源：力扣   链接：https://leetcode.cn/problems/two-sum\n\n\n\n**最简单的方案-暴力解法**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n  //暴力解法不解释\n        for(int i = 0 ; i< nums.length; i++){\n            for(int j = i+1 ; j < nums.length ; j++){\n                if(nums[i]+nums[j] == target){\n                    return new int[]{i,j};\n                }\n            }\n        }\n        return null;\n    }\n```\n\n时间复杂度：O(n ^ 2)  空间复杂度：O(1)\n\n\n\n**减少时间复杂度，增加空间复杂度**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i = 0;i < nums.length ; i++){\n            if(map.containsKey(target - nums[i])){\n                return new int[]{map.get(target - nums[i]),i}; \n            } else {\n                map.put(nums[i],i);\n            }\n        }\n        return null;\n    }\n```\n\n用空间换时间，是大多数降低时间复杂度的方法\n\n时间复杂度：O(n)  空间复杂度：O(n) \n","source":"_posts/力扣热题100题-两数之和.md","raw":"---\ntitle: 力扣热题100题-两数之和\ndate: 2022-06-16 23:15:58\ntags:\n  - 算法\n  - 数组\n  - 力扣热题100题\n---\n\n给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。 \n\n示例 1：\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n示例 2：\n\n```\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n```\n\n示例 3：\n\n```\n输入：nums = [3,3], target = 6\n输出：[0,1]\n```\n\n\n提示：\n\n- 2 <= nums.length <= 104\n- -109 <= nums[i] <= 109\n- -109 <= target <= 109\n- 只会存在一个有效答案\n\n进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？\n来源：力扣   链接：https://leetcode.cn/problems/two-sum\n\n\n\n**最简单的方案-暴力解法**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n  //暴力解法不解释\n        for(int i = 0 ; i< nums.length; i++){\n            for(int j = i+1 ; j < nums.length ; j++){\n                if(nums[i]+nums[j] == target){\n                    return new int[]{i,j};\n                }\n            }\n        }\n        return null;\n    }\n```\n\n时间复杂度：O(n ^ 2)  空间复杂度：O(1)\n\n\n\n**减少时间复杂度，增加空间复杂度**\n\n```java\npublic int[] twoSum(int[] nums, int target) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i = 0;i < nums.length ; i++){\n            if(map.containsKey(target - nums[i])){\n                return new int[]{map.get(target - nums[i]),i}; \n            } else {\n                map.put(nums[i],i);\n            }\n        }\n        return null;\n    }\n```\n\n用空间换时间，是大多数降低时间复杂度的方法\n\n时间复杂度：O(n)  空间复杂度：O(n) \n","slug":"力扣热题100题-两数之和","published":1,"updated":"2023-02-09T15:46:25.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snozz000as66vakffggsb","content":"<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。 </p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,2,4], target &#x3D; 6\n输出：[1,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,3], target &#x3D; 6\n输出：[0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<ul>\n<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 104</li>\n<li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>\n<li>-109 &lt;&#x3D; target &lt;&#x3D; 109</li>\n<li>只会存在一个有效答案</li>\n</ul>\n<p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？<br>来源：力扣   链接：<a href=\"https://leetcode.cn/problems/two-sum\">https://leetcode.cn/problems/two-sum</a></p>\n<p><strong>最简单的方案-暴力解法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//暴力解法不解释</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n ^ 2)  空间复杂度：O(1)</p>\n<p><strong>减少时间复杂度，增加空间复杂度</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用空间换时间，是大多数降低时间复杂度的方法</p>\n<p>时间复杂度：O(n)  空间复杂度：O(n) </p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。 </p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,2,4], target &#x3D; 6\n输出：[1,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,3], target &#x3D; 6\n输出：[0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<ul>\n<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 104</li>\n<li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>\n<li>-109 &lt;&#x3D; target &lt;&#x3D; 109</li>\n<li>只会存在一个有效答案</li>\n</ul>\n<p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？<br>来源：力扣   链接：<a href=\"https://leetcode.cn/problems/two-sum\">https://leetcode.cn/problems/two-sum</a></p>\n<p><strong>最简单的方案-暴力解法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//暴力解法不解释</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n ^ 2)  空间复杂度：O(1)</p>\n<p><strong>减少时间复杂度，增加空间复杂度</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用空间换时间，是大多数降低时间复杂度的方法</p>\n<p>时间复杂度：O(n)  空间复杂度：O(n) </p>\n"},{"title":"力扣热题100题-二叉树的直径","date":"2022-06-12T07:37:23.000Z","_content":"\n## 题目：\n\n543. 二叉树的直径\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n示例 :\n给定二叉树\n\n```\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n```\n\n返回 **3**, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n**注意：**两结点之间的路径长度是以它们之间边的数目表示。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/diameter-of-binary-tree\n\n## 解题思路\n\n前提：了解二叉树的前序、中序、后序、层级遍历\n\n参考：[二叉树的基本知识](https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/)\n\n1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。\n\n## 代码\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    /**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */\n    public int diameterOfBinaryTree(TreeNode root) {\n        /**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */\n        depth(root);\n        return MAX;\n    }\n\n    /**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */\n    public int MAX = 0 ;\n    public int depth(TreeNode root){\n        if (root == null){\n            return 0;\n        }\n        int leftDepth = depth(root.left);\n        int rightDepth = depth(root.right);\n        int sum = leftDepth + rightDepth;\n        if (sum > MAX){\n            MAX = sum;\n        }\n        return Math.max(leftDepth,rightDepth)+1;\n    }\n}\n```\n\n时间复杂度：O(N)，也就是遍历这一个二叉树的时间\n\n空间复杂度：O(树的Height) Height 是二叉树的高度。\n\n\n\n","source":"_posts/力扣热题100题-二叉树的直径.md","raw":"---\ntitle: 力扣热题100题-二叉树的直径\ndate: 2022-06-12 15:37:23\ntags:\n  - 二叉树\n  - 算法\n  - 力扣热题100题\n---\n\n## 题目：\n\n543. 二叉树的直径\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n示例 :\n给定二叉树\n\n```\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n```\n\n返回 **3**, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n**注意：**两结点之间的路径长度是以它们之间边的数目表示。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/diameter-of-binary-tree\n\n## 解题思路\n\n前提：了解二叉树的前序、中序、后序、层级遍历\n\n参考：[二叉树的基本知识](https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/)\n\n1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。\n\n## 代码\n\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    /**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */\n    public int diameterOfBinaryTree(TreeNode root) {\n        /**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */\n        depth(root);\n        return MAX;\n    }\n\n    /**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */\n    public int MAX = 0 ;\n    public int depth(TreeNode root){\n        if (root == null){\n            return 0;\n        }\n        int leftDepth = depth(root.left);\n        int rightDepth = depth(root.right);\n        int sum = leftDepth + rightDepth;\n        if (sum > MAX){\n            MAX = sum;\n        }\n        return Math.max(leftDepth,rightDepth)+1;\n    }\n}\n```\n\n时间复杂度：O(N)，也就是遍历这一个二叉树的时间\n\n空间复杂度：O(树的Height) Height 是二叉树的高度。\n\n\n\n","slug":"力扣热题100题-二叉树的直径","published":1,"updated":"2023-02-09T15:46:25.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp00000ds66v20b1429n","content":"<h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><ol start=\"543\">\n<li>二叉树的直径<br>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。<br>示例 :<br>给定二叉树</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   3\n &#x2F; \\     \n4   5    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>\n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/diameter-of-binary-tree\">https://leetcode.cn/problems/diameter-of-binary-tree</a></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>前提：了解二叉树的前序、中序、后序、层级遍历</p>\n<p>参考：<a href=\"https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/\">二叉树的基本知识</a></p>\n<p>1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */</span>\n        <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> leftDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> leftDepth <span class=\"token operator\">+</span> rightDepth<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            MAX <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftDepth<span class=\"token punctuation\">,</span>rightDepth<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)，也就是遍历这一个二叉树的时间</p>\n<p>空间复杂度：O(树的Height) Height 是二叉树的高度。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h2><ol start=\"543\">\n<li>二叉树的直径<br>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。<br>示例 :<br>给定二叉树</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    1\n   &#x2F; \\\n  2   3\n &#x2F; \\     \n4   5    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>\n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/diameter-of-binary-tree\">https://leetcode.cn/problems/diameter-of-binary-tree</a></p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>前提：了解二叉树的前序、中序、后序、层级遍历</p>\n<p>参考：<a href=\"https://fengtingxin.github.io/2022/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/\">二叉树的基本知识</a></p>\n<p>1.暴力解法：循环当前二叉树，已当前节点为根，求左子树和右子树的最大深度之和。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 二叉树的直径\n     * 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/**\n         *            1\n         *          / \\\n         *        2    3\n         *       / \\  /\n         *     4   5 6\n         * 已此为例，我们想求最大直径，也就是3->4 的距离，那么就是节点1 左子节点和右子节点的深度\n         * 虚拟公式：\n         * depth（1） = depth(2)+depth(3)\n         *\n         *\n         */</span>\n        <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 在获取二叉树深度的过程中，已经知道了左子树和右子树的深度，所以执行的过程中可以知道叶子节点间的最大长度。\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> leftDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightDepth <span class=\"token operator\">=</span> <span class=\"token function\">depth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> leftDepth <span class=\"token operator\">+</span> rightDepth<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            MAX <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftDepth<span class=\"token punctuation\">,</span>rightDepth<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)，也就是遍历这一个二叉树的时间</p>\n<p>空间复杂度：O(树的Height) Height 是二叉树的高度。</p>\n"},{"title":"力扣热题100题-找到所有数组中消失的数字","date":"2023-01-31T11:27:25.000Z","_content":"\n给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。\n\n示例 1：\n\n输入：nums = [4,3,2,7,8,2,3,1]\n输出：[5,6]\n示例 2：\n\n输入：nums = [1,1]\n输出：[2]\n\n\n提示：\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n\n进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\n\n\n\n额外使用一个数组作为hash表，记录哪个数字没有出现过：\n\n```java\nclass Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for(int i = 0;i < length; i++){\n            temp[nums[i]-1]=1;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            if(temp[i] == 0){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间\n\n那么怎么不使用额外的空间呢？\n\n考虑只能从数组本身下手了\n\n\n\n官方答案：\n\n```java\nclass Solution {\n\n    //思路是这样\n        //发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,\n        // 有可能存在多次+n的情况，实际值为: value %n即可。\n        // 可能存在没有+n的情况，那就是没有出现在范围内容的数字\n\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        for(int i = 0;i < length; i++){\n            //找到这个数对应的数组下标\n            int x =(nums[i]-1)%length ;\n            nums[x] = nums[x] + length;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            //只要是出现过，那就肯定大于n\n            if(nums[i] <= length){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n这样就可以已当前数组为哈希表。\n","source":"_posts/力扣热题100题-找到所有数组中消失的数字.md","raw":"---\ntitle: 力扣热题100题-找到所有数组中消失的数字\ndate: 2023-01-31 19:27:25\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。\n\n示例 1：\n\n输入：nums = [4,3,2,7,8,2,3,1]\n输出：[5,6]\n示例 2：\n\n输入：nums = [1,1]\n输出：[2]\n\n\n提示：\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n\n进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\n\n\n\n额外使用一个数组作为hash表，记录哪个数字没有出现过：\n\n```java\nclass Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        int[] temp = new int[length];\n        for(int i = 0;i < length; i++){\n            temp[nums[i]-1]=1;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            if(temp[i] == 0){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间\n\n那么怎么不使用额外的空间呢？\n\n考虑只能从数组本身下手了\n\n\n\n官方答案：\n\n```java\nclass Solution {\n\n    //思路是这样\n        //发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,\n        // 有可能存在多次+n的情况，实际值为: value %n即可。\n        // 可能存在没有+n的情况，那就是没有出现在范围内容的数字\n\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int length = nums.length;\n        for(int i = 0;i < length; i++){\n            //找到这个数对应的数组下标\n            int x =(nums[i]-1)%length ;\n            nums[x] = nums[x] + length;\n        }\n        \n        List<Integer> result = new ArrayList();\n        for(int i =0;i<length;i++){\n            //只要是出现过，那就肯定大于n\n            if(nums[i] <= length){\n                result.add(i+1);\n            }\n        }\n        return result;\n    }\n}\n```\n\n这样就可以已当前数组为哈希表。\n","slug":"力扣热题100题-找到所有数组中消失的数字","published":1,"updated":"2023-02-09T15:46:25.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp00000es66vb4ov6y07","content":"<p>给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [4,3,2,7,8,2,3,1]<br>输出：[5,6]<br>示例 2：</p>\n<p>输入：nums &#x3D; [1,1]<br>输出：[2]</p>\n<p>提示：</p>\n<p>n &#x3D;&#x3D; nums.length<br>1 &lt;&#x3D; n &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; n<br>进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\">https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array</a></p>\n<p>额外使用一个数组作为hash表，记录哪个数字没有出现过：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间</p>\n<p>那么怎么不使用额外的空间呢？</p>\n<p>考虑只能从数组本身下手了</p>\n<p>官方答案：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路是这样</span>\n        <span class=\"token comment\">//发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,</span>\n        <span class=\"token comment\">// 有可能存在多次+n的情况，实际值为: value %n即可。</span>\n        <span class=\"token comment\">// 可能存在没有+n的情况，那就是没有出现在范围内容的数字</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//找到这个数对应的数组下标</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>length <span class=\"token punctuation\">;</span>\n            nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//只要是出现过，那就肯定大于n</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样就可以已当前数组为哈希表。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [4,3,2,7,8,2,3,1]<br>输出：[5,6]<br>示例 2：</p>\n<p>输入：nums &#x3D; [1,1]<br>输出：[2]</p>\n<p>提示：</p>\n<p>n &#x3D;&#x3D; nums.length<br>1 &lt;&#x3D; n &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; n<br>进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array\">https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array</a></p>\n<p>额外使用一个数组作为hash表，记录哪个数字没有出现过：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果几乎超时，时间复杂度为：O(n)，空间复杂度为O(n)，使用了额外的空间</p>\n<p>那么怎么不使用额外的空间呢？</p>\n<p>考虑只能从数组本身下手了</p>\n<p>官方答案：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//思路是这样</span>\n        <span class=\"token comment\">//发现数组中的某个值之后，将这个值对应的数组下标的数字+ n,</span>\n        <span class=\"token comment\">// 有可能存在多次+n的情况，实际值为: value %n即可。</span>\n        <span class=\"token comment\">// 可能存在没有+n的情况，那就是没有出现在范围内容的数字</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//找到这个数对应的数组下标</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>length <span class=\"token punctuation\">;</span>\n            nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//只要是出现过，那就肯定大于n</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样就可以已当前数组为哈希表。</p>\n"},{"title":"力扣热题100题-合并两个有序链表","date":"2022-06-18T10:45:04.000Z","_content":"\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n\n```\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n```\n\n\n示例 2：\n\n```\n输入：l1 = [], l2 = []\n输出：[]\n```\n\n示例 3：\n\n```\n输入：l1 = [], l2 = [0]\n输出：[0]\n```\n\n\n提示：\n\n两个链表的节点数目范围是 [0, 50]\n-100 <= Node.val <= 100\nl1 和 l2 均按 非递减顺序 排列\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/merge-two-sorted-lists\n\n解：\n\n```java\npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        if(list1 == null){\n            return list2;\n        }\n        if(list2 == null){\n            return list1;\n        }\n        ListNode result = new ListNode();\n        ListNode current = result;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val){\n                current.next = list1;\n                list1 = list1.next;\n            } else {\n                current.next = list2;\n                list2 = list2.next;\n            }\n            current = current.next;\n        }\n        if(list1 != null){\n            current.next = list1;\n        } else {\n            current.next = list2;\n        }\n        return result.next;\n    }\n```\n\n时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。\n","source":"_posts/力扣热题100题-合并两个有序链表.md","raw":"---\ntitle: 力扣热题100题-合并两个有序链表\ndate: 2022-06-18 18:45:04\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  \n\n示例 1：\n\n![img](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n\n```\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n```\n\n\n示例 2：\n\n```\n输入：l1 = [], l2 = []\n输出：[]\n```\n\n示例 3：\n\n```\n输入：l1 = [], l2 = [0]\n输出：[0]\n```\n\n\n提示：\n\n两个链表的节点数目范围是 [0, 50]\n-100 <= Node.val <= 100\nl1 和 l2 均按 非递减顺序 排列\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/merge-two-sorted-lists\n\n解：\n\n```java\npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        if(list1 == null){\n            return list2;\n        }\n        if(list2 == null){\n            return list1;\n        }\n        ListNode result = new ListNode();\n        ListNode current = result;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val){\n                current.next = list1;\n                list1 = list1.next;\n            } else {\n                current.next = list2;\n                list2 = list2.next;\n            }\n            current = current.next;\n        }\n        if(list1 != null){\n            current.next = list1;\n        } else {\n            current.next = list2;\n        }\n        return result.next;\n    }\n```\n\n时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。\n","slug":"力扣热题100题-合并两个有序链表","published":1,"updated":"2023-02-09T15:46:25.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp01000gs66v1hgdfvt7","content":"<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  </p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]\n输出：[1,1,2,3,4,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; []\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; [0]\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>两个链表的节点数目范围是 [0, 50]<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>l1 和 l2 均按 非递减顺序 排列</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/merge-two-sorted-lists\">https://leetcode.cn/problems/merge-two-sorted-lists</a></p>\n<p>解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> list2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> list2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n                list1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n                list2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  </p>\n<p>示例 1：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]\n输出：[1,1,2,3,4,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; []\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; [0]\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>两个链表的节点数目范围是 [0, 50]<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>l1 和 l2 均按 非递减顺序 排列</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/merge-two-sorted-lists\">https://leetcode.cn/problems/merge-two-sorted-lists</a></p>\n<p>解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> list2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> list2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n                list1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n                list2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n+m)，两个链表的长度，空间复杂度：O(1):未新建节点。</p>\n"},{"title":"力扣热题100题-最大子数组和","date":"2022-06-18T11:27:25.000Z","_content":"\n给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n子数组 是数组中的一个连续部分。\n\n \n\n示例 1：\n\n```\n输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n```\n\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n示例 2：\n\n```\n输入：nums = [1]\n输出：1\n```\n\n示例 3：\n\n```\n输入：nums = [5,4,-1,7,8]\n输出：23\n```\n\n\n提示：\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n\n进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/maximum-subarray\n\n暴力解法：\n\n```java\n/**\n    暴力解法：\n     */\n    public int maxSubArray(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < nums.length ;i++){\n            max = Math.max(max,nums[i]);\n            int temp = nums[i];\n            for(int j = i+1 ; j < nums.length ;j++){\n                temp = temp + nums[j];\n                max = Math.max(max,temp);\n            }\n        }\n        return max;\n    }\n```\n\n力扣显示超时，思考如何优化算法的时间复杂度。\n\n\n\n\u0003\u0003动态规划版本一：\n\n```java\npublic int maxSubArray2(int[] nums) {\n    int len = nums.length;\n    // dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和\n    int[] dp = new int[len];\n    dp[0] = nums[0];\n\n    for (int i = 1; i < len; i++) {\n        //当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数\n        if (dp[i - 1] > 0) {\n            dp[i] = dp[i - 1] + nums[i];\n        } else {\n            dp[i] = nums[i];\n        }\n    }\n\n    // 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择\n    int res = dp[0];\n    for (int i = 1; i < len; i++) {\n        res = Math.max(res, dp[i]);\n    }\n    return res;\n}\n```\n\n\n\n动态规划版本二：\n\n```java\n/**\n     * 动态规划\n     */\n    public int maxSubArray(int[] nums) {\n        //f(n) = max(f(n-1) + nums[n], nums[n]);\n        // 前置的和\n        int preSum = 0;\n\n        // 最大值，所有的前置和的最大值。\n        int max = nums[0];\n\n        for (int num : nums) {\n            preSum = Math.max(preSum + num, num);\n            max = Math.max(max, preSum);\n        }\n        return max;\n    }\n```\n\n动态规划的方程必须要理解一个点：\n\n**子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。**\n\n方法二：分治法\n\n连续子序列的最大和主要由这三部分子区间里元素的最大和得到：\n\n- 第 1 部分：子区间 [left, mid]；\n\n- 第 2 部分：子区间 [mid + 1, right]；\n- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n\n对这三个部分求最大值即可。\n\n```java\npublic int maxSubArray(int[] nums) {\n        int len = nums.length;\n        return maxSubArraySum(nums, 0, len-1);\n    }\n\n//- 第 1 部分：子区间 [left, mid]；\n//- 第 2 部分：子区间 [mid + 1, right]；\n//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n    //最大子数组和\n    private int maxSubArraySum(int[] nums, int left, int right) {\n\n        if (left == right) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        //\n        return Math.max(maxSubArraySum(nums, left, mid),\n                Math.max(maxSubArraySum(nums, left + 1, right),\n                        maxCrossingSum(nums, left, mid, right)));\n    }\n\n    private int maxCrossingSum(int[] nums, int left, int mid, int right) {\n        // 一定会包含 nums[mid] 这个元素\n        int sum = 0;\n        int leftSum = Integer.MIN_VALUE;\n        // 左半边包含 nums[mid] 元素，最多可以到什么地方\n        // 走到最边界，看看最值是什么\n        // 计算以 mid 结尾的最大的子数组的和\n        for (int i = mid; i >= left; i--) {\n            sum += nums[i];\n            if (sum > leftSum) {\n                leftSum = sum;\n            }\n        }\n        sum = 0;\n        int rightSum = Integer.MIN_VALUE;\n        // 右半边不包含 nums[mid] 元素，最多可以到什么地方\n        // 计算以 mid+1 开始的最大的子数组的和\n        for (int i = mid + 1; i <= right; i++) {\n            sum += nums[i];\n            if (sum > rightSum) {\n                rightSum = sum;\n            }\n        }\n        return leftSum + rightSum;\n    }\n```\n\n\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；\n空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。\n\n\n\n\n\n\n\n","source":"_posts/力扣热题100题-最大子数组和.md","raw":"---\ntitle: 力扣热题100题-最大子数组和\ndate: 2022-06-18 19:27:25\ntags:\n  - 算法\n  - 力扣热题100题\n  - 待回顾\n---\n\n给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n子数组 是数组中的一个连续部分。\n\n \n\n示例 1：\n\n```\n输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n```\n\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n示例 2：\n\n```\n输入：nums = [1]\n输出：1\n```\n\n示例 3：\n\n```\n输入：nums = [5,4,-1,7,8]\n输出：23\n```\n\n\n提示：\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n\n进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/maximum-subarray\n\n暴力解法：\n\n```java\n/**\n    暴力解法：\n     */\n    public int maxSubArray(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < nums.length ;i++){\n            max = Math.max(max,nums[i]);\n            int temp = nums[i];\n            for(int j = i+1 ; j < nums.length ;j++){\n                temp = temp + nums[j];\n                max = Math.max(max,temp);\n            }\n        }\n        return max;\n    }\n```\n\n力扣显示超时，思考如何优化算法的时间复杂度。\n\n\n\n\u0003\u0003动态规划版本一：\n\n```java\npublic int maxSubArray2(int[] nums) {\n    int len = nums.length;\n    // dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和\n    int[] dp = new int[len];\n    dp[0] = nums[0];\n\n    for (int i = 1; i < len; i++) {\n        //当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数\n        if (dp[i - 1] > 0) {\n            dp[i] = dp[i - 1] + nums[i];\n        } else {\n            dp[i] = nums[i];\n        }\n    }\n\n    // 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择\n    int res = dp[0];\n    for (int i = 1; i < len; i++) {\n        res = Math.max(res, dp[i]);\n    }\n    return res;\n}\n```\n\n\n\n动态规划版本二：\n\n```java\n/**\n     * 动态规划\n     */\n    public int maxSubArray(int[] nums) {\n        //f(n) = max(f(n-1) + nums[n], nums[n]);\n        // 前置的和\n        int preSum = 0;\n\n        // 最大值，所有的前置和的最大值。\n        int max = nums[0];\n\n        for (int num : nums) {\n            preSum = Math.max(preSum + num, num);\n            max = Math.max(max, preSum);\n        }\n        return max;\n    }\n```\n\n动态规划的方程必须要理解一个点：\n\n**子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。**\n\n方法二：分治法\n\n连续子序列的最大和主要由这三部分子区间里元素的最大和得到：\n\n- 第 1 部分：子区间 [left, mid]；\n\n- 第 2 部分：子区间 [mid + 1, right]；\n- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n\n对这三个部分求最大值即可。\n\n```java\npublic int maxSubArray(int[] nums) {\n        int len = nums.length;\n        return maxSubArraySum(nums, 0, len-1);\n    }\n\n//- 第 1 部分：子区间 [left, mid]；\n//- 第 2 部分：子区间 [mid + 1, right]；\n//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。\n    //最大子数组和\n    private int maxSubArraySum(int[] nums, int left, int right) {\n\n        if (left == right) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        //\n        return Math.max(maxSubArraySum(nums, left, mid),\n                Math.max(maxSubArraySum(nums, left + 1, right),\n                        maxCrossingSum(nums, left, mid, right)));\n    }\n\n    private int maxCrossingSum(int[] nums, int left, int mid, int right) {\n        // 一定会包含 nums[mid] 这个元素\n        int sum = 0;\n        int leftSum = Integer.MIN_VALUE;\n        // 左半边包含 nums[mid] 元素，最多可以到什么地方\n        // 走到最边界，看看最值是什么\n        // 计算以 mid 结尾的最大的子数组的和\n        for (int i = mid; i >= left; i--) {\n            sum += nums[i];\n            if (sum > leftSum) {\n                leftSum = sum;\n            }\n        }\n        sum = 0;\n        int rightSum = Integer.MIN_VALUE;\n        // 右半边不包含 nums[mid] 元素，最多可以到什么地方\n        // 计算以 mid+1 开始的最大的子数组的和\n        for (int i = mid + 1; i <= right; i++) {\n            sum += nums[i];\n            if (sum > rightSum) {\n                rightSum = sum;\n            }\n        }\n        return leftSum + rightSum;\n    }\n```\n\n\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；\n空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。\n\n\n\n\n\n\n\n","slug":"力扣热题100题-最大子数组和","published":1,"updated":"2023-02-09T15:46:25.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp02000is66vg5sica9l","content":"<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]\n输出：6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [5,4,-1,7,8]\n输出：23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p>\n<p>进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/maximum-subarray\">https://leetcode.cn/problems/maximum-subarray</a></p>\n<p>暴力解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n    暴力解法：\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                temp <span class=\"token operator\">=</span> temp <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>力扣显示超时，思考如何优化算法的时间复杂度。</p>\n<p>\u0003\u0003动态规划版本一：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        res <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>动态规划版本二：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 动态规划\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//f(n) = max(f(n-1) + nums[n], nums[n]);</span>\n        <span class=\"token comment\">// 前置的和</span>\n        <span class=\"token keyword\">int</span> preSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 最大值，所有的前置和的最大值。</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            preSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>preSum <span class=\"token operator\">+</span> num<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> preSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>动态规划的方程必须要理解一个点：</p>\n<p><strong>子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。</strong></p>\n<p>方法二：分治法</p>\n<p>连续子序列的最大和主要由这三部分子区间里元素的最大和得到：</p>\n<ul>\n<li><p>第 1 部分：子区间 [left, mid]；</p>\n</li>\n<li><p>第 2 部分：子区间 [mid + 1, right]；</p>\n</li>\n<li><p>第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</p>\n</li>\n</ul>\n<p>对这三个部分求最大值即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//- 第 1 部分：子区间 [left, mid]；</span>\n<span class=\"token comment\">//- 第 2 部分：子区间 [mid + 1, right]；</span>\n<span class=\"token comment\">//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</span>\n    <span class=\"token comment\">//最大子数组和</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 一定会包含 nums[mid] 这个元素</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leftSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 左半边包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 走到最边界，看看最值是什么</span>\n        <span class=\"token comment\">// 计算以 mid 结尾的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> leftSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leftSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 右半边不包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 计算以 mid+1 开始的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> rightSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rightSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> leftSum <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；<br>空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]\n输出：6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [5,4,-1,7,8]\n输出：23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p>\n<p>进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/maximum-subarray\">https://leetcode.cn/problems/maximum-subarray</a></p>\n<p>暴力解法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n    暴力解法：\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                temp <span class=\"token operator\">=</span> temp <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>力扣显示超时，思考如何优化算法的时间复杂度。</p>\n<p>\u0003\u0003动态规划版本一：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//当前数加上一个大于0的数，肯定是大于当前数，否则就等于当前数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        res <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>动态规划版本二：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 动态规划\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//f(n) = max(f(n-1) + nums[n], nums[n]);</span>\n        <span class=\"token comment\">// 前置的和</span>\n        <span class=\"token keyword\">int</span> preSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 最大值，所有的前置和的最大值。</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            preSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>preSum <span class=\"token operator\">+</span> num<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> preSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>动态规划的方程必须要理解一个点：</p>\n<p><strong>子问题的描述还有不确定的地方这件事情叫做「有后效性」; 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。</strong></p>\n<p>方法二：分治法</p>\n<p>连续子序列的最大和主要由这三部分子区间里元素的最大和得到：</p>\n<ul>\n<li><p>第 1 部分：子区间 [left, mid]；</p>\n</li>\n<li><p>第 2 部分：子区间 [mid + 1, right]；</p>\n</li>\n<li><p>第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</p>\n</li>\n</ul>\n<p>对这三个部分求最大值即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//- 第 1 部分：子区间 [left, mid]；</span>\n<span class=\"token comment\">//- 第 2 部分：子区间 [mid + 1, right]；</span>\n<span class=\"token comment\">//- 第 3 部分：包含子区间 [mid , mid + 1] 的子区间，即 nums[mid] 与 nums[mid + 1] 一定会被选取。</span>\n    <span class=\"token comment\">//最大子数组和</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxSubArraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxCrossingSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 一定会包含 nums[mid] 这个元素</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leftSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 左半边包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 走到最边界，看看最值是什么</span>\n        <span class=\"token comment\">// 计算以 mid 结尾的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> leftSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leftSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightSum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 右半边不包含 nums[mid] 元素，最多可以到什么地方</span>\n        <span class=\"token comment\">// 计算以 mid+1 开始的最大的子数组的和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> rightSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rightSum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> leftSum <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>\u0003时间复杂度：O(N log N)，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；<br>空间复杂度：O(log N)，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。</p>\n"},{"title":"力扣热题100题-比特位计数","date":"2023-01-05T14:04:36.000Z","_content":"\n给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。\n\n示例 1：\n\n输入：n = 2\n输出：[0,1,1]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n示例 2：\n\n输入：n = 5\n输出：[0,1,1,2,1,2]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n\n提示：\n\n0 <= n <= 105\n\n\n进阶：\n\n很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？\n你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/counting-bits\n\n\n\n解答1：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = Integer.bitCount(i);\n        }\n        return result;\n    }\n}\n```\n\n使用Integer工具计算二进制中1的个数。\n\n但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？\n\n解法2：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = getOneNum(i);\n        }\n        return result;\n    }\n\n    /**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 & 0 = 01;\n    2 & 1 = 00\n    3 & 2 = 01\n     */\n    public int getOneNum(int i){\n        int count =0;\n        while(i > 0){\n            i = i&(i-1);\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n此算法的时间复杂度为：O(N log N)\n\n空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。\n\n思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&2 = 1  下一步要计算 1&0 但在此之前已经计算过1&0了，所有，可以减少这类计算的次数，由此得到解法3.\n\n解法3：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        int bigHight = 0;\n        for(int i =1;i<=n;i++){\n            bigHight = i&(i-1);\n            if(bigHight == 0){\n                result[i] = 0 + 1;\n            } else {\n                result[i] = result[bigHight] +1;\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(N)\n\n优化为：\n\n```\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =1;i<=n;i++){\n            result[i] = result[i&(i-1)] +1;\n        }\n        return result;\n    }\n}\n```\n\n\n\n赞👍🏻\n\n\n\n\n\n\n\n","source":"_posts/力扣热题100题-比特位计数.md","raw":"---\ntitle: 力扣热题100题-比特位计数\ndate: 2023-01-05 22:04:36\ntags:\n  - 二进制\n  - 算法\n  - 力扣热题100题\n---\n\n给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。\n\n示例 1：\n\n输入：n = 2\n输出：[0,1,1]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n示例 2：\n\n输入：n = 5\n输出：[0,1,1,2,1,2]\n解释：\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n\n提示：\n\n0 <= n <= 105\n\n\n进阶：\n\n很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？\n你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/counting-bits\n\n\n\n解答1：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = Integer.bitCount(i);\n        }\n        return result;\n    }\n}\n```\n\n使用Integer工具计算二进制中1的个数。\n\n但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？\n\n解法2：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =0;i<=n;i++){\n            result[i] = getOneNum(i);\n        }\n        return result;\n    }\n\n    /**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 & 0 = 01;\n    2 & 1 = 00\n    3 & 2 = 01\n     */\n    public int getOneNum(int i){\n        int count =0;\n        while(i > 0){\n            i = i&(i-1);\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n此算法的时间复杂度为：O(N log N)\n\n空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。\n\n思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&2 = 1  下一步要计算 1&0 但在此之前已经计算过1&0了，所有，可以减少这类计算的次数，由此得到解法3.\n\n解法3：\n\n```java\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        int bigHight = 0;\n        for(int i =1;i<=n;i++){\n            bigHight = i&(i-1);\n            if(bigHight == 0){\n                result[i] = 0 + 1;\n            } else {\n                result[i] = result[bigHight] +1;\n            }\n        }\n        return result;\n    }\n}\n```\n\n时间复杂度：O(N)\n\n优化为：\n\n```\nclass Solution {\n    public int[] countBits(int n) {\n        int [] result = new int[n+1];\n        for(int i =1;i<=n;i++){\n            result[i] = result[i&(i-1)] +1;\n        }\n        return result;\n    }\n}\n```\n\n\n\n赞👍🏻\n\n\n\n\n\n\n\n","slug":"力扣热题100题-比特位计数","published":1,"updated":"2023-02-09T15:46:25.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp02000ls66v8yqlgj6o","content":"<p>给你一个整数 n ，对于 0 &lt;&#x3D; i &lt;&#x3D; n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：[0,1,1]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>示例 2：</p>\n<p>输入：n &#x3D; 5<br>输出：[0,1,1,2,1,2]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>3 –&gt; 11<br>4 –&gt; 100<br>5 –&gt; 101</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; n &lt;&#x3D; 105</p>\n<p>进阶：</p>\n<p>很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？<br>你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/counting-bits\">https://leetcode.cn/problems/counting-bits</a></p>\n<p>解答1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用Integer工具计算二进制中1的个数。</p>\n<p>但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？</p>\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 &amp; 0 = 01;\n    2 &amp; 1 = 00\n    3 &amp; 2 = 01\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            i <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此算法的时间复杂度为：O(N log N)</p>\n<p>空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。</p>\n<p>思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&amp;2 &#x3D; 1  下一步要计算 1&amp;0 但在此之前已经计算过1&amp;0了，所有，可以减少这类计算的次数，由此得到解法3.</p>\n<p>解法3：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bigHight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            bigHight <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bigHight <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>bigHight<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)</p>\n<p>优化为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Solution &#123;\n    public int[] countBits(int n) &#123;\n        int [] result &#x3D; new int[n+1];\n        for(int i &#x3D;1;i&lt;&#x3D;n;i++)&#123;\n            result[i] &#x3D; result[i&amp;(i-1)] +1;\n        &#125;\n        return result;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>赞👍🏻</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你一个整数 n ，对于 0 &lt;&#x3D; i &lt;&#x3D; n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：[0,1,1]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>示例 2：</p>\n<p>输入：n &#x3D; 5<br>输出：[0,1,1,2,1,2]<br>解释：<br>0 –&gt; 0<br>1 –&gt; 1<br>2 –&gt; 10<br>3 –&gt; 11<br>4 –&gt; 100<br>5 –&gt; 101</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; n &lt;&#x3D; 105</p>\n<p>进阶：</p>\n<p>很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？<br>你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/counting-bits\">https://leetcode.cn/problems/counting-bits</a></p>\n<p>解答1：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用Integer工具计算二进制中1的个数。</p>\n<p>但是显而易见，这种就是占了使用工具的便宜，那么如果是自己思考，又是怎么处理呢？</p>\n<p>解法2：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n    * 获取二进制中1的个数\n    当i为1 时，结果为：1\n    当i为2时，结果为：1\n    当i为3时，结果为：2\n    1 &amp; 0 = 01;\n    2 &amp; 1 = 00\n    3 &amp; 2 = 01\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOneNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            i <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此算法的时间复杂度为：O(N log N)</p>\n<p>空间复杂度：O(1)。除了返回的数组以外，空间复杂度为常数。</p>\n<p>思考：上面的算法可知在循环的过程中其实有一些重复的动作，例如：计算3的时候，3&amp;2 &#x3D; 1  下一步要计算 1&amp;0 但在此之前已经计算过1&amp;0了，所有，可以减少这类计算的次数，由此得到解法3.</p>\n<p>解法3：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bigHight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            bigHight <span class=\"token operator\">=</span> i<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bigHight <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>bigHight<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(N)</p>\n<p>优化为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Solution &#123;\n    public int[] countBits(int n) &#123;\n        int [] result &#x3D; new int[n+1];\n        for(int i &#x3D;1;i&lt;&#x3D;n;i++)&#123;\n            result[i] &#x3D; result[i&amp;(i-1)] +1;\n        &#125;\n        return result;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>赞👍🏻</p>\n"},{"title":"力扣热题100题-有效的括号","date":"2022-06-18T04:02:26.000Z","_content":"\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n\n示例 1：\n\n```\n输入：s = \"()\"\n输出：true\n```\n\n示例 2：\n\n```\n输入：s = \"()[]{}\"\n输出：true\n```\n\n示例 3：\n\n```\n输入：s = \"(]\"\n输出：false\n```\n\n示例 4：\n\n```\n输入：s = \"([)]\"\n输出：false\n```\n\n示例 5：\n\n```\n输入：s = \"{[]}\"\n输出：true\n```\n\n\n提示：\n\n1 <= s.length <= 104\ns 仅由括号 '()[]{}' 组成\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/valid-parentheses\n\n解答：\n\n```java\npublic boolean isValid(String s) {\n        //借助栈\n        Deque<Character> stack = new ArrayDeque<Character>();\n        char[] charArray = s.toCharArray();\n        for(char c : charArray){\n            if('{' == c){\n                stack.push('}');\n            } else if ('(' == c){\n                stack.push(')');\n            } else if ('[' == c){\n                stack.push(']');\n            } else if (stack.isEmpty() || c != stack.pop()){\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n```\n\n时间复杂度：O(n) 空间复杂度O(n)\n","source":"_posts/力扣热题100题-有效的括号.md","raw":"---\ntitle: 力扣热题100题-有效的括号\ndate: 2022-06-18 12:02:26\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n\n示例 1：\n\n```\n输入：s = \"()\"\n输出：true\n```\n\n示例 2：\n\n```\n输入：s = \"()[]{}\"\n输出：true\n```\n\n示例 3：\n\n```\n输入：s = \"(]\"\n输出：false\n```\n\n示例 4：\n\n```\n输入：s = \"([)]\"\n输出：false\n```\n\n示例 5：\n\n```\n输入：s = \"{[]}\"\n输出：true\n```\n\n\n提示：\n\n1 <= s.length <= 104\ns 仅由括号 '()[]{}' 组成\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/valid-parentheses\n\n解答：\n\n```java\npublic boolean isValid(String s) {\n        //借助栈\n        Deque<Character> stack = new ArrayDeque<Character>();\n        char[] charArray = s.toCharArray();\n        for(char c : charArray){\n            if('{' == c){\n                stack.push('}');\n            } else if ('(' == c){\n                stack.push(')');\n            } else if ('[' == c){\n                stack.push(']');\n            } else if (stack.isEmpty() || c != stack.pop()){\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n```\n\n时间复杂度：O(n) 空间复杂度O(n)\n","slug":"力扣热题100题-有效的括号","published":1,"updated":"2023-02-09T15:46:25.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp05000ns66v4pwtgusn","content":"<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;(]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 4：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;([)]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 5：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;&#123;[]&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 仅由括号 ‘()[]{}’ 组成</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/valid-parentheses\">https://leetcode.cn/problems/valid-parentheses</a></p>\n<p>解答：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//借助栈</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#123;'</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'('</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'['</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">!=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度O(n)</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;(]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 4：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;([)]&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例 5：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;&#123;[]&#125;&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<p>提示：</p>\n<p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 仅由括号 ‘()[]{}’ 组成</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/valid-parentheses\">https://leetcode.cn/problems/valid-parentheses</a></p>\n<p>解答：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//借助栈</span>\n        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> charArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#123;'</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'('</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'['</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token char\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">!=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(n) 空间复杂度O(n)</p>\n"},{"title":"力扣热题100题-爬楼梯","date":"2022-06-22T16:05:30.000Z","_content":"\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n \n\n示例 1：\n\n输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。\n1. 1 阶 + 1 阶\n2. 2 阶\n示例 2：\n\n输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。\n1. 1 阶 + 1 阶 + 1 阶\n2. 1 阶 + 2 阶\n3. 2 阶 + 1 阶\n\n\n提示：\n\n1 <= n <= 45\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/climbing-stairs\n\n\n\n思路：\n\n找到规律：\n\nn = 2  结果为2\n\nn = 3  结果为3\n\nn = 4 结果为5\n\nn = 5 结果为8\n\n由此可以推导：f(n) = f(n-1) + f(n-2)\n\n```java\n//使用递归算法\npublic int climbStairs(int n) {\n        if(n == 2){\n            return 2;\n        }\n        if(n == 3){\n            return 3;\n        }\n        return climbStairs(n -1) + climbStairs (n -2);\n    }\n```\n\n提交效果为超时。\n\n怎么不使用递归算法呢？\n\n定义两个额外的元素，然后计算。\n\n```java\npublic int sum = 2;\n    public int pre = 1;\n    public int climbStairs(int n) {\n        if(n == 1){\n            return 1;\n        }\n        if(n == 2){\n            return 2;\n        }\n\n        for(int i = 3; i <= n; i++){\n            int temp = sum;\n            sum = sum + pre;\n            pre = temp;\n        }\n        return sum;\n    }\n```\n\n","source":"_posts/力扣热题100题-爬楼梯.md","raw":"---\ntitle: 力扣热题100题-爬楼梯\ndate: 2022-06-23 00:05:30\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n \n\n示例 1：\n\n输入：n = 2\n输出：2\n解释：有两种方法可以爬到楼顶。\n1. 1 阶 + 1 阶\n2. 2 阶\n示例 2：\n\n输入：n = 3\n输出：3\n解释：有三种方法可以爬到楼顶。\n1. 1 阶 + 1 阶 + 1 阶\n2. 1 阶 + 2 阶\n3. 2 阶 + 1 阶\n\n\n提示：\n\n1 <= n <= 45\n\n来源：力扣（LeetCode）链接：https://leetcode.cn/problems/climbing-stairs\n\n\n\n思路：\n\n找到规律：\n\nn = 2  结果为2\n\nn = 3  结果为3\n\nn = 4 结果为5\n\nn = 5 结果为8\n\n由此可以推导：f(n) = f(n-1) + f(n-2)\n\n```java\n//使用递归算法\npublic int climbStairs(int n) {\n        if(n == 2){\n            return 2;\n        }\n        if(n == 3){\n            return 3;\n        }\n        return climbStairs(n -1) + climbStairs (n -2);\n    }\n```\n\n提交效果为超时。\n\n怎么不使用递归算法呢？\n\n定义两个额外的元素，然后计算。\n\n```java\npublic int sum = 2;\n    public int pre = 1;\n    public int climbStairs(int n) {\n        if(n == 1){\n            return 1;\n        }\n        if(n == 2){\n            return 2;\n        }\n\n        for(int i = 3; i <= n; i++){\n            int temp = sum;\n            sum = sum + pre;\n            pre = temp;\n        }\n        return sum;\n    }\n```\n\n","slug":"力扣热题100题-爬楼梯","published":1,"updated":"2023-02-09T15:46:25.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp05000qs66v45ufc6xr","content":"<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶<br>示例 2：</li>\n</ol>\n<p>输入：n &#x3D; 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ol>\n<p>提示：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 45</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/climbing-stairs\">https://leetcode.cn/problems/climbing-stairs</a></p>\n<p>思路：</p>\n<p>找到规律：</p>\n<p>n &#x3D; 2  结果为2</p>\n<p>n &#x3D; 3  结果为3</p>\n<p>n &#x3D; 4 结果为5</p>\n<p>n &#x3D; 5 结果为8</p>\n<p>由此可以推导：f(n) &#x3D; f(n-1) + f(n-2)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用递归算法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> climbStairs <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>提交效果为超时。</p>\n<p>怎么不使用递归算法呢？</p>\n<p>定义两个额外的元素，然后计算。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> pre<span class=\"token punctuation\">;</span>\n            pre <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>示例 1：</p>\n<p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶<br>示例 2：</li>\n</ol>\n<p>输入：n &#x3D; 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ol>\n<p>提示：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 45</p>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode.cn/problems/climbing-stairs\">https://leetcode.cn/problems/climbing-stairs</a></p>\n<p>思路：</p>\n<p>找到规律：</p>\n<p>n &#x3D; 2  结果为2</p>\n<p>n &#x3D; 3  结果为3</p>\n<p>n &#x3D; 4 结果为5</p>\n<p>n &#x3D; 5 结果为8</p>\n<p>由此可以推导：f(n) &#x3D; f(n-1) + f(n-2)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用递归算法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> climbStairs <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>提交效果为超时。</p>\n<p>怎么不使用递归算法呢？</p>\n<p>定义两个额外的元素，然后计算。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> pre<span class=\"token punctuation\">;</span>\n            pre <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"力扣热题100题-汉明距离","date":"2023-01-30T14:42:15.000Z","_content":"\n两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。\n\n给你两个整数 x 和 y，计算并返回它们之间的汉明距离。\n\n示例 1：\n\n输入：x = 1, y = 4\n输出：2\n解释：\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\n上面的箭头指出了对应二进制位不同的位置。\n示例 2：\n\n输入：x = 3, y = 1\n输出：1\n\n\n提示：\n\n0 <= x, y <= 2$31$ - 1\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/hamming-distance\n\n\n\n使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        //计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            count += z & 1;\n            z = z >> 1;\n        }\n        return count;\n    }\n}\n```\n\n时间复杂度：O(log(C))  C 表示是n的二进制位数\n\n不使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        \n        int count = 0;\n\n        while(x != 0 || y != 0){\n            if((x&1) != (y&1)){\n                count++;\n            }\n            x=x>>1;\n            y=y>>1;\n        }\n        return count;\n    }\n}\n```\n\n\n\n使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        return Integer.bitCount(x ^ y);\n    }\n}\n```\n\n\n\n来自官方：Brian Kernighan 算法\n\n（`n & (n - 1)`可以把最右边的1变为0）！！！！！\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            z = z&(z-1); // n 同 n-1做与运算是为了消除最右边的1\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n","source":"_posts/力扣热题100题-汉明距离.md","raw":"---\ntitle: 力扣热题100题-汉明距离\ndate: 2023-01-30 22:42:15\ntags:\n  - 二进制\n  - 算法\n  - 力扣热题100题\n---\n\n两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。\n\n给你两个整数 x 和 y，计算并返回它们之间的汉明距离。\n\n示例 1：\n\n输入：x = 1, y = 4\n输出：2\n解释：\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\n上面的箭头指出了对应二进制位不同的位置。\n示例 2：\n\n输入：x = 3, y = 1\n输出：1\n\n\n提示：\n\n0 <= x, y <= 2$31$ - 1\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/hamming-distance\n\n\n\n使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        //计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            count += z & 1;\n            z = z >> 1;\n        }\n        return count;\n    }\n}\n```\n\n时间复杂度：O(log(C))  C 表示是n的二进制位数\n\n不使用异或的方式：\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        \n        int count = 0;\n\n        while(x != 0 || y != 0){\n            if((x&1) != (y&1)){\n                count++;\n            }\n            x=x>>1;\n            y=y>>1;\n        }\n        return count;\n    }\n}\n```\n\n\n\n使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        return Integer.bitCount(x ^ y);\n    }\n}\n```\n\n\n\n来自官方：Brian Kernighan 算法\n\n（`n & (n - 1)`可以把最右边的1变为0）！！！！！\n\n```java\nclass Solution {\n    public int hammingDistance(int x, int y) {\n        //如果两个值相等，则汉明距离为0\n        if(x == y){\n            return 0;\n        }\n        int z = x ^ y;\n        int count = 0;\n        while(z != 0){\n            z = z&(z-1); // n 同 n-1做与运算是为了消除最右边的1\n            count++;\n        }\n        return count;\n    }\n}\n```\n\n","slug":"力扣热题100题-汉明距离","published":1,"updated":"2023-02-09T15:46:25.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp05000ss66v13e5emz9","content":"<p>两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。</p>\n<p>给你两个整数 x 和 y，计算并返回它们之间的汉明距离。</p>\n<p>示例 1：</p>\n<p>输入：x &#x3D; 1, y &#x3D; 4<br>输出：2<br>解释：<br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>       ↑   ↑<br>上面的箭头指出了对应二进制位不同的位置。<br>示例 2：</p>\n<p>输入：x &#x3D; 3, y &#x3D; 1<br>输出：1</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; x, y &lt;&#x3D; 2$31$ - 1</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/hamming-distance\">https://leetcode.cn/problems/hamming-distance</a></p>\n<p>使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            count <span class=\"token operator\">+=</span> z <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            z <span class=\"token operator\">=</span> z <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(log(C))  C 表示是n的二进制位数</p>\n<p>不使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x<span class=\"token operator\">=</span>x<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">=</span>y<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>来自官方：Brian Kernighan 算法</p>\n<p>（<code>n &amp; (n - 1)</code>可以把最右边的1变为0）！！！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            z <span class=\"token operator\">=</span> z<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n 同 n-1做与运算是为了消除最右边的1</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。</p>\n<p>给你两个整数 x 和 y，计算并返回它们之间的汉明距离。</p>\n<p>示例 1：</p>\n<p>输入：x &#x3D; 1, y &#x3D; 4<br>输出：2<br>解释：<br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>       ↑   ↑<br>上面的箭头指出了对应二进制位不同的位置。<br>示例 2：</p>\n<p>输入：x &#x3D; 3, y &#x3D; 1<br>输出：1</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; x, y &lt;&#x3D; 2$31$ - 1</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/hamming-distance\">https://leetcode.cn/problems/hamming-distance</a></p>\n<p>使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//计算得到异或的结果,也就是z的二进制中的1的个数，就是其对应的汉明距离</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            count <span class=\"token operator\">+=</span> z <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            z <span class=\"token operator\">=</span> z <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度：O(log(C))  C 表示是n的二进制位数</p>\n<p>不使用异或的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            x<span class=\"token operator\">=</span>x<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            y<span class=\"token operator\">=</span>y<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>使用工具类：（一般情况下工具类记不住，还是掌握前面两种比较实惠）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>来自官方：Brian Kernighan 算法</p>\n<p>（<code>n &amp; (n - 1)</code>可以把最右边的1变为0）！！！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hammingDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//如果两个值相等，则汉明距离为0</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">^</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            z <span class=\"token operator\">=</span> z<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n 同 n-1做与运算是为了消除最右边的1</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"复杂度分析","date":"2022-06-16T15:42:17.000Z","_content":"\n事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。\n\n为什么还需要对算法本身进行时间和复杂度分析呢？\n\n1. 测试结果非常依赖测试环境\n2. 测试结果受数据规模的影响很大\n\n因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。\n\n## 时间复杂度\n\n大O时间复杂度表示法（简称时间复杂度）：T(n)= O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。\n\n例子：假设一行代码执行一次需要1个unit_time。\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个代码的需要的时间为：T(n)= （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。\n\n小方法：\n\n1. 只关注循环执行次数最多的一段代码\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\n\n![img](https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70)\n\n| 排序法     | 最差时间分析 | 平均时间复杂度 | 稳定度 | 空间复杂度    |\n| ---------- | ------------ | -------------- | ------ | ------------- |\n| 冒泡排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 快速排序   | O(n2)        | O(n*log2n)     | 不稳定 | O(log2n)~O(n) |\n| 选择排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 二叉树排序 | O(n2)        | O(n*log2n)     | 不一顶 | O(n)          |\n| 插入排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 堆排序     | O(n*log2n)   | O(n*log2n)     | 不稳定 | O(1)          |\n| 希尔排序   | O            | O              | 不稳定 | O(1)          |\n\n\n\n简单理解下：什么情况下是O(logn)\n\n```java\ni=1;\n while (i <= n)  {\n   i = i * 2;\n }\n```\n\n\n\n## 空间复杂度分析\n\n简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。\n\n**需要看代码申请了多大的占用空间**，比如：\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个空间复杂度是O(1)\n\n我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。\n\n\n\n## 时间复杂度分析进阶\n\n### 最好、最坏情况时间复杂度\n\n```java\npublic int find(int[] nums,int x) {\n    int n = nums.length;\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)\n\n### 平均时间复杂度\n\n大多数时间，使用一个复杂度就可以了。\n\n平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。\n\n### 均摊时间复杂度\n\n```\n/**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **/\n // array表示一个长度为n的数组\n // 代码中的array.length就等于n\n int[] array = new int[n];\n int count = 0;\n \n // 会有程序不断调用 insert() 方法\n void insert(int val) {\n    if (count == array.length) {\n       int sum = 0;\n       for (int i = 0; i < array.length; ++i) {\n          sum = sum + array[i];\n       }\n       array[0] = sum;\n       count = 1;\n    }\n\n    array[count] = val;\n    ++count;\n }\n\n```\n\n继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。\n","source":"_posts/复杂度分析.md","raw":"---\ntitle: 复杂度分析\ndate: 2022-06-16 23:42:17\ntags:\n  - 复杂度分析\n  - 算法\n---\n\n事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。\n\n为什么还需要对算法本身进行时间和复杂度分析呢？\n\n1. 测试结果非常依赖测试环境\n2. 测试结果受数据规模的影响很大\n\n因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。\n\n## 时间复杂度\n\n大O时间复杂度表示法（简称时间复杂度）：T(n)= O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。\n\n例子：假设一行代码执行一次需要1个unit_time。\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个代码的需要的时间为：T(n)= （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。\n\n小方法：\n\n1. 只关注循环执行次数最多的一段代码\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\n\n![img](https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70)\n\n| 排序法     | 最差时间分析 | 平均时间复杂度 | 稳定度 | 空间复杂度    |\n| ---------- | ------------ | -------------- | ------ | ------------- |\n| 冒泡排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 快速排序   | O(n2)        | O(n*log2n)     | 不稳定 | O(log2n)~O(n) |\n| 选择排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 二叉树排序 | O(n2)        | O(n*log2n)     | 不一顶 | O(n)          |\n| 插入排序   | O(n2)        | O(n2)          | 稳定   | O(1)          |\n| 堆排序     | O(n*log2n)   | O(n*log2n)     | 不稳定 | O(1)          |\n| 希尔排序   | O            | O              | 不稳定 | O(1)          |\n\n\n\n简单理解下：什么情况下是O(logn)\n\n```java\ni=1;\n while (i <= n)  {\n   i = i * 2;\n }\n```\n\n\n\n## 空间复杂度分析\n\n简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。\n\n**需要看代码申请了多大的占用空间**，比如：\n\n```java\npublic int twoSum(int[] nums) {\n        int n = nums.length;\n  \t\t\tint sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                sum = nums[i] + nums[j];\n            }\n        }\n        return sum;\n    }\n```\n\n这个空间复杂度是O(1)\n\n我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。\n\n\n\n## 时间复杂度分析进阶\n\n### 最好、最坏情况时间复杂度\n\n```java\npublic int find(int[] nums,int x) {\n    int n = nums.length;\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] == x){\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)\n\n### 平均时间复杂度\n\n大多数时间，使用一个复杂度就可以了。\n\n平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。\n\n### 均摊时间复杂度\n\n```\n/**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **/\n // array表示一个长度为n的数组\n // 代码中的array.length就等于n\n int[] array = new int[n];\n int count = 0;\n \n // 会有程序不断调用 insert() 方法\n void insert(int val) {\n    if (count == array.length) {\n       int sum = 0;\n       for (int i = 0; i < array.length; ++i) {\n          sum = sum + array[i];\n       }\n       array[0] = sum;\n       count = 1;\n    }\n\n    array[count] = val;\n    ++count;\n }\n\n```\n\n继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。\n","slug":"复杂度分析","published":1,"updated":"2023-02-09T15:46:25.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp09001ps66vfiet5o3d","content":"<p>事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。</p>\n<p>为什么还需要对算法本身进行时间和复杂度分析呢？</p>\n<ol>\n<li>测试结果非常依赖测试环境</li>\n<li>测试结果受数据规模的影响很大</li>\n</ol>\n<p>因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>大O时间复杂度表示法（简称时间复杂度）：T(n)&#x3D; O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。</p>\n<p>例子：假设一行代码执行一次需要1个unit_time。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个代码的需要的时间为：T(n)&#x3D; （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。</p>\n<p>小方法：</p>\n<ol>\n<li>只关注循环执行次数最多的一段代码</li>\n<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>排序法</th>\n<th>最差时间分析</th>\n<th>平均时间复杂度</th>\n<th>稳定度</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(log2n)~O(n)</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>二叉树排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不一顶</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(n*log2n)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O</td>\n<td>O</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n</tbody></table>\n<p>简单理解下：什么情况下是O(logn)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n   i <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。</p>\n<p><strong>需要看代码申请了多大的占用空间</strong>，比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个空间复杂度是O(1)</p>\n<p>我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。</p>\n<h2 id=\"时间复杂度分析进阶\"><a href=\"#时间复杂度分析进阶\" class=\"headerlink\" title=\"时间复杂度分析进阶\"></a>时间复杂度分析进阶</h2><h3 id=\"最好、最坏情况时间复杂度\"><a href=\"#最好、最坏情况时间复杂度\" class=\"headerlink\" title=\"最好、最坏情况时间复杂度\"></a>最好、最坏情况时间复杂度</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)</p>\n<h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3><p>大多数时间，使用一个复杂度就可以了。</p>\n<p>平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。</p>\n<h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **&#x2F;\n &#x2F;&#x2F; array表示一个长度为n的数组\n &#x2F;&#x2F; 代码中的array.length就等于n\n int[] array &#x3D; new int[n];\n int count &#x3D; 0;\n \n &#x2F;&#x2F; 会有程序不断调用 insert() 方法\n void insert(int val) &#123;\n    if (count &#x3D;&#x3D; array.length) &#123;\n       int sum &#x3D; 0;\n       for (int i &#x3D; 0; i &lt; array.length; ++i) &#123;\n          sum &#x3D; sum + array[i];\n       &#125;\n       array[0] &#x3D; sum;\n       count &#x3D; 1;\n    &#125;\n\n    array[count] &#x3D; val;\n    ++count;\n &#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>事后统计法：把代码跑一遍，通过监控，就得到算法的执行时间和占用的内存大小。</p>\n<p>为什么还需要对算法本身进行时间和复杂度分析呢？</p>\n<ol>\n<li>测试结果非常依赖测试环境</li>\n<li>测试结果受数据规模的影响很大</li>\n</ol>\n<p>因此需要通过一个不用具体的测试数据来测试，就可以粗略的估计算法的执行效率的方法。就是时间和空间复杂度。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>大O时间复杂度表示法（简称时间复杂度）：T(n)&#x3D; O( f(n) ) 解释：T(n)是代码执行时间, f(n)是每行代码执行的总次数 ，O代表代码的执行时间T(n)与f(n)成正比。</p>\n<p>例子：假设一行代码执行一次需要1个unit_time。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个代码的需要的时间为：T(n)&#x3D; （2n^2 + 2n + 3），当n接近无穷大时，我们只需要关心n^2了，所以这个代码的时间复杂度为O(n^2)。</p>\n<p>小方法：</p>\n<ol>\n<li>只关注循环执行次数最多的一段代码</li>\n<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210414152828324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R6enQwMQ==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>排序法</th>\n<th>最差时间分析</th>\n<th>平均时间复杂度</th>\n<th>稳定度</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(log2n)~O(n)</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>二叉树排序</td>\n<td>O(n2)</td>\n<td>O(n*log2n)</td>\n<td>不一顶</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td>O(n2)</td>\n<td>稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(n*log2n)</td>\n<td>O(n*log2n)</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O</td>\n<td>O</td>\n<td>不稳定</td>\n<td>O(1)</td>\n</tr>\n</tbody></table>\n<p>简单理解下：什么情况下是O(logn)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n   i <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>简介：空间复杂度全称为渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。</p>\n<p><strong>需要看代码申请了多大的占用空间</strong>，比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  \t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个空间复杂度是O(1)</p>\n<p>我们常见的空间复杂度就是O(1)、O(n)、O(n^2)。像这种O(n*log2n)平常用不到，掌握之前的足够。</p>\n<h2 id=\"时间复杂度分析进阶\"><a href=\"#时间复杂度分析进阶\" class=\"headerlink\" title=\"时间复杂度分析进阶\"></a>时间复杂度分析进阶</h2><h3 id=\"最好、最坏情况时间复杂度\"><a href=\"#最好、最坏情况时间复杂度\" class=\"headerlink\" title=\"最好、最坏情况时间复杂度\"></a>最好、最坏情况时间复杂度</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码在最好情况下时间复杂度为O(1) ，最坏情况下时间复杂度为O(n)</p>\n<h3 id=\"平均时间复杂度\"><a href=\"#平均时间复杂度\" class=\"headerlink\" title=\"平均时间复杂度\"></a>平均时间复杂度</h3><p>大多数时间，使用一个复杂度就可以了。</p>\n<p>平均时间复杂度分析法需要计算每一个可能出现的可能及加上一部分概率。</p>\n<h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * 代码实现了往数组中不断插入数据。当数组满了，就将所有元素之和赋值给首位。如此周而复始。\n **&#x2F;\n &#x2F;&#x2F; array表示一个长度为n的数组\n &#x2F;&#x2F; 代码中的array.length就等于n\n int[] array &#x3D; new int[n];\n int count &#x3D; 0;\n \n &#x2F;&#x2F; 会有程序不断调用 insert() 方法\n void insert(int val) &#123;\n    if (count &#x3D;&#x3D; array.length) &#123;\n       int sum &#x3D; 0;\n       for (int i &#x3D; 0; i &lt; array.length; ++i) &#123;\n          sum &#x3D; sum + array[i];\n       &#125;\n       array[0] &#x3D; sum;\n       count &#x3D; 1;\n    &#125;\n\n    array[count] &#x3D; val;\n    ++count;\n &#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。</p>\n"},{"title":"COLA架构","date":"2022-09-24T13:12:24.000Z","_content":"\n<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\ncola架构\n\n\n\n","source":"_posts/架构知识.md","raw":"---\ntitle: COLA架构\ndate: 2022-09-24 21:12:24\ntags:\n  - 架构\n---\n\n<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\ncola架构\n\n\n\n","slug":"架构知识","published":1,"updated":"2023-02-09T15:46:25.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp0a001qs66vbjbz6a1b","content":"<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>cola架构</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<img src=\"https://camo.githubusercontent.com/7794e7335aa77e2a271b7989c8eb24cd5c5f3cd8efa77aebd71b858524051573/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f36353439323330633637323334343866623361623531636137343832396538302e706e67\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>cola架构</p>\n"},{"title":"常用linux命令","date":"2022-06-10T06:40:11.000Z","_content":"\n排查当前有哪些进程在使用某个端口\n![img.png](/img/img.png)\n\n``` shell\nlsof -i:4000\n```\n![img_1.png](/img/img_1.png)\n``` shell\nkill -9 4000\n```\n\n\n","source":"_posts/常用linux命令.md","raw":"---\ntitle: 常用linux命令\ndate: 2022-06-10 14:40:11\ntags: linux\n---\n\n排查当前有哪些进程在使用某个端口\n![img.png](/img/img.png)\n\n``` shell\nlsof -i:4000\n```\n![img_1.png](/img/img_1.png)\n``` shell\nkill -9 4000\n```\n\n\n","slug":"常用linux命令","published":1,"updated":"2023-02-09T15:46:25.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp0b001ss66v2wtecpz4","content":"<p>排查当前有哪些进程在使用某个端口<br><img src=\"/img/img.png\" alt=\"img.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">lsof</span> -i:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/img_1.png\" alt=\"img_1.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -9 <span class=\"token number\">4000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>排查当前有哪些进程在使用某个端口<br><img src=\"/img/img.png\" alt=\"img.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">lsof</span> -i:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/img/img_1.png\" alt=\"img_1.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> -9 <span class=\"token number\">4000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n"},{"title":"力扣热题100题- 移动零","date":"2023-02-09T15:52:00.000Z","_content":"\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。\n\n示例 1:\n\n输入: nums = [0,1,0,3,12]\n输出: [1,3,12,0,0]\n示例 2:\n\n输入: nums = [0]\n输出: [0]\n\n\n提示:\n\n1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1\n\n\n进阶：你能尽量减少完成的操作次数吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/move-zeroes\n\n\n\n想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）\n\n我觉得自己没有想清楚的点在于\n\n1.双指针到底指向的是什么?\n\n```java\nclass Solution {\n    //双指针思路\n    //双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。\n\n    //指针x 是已处理好的尾部，y是待处理的数字的头部\n    //这里简单解释下什么叫做处理？\n    //处理的逻辑是指：将非0数字往前移动\n    public void moveZeroes(int[] nums) {\n        int n = nums.length ,x = 0 ,y = 0;\n\n        //循环结束条件：没有待处理数字即可\n        while(y < n){\n            //如果发现待处理的数字为不等于0\n            if(nums[y] != 0){\n                //交换已处理好的尾部的和待处理数字的头部的值。\n                swap(nums,x,y);\n                //交换完之后，就把已处理的尾部数字+1\n                x++;\n            }\n            //待处理数字头部+1\n            y++;\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n想法2：循环一次\n\n```java\nclass Solution {\n    //思路，设置坐标，x标记非0的结束位置\n    public void moveZeroes(int[] nums) {\n        int x = 0;\n        for(int i = 0; i < nums.length ; i++){\n            if(nums[i] != 0){\n                swap(nums,i,x);\n                x++;\n            }\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n其实不难发现，两者基本一致。\n","source":"_posts/力扣热题100题-移动零.md","raw":"---\ntitle: 力扣热题100题- 移动零\ndate: 2023-02-09 23:52:00\ntags:\n  - 算法\n  - 力扣热题100题\n---\n\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。\n\n示例 1:\n\n输入: nums = [0,1,0,3,12]\n输出: [1,3,12,0,0]\n示例 2:\n\n输入: nums = [0]\n输出: [0]\n\n\n提示:\n\n1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1\n\n\n进阶：你能尽量减少完成的操作次数吗？\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/move-zeroes\n\n\n\n想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）\n\n我觉得自己没有想清楚的点在于\n\n1.双指针到底指向的是什么?\n\n```java\nclass Solution {\n    //双指针思路\n    //双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。\n\n    //指针x 是已处理好的尾部，y是待处理的数字的头部\n    //这里简单解释下什么叫做处理？\n    //处理的逻辑是指：将非0数字往前移动\n    public void moveZeroes(int[] nums) {\n        int n = nums.length ,x = 0 ,y = 0;\n\n        //循环结束条件：没有待处理数字即可\n        while(y < n){\n            //如果发现待处理的数字为不等于0\n            if(nums[y] != 0){\n                //交换已处理好的尾部的和待处理数字的头部的值。\n                swap(nums,x,y);\n                //交换完之后，就把已处理的尾部数字+1\n                x++;\n            }\n            //待处理数字头部+1\n            y++;\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n想法2：循环一次\n\n```java\nclass Solution {\n    //思路，设置坐标，x标记非0的结束位置\n    public void moveZeroes(int[] nums) {\n        int x = 0;\n        for(int i = 0; i < nums.length ; i++){\n            if(nums[i] != 0){\n                swap(nums,i,x);\n                x++;\n            }\n        }\n    }\n\n    private void swap(int[] nums,int start,int end){\n        int temp = nums[start];\n        nums[start] = nums[end] ;\n        nums[end] = temp;\n    }\n}\n```\n\n\n\n其实不难发现，两者基本一致。\n","slug":"力扣热题100题-移动零","published":1,"updated":"2023-02-15T14:53:43.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5snp0b001ts66vd9ua6x8d","content":"<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p>\n<p>示例 1:</p>\n<p>输入: nums &#x3D; [0,1,0,3,12]<br>输出: [1,3,12,0,0]<br>示例 2:</p>\n<p>输入: nums &#x3D; [0]<br>输出: [0]</p>\n<p>提示:</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1</p>\n<p>进阶：你能尽量减少完成的操作次数吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/move-zeroes\">https://leetcode.cn/problems/move-zeroes</a></p>\n<p>想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）</p>\n<p>我觉得自己没有想清楚的点在于</p>\n<p>1.双指针到底指向的是什么?</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//双指针思路</span>\n    <span class=\"token comment\">//双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。</span>\n\n    <span class=\"token comment\">//指针x 是已处理好的尾部，y是待处理的数字的头部</span>\n    <span class=\"token comment\">//这里简单解释下什么叫做处理？</span>\n    <span class=\"token comment\">//处理的逻辑是指：将非0数字往前移动</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">,</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//循环结束条件：没有待处理数字即可</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果发现待处理的数字为不等于0</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//交换已处理好的尾部的和待处理数字的头部的值。</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//交换完之后，就把已处理的尾部数字+1</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//待处理数字头部+1</span>\n            y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>想法2：循环一次</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//思路，设置坐标，x标记非0的结束位置</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>其实不难发现，两者基本一致。</p>\n","site":{"data":{"friends":[{"avatar":"https://chen-shang.github.io/medias/logo.png","name":"这么些年的技术总结","introduction":"无限可能","url":"https://chen-shang.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p>\n<p>示例 1:</p>\n<p>输入: nums &#x3D; [0,1,0,3,12]<br>输出: [1,3,12,0,0]<br>示例 2:</p>\n<p>输入: nums &#x3D; [0]<br>输出: [0]</p>\n<p>提示:</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1</p>\n<p>进阶：你能尽量减少完成的操作次数吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/move-zeroes\">https://leetcode.cn/problems/move-zeroes</a></p>\n<p>想法1：双指针（我自己的想法，但是没有写出来，只能抄袭官方的）</p>\n<p>我觉得自己没有想清楚的点在于</p>\n<p>1.双指针到底指向的是什么?</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//双指针思路</span>\n    <span class=\"token comment\">//双指针思路的重点是找到指针到底指的是什么？以及怎么将指针挪动。</span>\n\n    <span class=\"token comment\">//指针x 是已处理好的尾部，y是待处理的数字的头部</span>\n    <span class=\"token comment\">//这里简单解释下什么叫做处理？</span>\n    <span class=\"token comment\">//处理的逻辑是指：将非0数字往前移动</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">,</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//循环结束条件：没有待处理数字即可</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//如果发现待处理的数字为不等于0</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//交换已处理好的尾部的和待处理数字的头部的值。</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//交换完之后，就把已处理的尾部数字+1</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//待处理数字头部+1</span>\n            y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>想法2：循环一次</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//思路，设置坐标，x标记非0的结束位置</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>其实不难发现，两者基本一致。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cle5snozv0001s66vb2x51713","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp02000hs66vf0rla9s7"},{"post_id":"cle5snozv0001s66vb2x51713","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp02000js66vasxa88ua"},{"post_id":"cle5snp00000es66vb4ov6y07","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp04000ms66v4ws8ffko"},{"post_id":"cle5snp00000es66vb4ov6y07","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp05000os66vaaxw5myg"},{"post_id":"cle5snp01000gs66v1hgdfvt7","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp05000rs66vdls0gvih"},{"post_id":"cle5snp01000gs66v1hgdfvt7","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp05000ts66vhp0f2bh4"},{"post_id":"cle5snozw0003s66v2beahrbp","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp06000vs66vhbcu3v0o"},{"post_id":"cle5snozw0003s66v2beahrbp","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp06000ws66vh0lo7h0p"},{"post_id":"cle5snp05000ns66v4pwtgusn","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp06000ys66vggjgepz7"},{"post_id":"cle5snp05000ns66v4pwtgusn","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp06000zs66va1aee3dw"},{"post_id":"cle5snp05000qs66v45ufc6xr","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp060011s66v3y8zduk0"},{"post_id":"cle5snp05000qs66v45ufc6xr","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp060012s66v3at908ur"},{"post_id":"cle5snozy0006s66v4hjahg5s","tag_id":"cle5snp05000ps66v0ig451ah","_id":"cle5snp060014s66v0tm1hgkb"},{"post_id":"cle5snozz0008s66v934igzui","tag_id":"cle5snp05000us66v7n2bc6o4","_id":"cle5snp060015s66v30bu3t4r"},{"post_id":"cle5snozz0008s66v934igzui","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp060017s66vhlx47ys3"},{"post_id":"cle5snozz000as66vakffggsb","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp060018s66v2d739mkw"},{"post_id":"cle5snozz000as66vakffggsb","tag_id":"cle5snp06000xs66v3r1h9hy1","_id":"cle5snp060019s66v4n32bzht"},{"post_id":"cle5snozz000as66vakffggsb","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp06001bs66v51b817zl"},{"post_id":"cle5snp00000ds66v20b1429n","tag_id":"cle5snp05000us66v7n2bc6o4","_id":"cle5snp06001cs66vdkxo5zpt"},{"post_id":"cle5snp00000ds66v20b1429n","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp07001es66v7zfd5y0o"},{"post_id":"cle5snp00000ds66v20b1429n","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp07001fs66vgjy21mwc"},{"post_id":"cle5snp02000is66vg5sica9l","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp07001gs66vac8y5vyd"},{"post_id":"cle5snp02000is66vg5sica9l","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp07001hs66vetrg4bz2"},{"post_id":"cle5snp02000is66vg5sica9l","tag_id":"cle5snp060016s66v18j71i0j","_id":"cle5snp07001is66vhl4wd0t8"},{"post_id":"cle5snp02000ls66v8yqlgj6o","tag_id":"cle5snp06001as66v29w456t2","_id":"cle5snp07001js66v25300a3t"},{"post_id":"cle5snp02000ls66v8yqlgj6o","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp07001ks66v291jdrrw"},{"post_id":"cle5snp02000ls66v8yqlgj6o","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp07001ls66v05njcvy2"},{"post_id":"cle5snp05000ss66v13e5emz9","tag_id":"cle5snp06001as66v29w456t2","_id":"cle5snp07001ms66vabk15s50"},{"post_id":"cle5snp05000ss66v13e5emz9","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp07001ns66v0pz95wgc"},{"post_id":"cle5snp05000ss66v13e5emz9","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp07001os66v9ooi6p1x"},{"post_id":"cle5snp0b001ts66vd9ua6x8d","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp0b001vs66vf3cz9o8h"},{"post_id":"cle5snp0b001ts66vd9ua6x8d","tag_id":"cle5snozz000bs66v5unn5vad","_id":"cle5snp0b001ws66vdhlhcegp"},{"post_id":"cle5snp09001ps66vfiet5o3d","tag_id":"cle5snp0b001rs66v6d8v9d4h","_id":"cle5snp0c001ys66v940nb1zx"},{"post_id":"cle5snp09001ps66vfiet5o3d","tag_id":"cle5snozx0004s66v6vur0twj","_id":"cle5snp0c001zs66vgb9gcxvy"},{"post_id":"cle5snp0a001qs66vbjbz6a1b","tag_id":"cle5snp0b001us66v28fjdzjq","_id":"cle5snp0c0020s66v9jhraaag"},{"post_id":"cle5snp0b001ss66v2wtecpz4","tag_id":"cle5snp0b001xs66v8b0ecr0p","_id":"cle5snp0c0021s66v45q8415c"}],"Tag":[{"name":"算法","_id":"cle5snozx0004s66v6vur0twj"},{"name":"力扣热题100题","_id":"cle5snozz000bs66v5unn5vad"},{"name":"MYSQL","_id":"cle5snp05000ps66v0ig451ah"},{"name":"二叉树","_id":"cle5snp05000us66v7n2bc6o4"},{"name":"数组","_id":"cle5snp06000xs66v3r1h9hy1"},{"name":"待回顾","_id":"cle5snp060016s66v18j71i0j"},{"name":"二进制","_id":"cle5snp06001as66v29w456t2"},{"name":"复杂度分析","_id":"cle5snp0b001rs66v6d8v9d4h"},{"name":"架构","_id":"cle5snp0b001us66v28fjdzjq"},{"name":"linux","_id":"cle5snp0b001xs66v8b0ecr0p"}]}}